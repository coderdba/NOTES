=============================================
ROUTING TECHNIQUES
=============================================

------------------------
LLM WITH TOOLS
------------------------
https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
tools=[func1,func2,func3]

llm=AzureOpenAI(....)
llm_with_tools = llm.bind_tools(tools)

def query_or_respond(state: MessagesState):
    """Generate tool call for retrieval or respond."""
    
    print("INFO - In query_or_respond()")
    
    llm_with_tools = llm.bind_tools([retrieve])
    response = llm_with_tools.invoke(state["messages"])
    
    print("INFO - In query_or_respond() - response: ", response)

    # MessagesState appends messages to state instead of overwriting
    return {"messages": [response]}

# Build graph
graph_builder = StateGraph(MessagesState)

graph_builder.add_node(query_or_respond)
graph_builder.add_node(tools)
graph_builder.add_node(generate)

graph_builder.set_entry_point("query_or_respond")
graph_builder.add_conditional_edges(
    "query_or_respond",
    tools_condition,
    {END: END, "tools": "tools"},
)
graph_builder.add_edge("tools", "generate")
graph_builder.add_edge("generate", END)
)

------------------------
SUPERVISOR NODE
------------------------
Main: Supervisor: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/tutorials/multi_agent/agent_supervisor.ipynb

tools=[func1,func2,func3]
def node_func_supervisor(state: AgentState) -> AgentState:
    print("INFO - In node_func_supervisor()")

    





