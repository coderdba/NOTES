=================================================================
TOPIC MODELING (CATEGORIES, SUBCATEGORIES)
=================================================================
https://www.geeksforgeeks.org/latent-dirichlet-allocation/

=================================================================
MULTIPLE DATA SOURCES 
=================================================================
Multiple data sources PLUS Tools, Agent: https://medium.com/@gayani.parameswaran/q-a-chatbot-with-langchain-and-multiple-data-sources-523d3e15ac26
Multiple data sources PLUS Tools, Agent: https://medium.com/@priyeshdave90/building-a-multi-source-chat-application-with-langchain-and-advanced-rag-0dcf0c4bd82f
-- https://github.com/PriyeshDave/langchain-projects/tree/main/Multi%20Data%20Source
Multi Query retriever: https://python.langchain.com/docs/how_to/MultiQueryRetriever/

=================================================================
CODE GENERATION RELATED
=================================================================
https://www.promptingguide.ai/models/code-llama
https://www.promptingguide.ai/applications/coding

=================================================================
ADAPTIVE (may try for code-conversion)
=================================================================
https://www.analyticsvidhya.com/blog/2024/10/17-prompting-techniques-to-supercharge-your-llms

=================================================================
CHAT BOT APP BUILDING
=================================================================
https://github.com/alexander-zuev/ollama-chainlit/blob/main/app.py
https://medium.com/@cleancoder/build-a-chatbot-in-minutes-with-chainlit-gpt-4-and-langchain-7690968578f0
https://github.com/jonathanscholtes/Travel-AI-Agent-React-FastAPI-and-Cosmos-DB-Vector-Store/tree/main (ansh)

=================================================================
AGENTS
=================================================================
Many good: https://github.com/NirDiamant/GenAI_Agents/blob/main/all_agents_tutorials/essay_grading_system_langgraph.ipynb

https://www.promptingguide.ai/research/llm-agents
- https://arxiv.org/abs/2205.00445 - MRKL is a framework that combines LLMs with expert modules that are either LLMs or symbolic (calculator or weather API).
- https://arxiv.org/abs/2302.04761 - Toolformer fine-tune LLMs to use external tool APIs.
- https://www.promptingguide.ai/applications/function_calling - Function Calling - augments LLMs with tool use capability which involves defining a set of tool APIs and providing it to the model as part of a request.
- https://arxiv.org/abs/2303.17580 - HuggingGPT - an LLM-powered agent that leverages LLMs as a task planner to connect various existing AI models (based on descriptions) to solve AI tasks.

agent.ai

=================================================================
TRAVEL AGENT EXAMPLES
=================================================================
With UI: https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-1-4175ff480b74
- https://github.com/rmartinshort/travel_mapper
Customer support CLI example: https://langchain-ai.github.io/langgraph/tutorials/customer-support/customer-support/

=================================================================
PROMPTS
=================================================================
Generate custom prompt dynamically: https://github.com/langchain-ai/langchain/discussions/25385
Prompting for agents: https://www.promptingguide.ai/research/llm-agents

=================================================================
LANGCHAIN 0.3
=================================================================
Company website: https://www.langchain.com

GENERAL:
- User inputs based prompt generation: https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/#gather-information
- History aware retriever (with langgraph): https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
- https://medium.com/@prasanth.vedantam/prompt-engineering-for-llm-applications-with-langchain-6e7aaa5f762a

SPECIFICS:
- Tool calling: https://python.langchain.com/docs/how_to/tool_calling/  - 
- Tool calling - pass results to model: https://python.langchain.com/docs/how_to/tool_results_pass_to_model/
- Pass run time value to tools: https://python.langchain.com/docs/how_to/tool_runtime/
- Human in the loop for tools: https://python.langchain.com/docs/how_to/tools_human/
- Parallel tool calling: 

AGENTS:
- #IMPORTANT#  Basics of Langgraph prebuilt create_react_agent: https://python.langchain.com/docs/tutorials/agents/
- Legacy (v0.2) AgentExecutor: https://python.langchain.com/docs/how_to/agent_executor/
- Migrate to Langgraph (LC v0.2): https://python.langchain.com/docs/how_to/migrate_agent/ (also state_modifier)
- Basic agent with create_react_agent and Langgraph memory: https://python.langchain.com/docs/tutorials/agents/

API CHAIN:
- https://towardsdatascience.com/integrating-an-external-api-with-a-chatbot-application-using-langchain-and-chainlit-b687bb1efe58

SPECIAL CASES:
- Agentic RAG, self-reflective RAG, corrective RAG, self RAG: https://blog.langchain.dev/agentic-rag-with-langgraph/
---> this may help in evaluating retrieved docs and re-search if docs are not good for the question

OTHER:
Very good on memory, model-with-tools etc: https://python.langchain.com/docs/versions/migrating_memory/long_term_memory_agent/

SQL:
SQL Toolkit (SQLDatabaseToolkit) - which looks up the DB tables, makes query and answers (no need to first generate sql): 
- https://python.langchain.com/docs/integrations/tools/sql_database/

SQL QA tutorial with SQLDatabaseToolkit, langgraph, :
- https://python.langchain.com/docs/tutorials/sql_qa/

Few shot examples, create_sql_query_chain, prompting:
- https://python.langchain.com/docs/how_to/sql_prompting/

--------------
LANGGRAPH
--------------
Look in both https://python.langchain.com/docs and https://langchain-ai.github.io/langgraph/

- About: Memory (history, summarizing): https://github.com/langchain-ai/langgraph/blob/main/docs/docs/concepts/memory.md/

- Tutorials: https://langchain-ai.github.io/langgraph/tutorials/
- Tutorials: https://python.langchain.com/docs/tutorials/
- How Tos: https://langchain-ai.github.io/langgraph/how-tos/
- How Tos: https://python.langchain.com/docs/how_to/

- Tutorial - Information gather prompting - https://github.com/langchain-ai/langgraph/blob/main/docs/docs/tutorials/chatbots/information-gather-prompting.ipynb

- Tutorial - Chatbot (basic): https://langchain-ai.github.io/langgraph/tutorials/introduction/
- Tutorial - Chatbot (with memory): https://python.langchain.com/docs/tutorials/chatbot/
- How To   - Chatbot memory management, trimming: https://python.langchain.com/docs/how_to/chatbots_memory
- Tutorial - Chat History: https://python.langchain.com/docs/tutorials/qa_chat_history (explains how history is updated in state when rag chain is invoked with 'state')

- Tutorial - agentic rag: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/#graph
- Tutorial - agent: https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/

- Tools - returning artifacts - https://python.langchain.com/docs/how_to/tool_artifacts/

- RAG with memory: https://python.langchain.com/docs/tutorials/rag/
- RAG with memory: https://python.langchain.com/docs/how_to/qa_chat_history_how_to/

- Agent - legacy AgentExecutor: https://python.langchain.com/docs/how_to/agent_executor/
- Agent - new ReAct Agent (many in this section) (has graph print): https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/
- Agent - new ReAct Agent: https://python.langchain.com/docs/tutorials/agents/
- Agent - new ReAct Agent: https://python.langchain.com/docs/how_to/migrate_agent/
- Agent - custom react agent, without using create_react_agent (conditional branching also): - https://langchain-ai.github.io/langgraph/how-tos/react-agent-from-scratch/ 
- Agent - Agentic RAG (has graph print) - agentic rag: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- Agent - Langgraph Branching, graph with agent: https://langchain-ai.github.io/langgraph/#example

- Agent - Multi-agent: https://blog.langchain.dev/how-to-build-the-ultimate-ai-automation-with-multi-agent-collaboration/
- Agent - Multi-agent: https://medium.com/@lucas.dahan/hands-on-langgraph-building-a-multi-agent-assistant-06aa68ed942f
- Agent - Multi-agent: https://langchain-ai.github.io/langgraph/concepts/multi_agent/?h=
- Agent - Multi-agent: https://blog.langchain.dev/langgraph-multi-agent-workflows/
          - Collaboration: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/tutorials/multi_agent/multi-agent-collaboration.ipynb
          - Supervisor: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/tutorials/multi_agent/agent_supervisor.ipynb
                    - Supervisor *new 'COMMAND' class added instead of "next" - Dec 2024
          - Hierarchical agent teams: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/tutorials/multi_agent/hierarchical_agent_teams.ipynb

- Langgraph - Multi "agent", conditional branching: https://medium.com/@lucas.dahan/hands-on-langgraph-building-a-multi-agent-assistant-06aa68ed942f
- Langgraph - Multi "agent", conditional branching: https://towardsdatascience.com/from-basics-to-advanced-exploring-langgraph-e8c1cf4db787
- Prompt templates - https://medium.com/@ssmaameri/prompt-templates-in-langchain-efb4da260bd3

- Human in the loop - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-hitl/
- Human in the loop - how to wait for user input - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/wait-user-input/
- Human in the loop - https://python.langchain.com/docs/how_to/tools_human/

- Human in the loop - BOT - https://langchain-ai.github.io/langgraph/tutorials/customer-support/customer-support/ (travel agent)
- Human in the loop - INFO GATHER - https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/

- Human in the loop - https://colab.research.google.com/github/jojohannsen/langgraph_gen/blob/main/human-in-loop.ipynb#scrollTo=3498f044-2381-4e02-bc8c-d1b3c4c0dabb

- Code Assistant: https://langchain-ai.github.io/langgraph/tutorials/code_assistant/langgraph_code_assistant/

- State: https://medium.com/@gitmaxd/understanding-state-in-langgraph-a-comprehensive-guide-191462220997

- Memory: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/concepts/memory.md/
- Memory: long term memory agent (saving memory to vectorstore and searching later from such past conversations) 
    - https://blog.futuresmart.ai/how-to-build-langgraph-agent-with-long-term-memory
- Memory: Removing old messages - https://github.com/langchain-ai/langchain/discussions/22632
- Memory: checkpointing to Postgres - https://langchain-ai.github.io/langgraph/how-tos/persistence_postgres/?h=postgres
- Memory: checkpointing to Mongo - https://langchain-ai.github.io/langgraph/how-tos/persistence_mongodb/

- Retry on invalid tool output: https://medium.com/@lorevanoudenhove/how-to-build-ai-agents-with-langgraph-a-step-by-step-guide-5d84d9c7e832

----------
a bundle
MEMORY:
Langgraph - https://python.langchain.com/docs/how_to/message_history/
Langgraph - https://python.langchain.com/docs/tutorials/chatbot/
Langgraph - https://python.langchain.com/docs/versions/migrating_memory/long_term_memory_agent/
Langgraph - Use traditional memory saver instead of MemorySaver: https://python.langchain.com/docs/versions/migrating_memory/chat_history/

API:
Langgraph - https://github.com/arianpasquali/langgraph-agent-service-toolkit/blob/main/src/service/service.py
--------

https://langchain-ai.github.io/langgraph/reference/prebuilt/#langgraph.prebuilt.chat_agent_executor.create_react_agent

Good article: https://lilianweng.github.io/posts/2023-06-23-agent/
- From https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
Langchain: --> NOTE: Now they ask us to use Langgraph: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- https://python.langchain.com/v0.2/docs/tutorials/agents/
- Multihop - https://towardsdatascience.com/using-langchain-react-agents-for-answering-multi-hop-questions-in-rag-systems-893208c1847e
--> SUPER - READ OTHER ARTICLES BY THIS AUTHOR LIKE: TIME SERIES ANALYSIS: https://towardsdatascience.com/time-series-analysis-using-pandas-in-python-f726d87a97d8
--> Her git repo: https://github.com/V-Sher

- With llama3 and qdrant - https://medium.com/@yash9439/using-langchain-react-agents-with-qdrant-and-llama3-for-intelligent-information-retrieval-b181ce7a5962

--------------------------------------------
API using Langgraph / Langchain
--------------------------------------------
Langgraph: https://github.com/arianpasquali/langgraph-agent-service-toolkit/blob/main/src/service/service.py
  From: https://github.com/JoshuaC215/agent-service-toolkit
Langchain: https://medium.com/@thaunnakishor/langchain-to-use-llm-models-with-fastapi-5edafb6be55f
Langgraph?: https://github.com/sheikhhanif/LangGraph_Streaming/tree/main?tab=readme-ov-file

=================================================================
LLAMAINDEX
=================================================================
BASICS
- Retrievers: https://docs.llamaindex.ai/en/stable/module_guides/querying/retriever/
- VectorStoreIndex: https://docs.llamaindex.ai/en/stable/module_guides/indexing/vector_store_index/
- VectorStoreIndex how to do query/simiarity-search etc: https://docs.llamaindex.ai/en/stable/examples/retrievers/composable_retrievers/
- Service Context migration to Settings: https://docs.llamaindex.ai/en/stable/module_guides/supporting_modules/service_context_migration/
- Langchain Embeddings using in Llamaindex: https://docs.llamaindex.ai/en/stable/examples/embeddings/Langchain/
- Qdrant: https://docs.llamaindex.ai/en/stable/api_reference/storage/vector_store/qdrant/

- API Doc - Vectorstore: https://docs.llamaindex.ai/en/stable/api_reference/storage/vector_store/#llama_index.core.vector_stores.types.VectorStore
- API Doc - BaseIndex: https://docs.llamaindex.ai/en/stable/api_reference/indices/#llama_index.core.indices.base.BaseIndex.as_query_engine
- API Doc - Retriever - VectorIndexRetriever: https://docs.llamaindex.ai/en/stable/api_reference/retrievers/vector/
- API Doc - Retriever - BaseRetriever: https://docs.llamaindex.ai/en/stable/api_reference/retrievers/#llama_index.core.base.base_retriever.BaseRetriever
- API Doc - Query the index - BaseQueryEngine: https://docs.llamaindex.ai/en/stable/api_reference/query_engine/#llama_index.core.base.base_query_engine.BaseQueryEngine

AGENTS:
- Various ones under here: https://docs.llamaindex.ai/en/stable/use_cases/agents/
-- https://docs.llamaindex.ai/en/stable/understanding/putting_it_all_together/agents/
-- https://docs.llamaindex.ai/en/stable/optimizing/agentic_strategies/agentic_strategies/
-- Multi-agent conceirge: https://github.com/run-llama/multi-agent-concierge/

USER INPUT:
- User inputs with branching workflows: https://towardsdatascience.com/building-an-interactive-ui-for-llamaindex-workflows-842dd7abedde
-- Git: https://github.com/lz-chen/research-agent
- Workflows: https://docs.llamaindex.ai/en/stable/module_guides/workflow/

=================================================================
VOICE
=================================================================
Tutorial - https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9
- Model: https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha
- Code: https://github.com/sebastiengilbert73/chat_service

Models - Whisper:
Whisper - https://openai.com/index/whisper/
Model - Whisper: https://huggingface.co/openai/whisper-large-v3-turbo (MIT)
Model - Whisper: https://huggingface.co/RachidAR/Whisper-v3-large-turbo (MIT)
Model - Whisper Small: https://huggingface.co/openai/whisper-small
Model - Whisper Small English: https://huggingface.co/openai/whisper-small.en

Tutorial using Whisper
- https://medium.com/@fivestarwy/speech-recognition-using-whisper-large-v3-turbo-7f150fa33628
- https://medium.com/@ralfelfving/build-your-own-voice-based-chat-assistant-with-openai-whisper-and-tts-text-to-speech-5c1ed05fa9ea

=================================================================
CODE GENERATION
=================================================================
Codellama Ollama: https://ollama.com/library/codellama
Codeup Ollama: https://ollama.com/library/codeup
Codestral Ollama: https://ollama.com/library/codestral
Codegemma Ollama: https://ollama.com/library/codegemma
Deepseek Ollama: https://ollama.com/library/deepseek-coder-v2
Deepseek Huggingface: https://huggingface.co/deepseek-ai/DeepSeek-Coder-V2-Lite-Instruct

Codebert (microsoft): https://github.com/microsoft/CodeBERT
- Tutorial: https://clay-atlas.com/us/blog/2021/10/27/codebert-introduction-2/

Codingfleet (commerical site): https://codingfleet.com/pricing/
- Convert to spring: https://codingfleet.com/code-converter/spring/

===============================
OLLAMA
===============================
Model list: https://github.com/ollama/ollama
CLI, UI list etc: https://github.com/ollama/ollama

Langchain: https://python.langchain.com/docs/integrations/chat/ollama/

Tutorial: https://medium.com/@afilipe362/building-a-simple-chatbot-app-using-ollama-and-langchain-integrated-with-posthog-llm-for-7f3c1b6d2997
Tutorial: https://github.com/sudarshan-koirala/langchain-ollama-chainlit

===============================
Free LLM Servers
===============================
CodeLlama
- https://huggingface.co/codellama
  - Playground: https://huggingface.co/spaces/codellama/codellama-playground
  - Chat: https://huggingface.co/chat/
  - Chat: fails: https://huggingface.co/spaces/codellama/codellama-13b-chat
- Ollama on Discord: https://discord.com/invite/ollama
- Perplexity LLM server: https://labs.perplexity.ai/ - (from tutorial https://www.codecademy.com/article/how-to-use-code-llama), Converts code well stored proc to Java when used with llama-3.1-sonar-large-128k-online 
- Perplexity on Discord : https://discord.com/invite/perplexity-ai

=======================
IDE COPILOT
=======================
VSCode with Azure OpenAI: https://the.cognitiveservices.ninja/azure-openai-services-as-a-copilot-in-visual-studio-code#heading-add-an-extension-to-your-visual-studio-code

=======================
PAPERS
=======================
Negotiation: https://paperswithcode.com/paper/how-well-can-llms-negotiate-negotiationarena
- https://arxiv.org/pdf/2402.05863v1


=======================
SIZING, CAPACITY
=======================
QDRANT
- https://qdrant.tech/documentation/guides/capacity-planning/

MONGO
- 

=================================================================
EVERYTHING
=================================================================
https://developer.nvidia.com/blog/build-an-llm-powered-data-agent-for-data-analysis/
- https://developer.nvidia.com/blog/building-your-first-llm-agent-application/
- Training the model itself with custom data: https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/llama2sft.html

Training the model itself:
- Training the model itself with custom data: https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/llama2sft.html
- https://dzone.com/articles/custom-training-of-large-language-models-a-compreh

Create LLM model from scratch:
- https://www.freecodecamp.org/news/how-to-build-a-large-language-model-from-scratch-using-python/
- Not fully from scratch: https://bdtechtalks.com/2023/05/01/customize-chatgpt-llm-embeddings/
- From scratch - video - https://huggingface.co/learn/nlp-course/chapter7/6 
- How to Create Your Local LLM Model: https://thomascherickal.medium.com/how-to-create-your-own-llm-model-2598615a039a

Gpt - build your own: https://jaketae.github.io/study/gpt/
--> Very from scratch, NOT COMPLETE either

Advanced RAG:
- https://medium.com/llamaindex-blog/a-cheat-sheet-and-some-recipes-for-building-advanced-rag-803a9d94c41b
- https://www.unite.ai/building-llm-agents-for-rag-from-scratch-and-beyond-a-comprehensive-guide/

Langchain 0.3:
- User inputs based prompt generation: https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/#gather-information
- History aware retriever: https://python.langchain.com/docs/how_to/qa_chat_history_how_to/

Langgraph:
- Agents: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- Branching, graph with agent: https://langchain-ai.github.io/langgraph/#example

AGENTS:
Good article: https://lilianweng.github.io/posts/2023-06-23-agent/
- From https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
Langchain: --> NOTE: Now they ask us to use Langgraph: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- https://python.langchain.com/v0.2/docs/tutorials/agents/
- Multihop - https://towardsdatascience.com/using-langchain-react-agents-for-answering-multi-hop-questions-in-rag-systems-893208c1847e
--> SUPER - READ OTHER ARTICLES BY THIS AUTHOR LIKE: TIME SERIES ANALYSIS: https://towardsdatascience.com/time-series-analysis-using-pandas-in-python-f726d87a97d8
--> Her git repo: https://github.com/V-Sher

- With llama3 and qdrant - https://medium.com/@yash9439/using-langchain-react-agents-with-qdrant-and-llama3-for-intelligent-information-retrieval-b181ce7a5962

Llamaindex: 
- https://docs.llamaindex.ai/en/stable/use_cases/agents/


PROJECT IDEAS
- https://www.geeksforgeeks.org/project-ideas-using-large-language-models/?ref=ml_lbp

SPECIAL THINGS
Large Action Models:
- https://www.geeksforgeeks.org/rabbit-ai-large-action-models-lams/?ref=ml_lbp

TICKETING USING LLM
- JIRA TICKETING USING LANGCHAIN: JiraAPIWrapper: https://medium.com/@levi_yehuda/harnessing-langchain-automating-jira-ticket-creation-with-gpt-5429730e8fb0
