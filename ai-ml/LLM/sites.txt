=================================================================
CHAT BOT APP BUILDING
=================================================================
https://github.com/alexander-zuev/ollama-chainlit/blob/main/app.py
https://medium.com/@cleancoder/build-a-chatbot-in-minutes-with-chainlit-gpt-4-and-langchain-7690968578f0

=================================================================
AGENTS
=================================================================
https://www.promptingguide.ai/research/llm-agents
- https://arxiv.org/abs/2205.00445 - MRKL is a framework that combines LLMs with expert modules that are either LLMs or symbolic (calculator or weather API).
- https://arxiv.org/abs/2302.04761 - Toolformer fine-tune LLMs to use external tool APIs.
- https://www.promptingguide.ai/applications/function_calling - Function Calling - augments LLMs with tool use capability which involves defining a set of tool APIs and providing it to the model as part of a request.
- https://arxiv.org/abs/2303.17580 - HuggingGPT - an LLM-powered agent that leverages LLMs as a task planner to connect various existing AI models (based on descriptions) to solve AI tasks.

agent.ai

=================================================================
PROMPTS
=================================================================
Generate custom prompt dynamically: https://github.com/langchain-ai/langchain/discussions/25385
Prompting for agents: https://www.promptingguide.ai/research/llm-agents

=================================================================
LANGCHAIN 0.3
=================================================================
Company website: https://www.langchain.com

GENERAL:
- User inputs based prompt generation: https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/#gather-information
- History aware retriever: https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
- https://medium.com/@prasanth.vedantam/prompt-engineering-for-llm-applications-with-langchain-6e7aaa5f762a

SPECIFICS:
- Tool calling: https://python.langchain.com/docs/how_to/tool_calling/  - 
- Tool calling - pass results to model: https://python.langchain.com/docs/how_to/tool_results_pass_to_model/
- Pass run time value to tools: https://python.langchain.com/docs/how_to/tool_runtime/
- Human in the loop for tools: https://python.langchain.com/docs/how_to/tools_human/
- Parallel tool calling: 

AGENTS:
- Legacy (v0.2) AgentExecutor: https://python.langchain.com/docs/how_to/agent_executor/
- Migrate to Langgraph (LC v0.2): https://python.langchain.com/docs/how_to/migrate_agent/
- Basic agent with create_react_agent and Langgraph memory: https://python.langchain.com/docs/tutorials/agents/

OTHER:
Very good on memory, model-with-tools etc: https://python.langchain.com/docs/versions/migrating_memory/long_term_memory_agent/

--------------
LANGGRAPH
--------------
- Tutorials: https://langchain-ai.github.io/langgraph/tutorials/
- Tutorials: https://python.langchain.com/docs/tutorials/
- How Tos: https://langchain-ai.github.io/langgraph/how-tos/
- How Tos: https://python.langchain.com/docs/how_to/

- Tutorial - agentic rag: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/#graph
- Tutorial - agent: https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/

- Tools - returning artifacts - https://python.langchain.com/docs/how_to/tool_artifacts/

- Agent - legacy AgentExecutor: https://python.langchain.com/docs/how_to/agent_executor/
- Agent - new ReAct Agent (many in this section) (has graph print): https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/
- Agent - new ReAct Agent: https://python.langchain.com/docs/tutorials/agents/
- Agent - new ReAct Agent: https://python.langchain.com/docs/how_to/migrate_agent/
- Agent - Agentic RAG (has graph print) - agentic rag: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- Agent - Langgraph Branching, graph with agent: https://langchain-ai.github.io/langgraph/#example

- Human in the loop - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-hitl/
- Human in the loop - how to wait for user input - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/wait-user-input/
- Human in the loop - https://python.langchain.com/docs/how_to/tools_human/

- State: https://medium.com/@gitmaxd/understanding-state-in-langgraph-a-comprehensive-guide-191462220997

- Memory: https://github.com/langchain-ai/langgraph/blob/main/docs/docs/concepts/memory.md/
- Memory - long term memory agent - https://blog.futuresmart.ai/how-to-build-langgraph-agent-with-long-term-memory
- Memory: Removing old messages - https://github.com/langchain-ai/langchain/discussions/22632

- Retry on invalid tool output: https://medium.com/@lorevanoudenhove/how-to-build-ai-agents-with-langgraph-a-step-by-step-guide-5d84d9c7e832

----------
- a bundle
MEMORY:
Langgraph - https://python.langchain.com/docs/how_to/message_history/
Langgraph - https://python.langchain.com/docs/tutorials/chatbot/
Langgraph - https://python.langchain.com/docs/versions/migrating_memory/long_term_memory_agent/
Langgraph - Use traditional memory saver instead of MemorySaver: https://python.langchain.com/docs/versions/migrating_memory/chat_history/

API:
Langgraph - https://github.com/arianpasquali/langgraph-agent-service-toolkit/blob/main/src/service/service.py
--------

https://langchain-ai.github.io/langgraph/reference/prebuilt/#langgraph.prebuilt.chat_agent_executor.create_react_agent

Good article: https://lilianweng.github.io/posts/2023-06-23-agent/
- From https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
Langchain: --> NOTE: Now they ask us to use Langgraph: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- https://python.langchain.com/v0.2/docs/tutorials/agents/
- Multihop - https://towardsdatascience.com/using-langchain-react-agents-for-answering-multi-hop-questions-in-rag-systems-893208c1847e
--> SUPER - READ OTHER ARTICLES BY THIS AUTHOR LIKE: TIME SERIES ANALYSIS: https://towardsdatascience.com/time-series-analysis-using-pandas-in-python-f726d87a97d8
--> Her git repo: https://github.com/V-Sher

- With llama3 and qdrant - https://medium.com/@yash9439/using-langchain-react-agents-with-qdrant-and-llama3-for-intelligent-information-retrieval-b181ce7a5962

--------------------------------------------
API using Langgraph / Langchain
--------------------------------------------
Langgraph: https://github.com/arianpasquali/langgraph-agent-service-toolkit/blob/main/src/service/service.py
  From: https://github.com/JoshuaC215/agent-service-toolkit
Langchain: https://medium.com/@thaunnakishor/langchain-to-use-llm-models-with-fastapi-5edafb6be55f
Langgraph?: https://github.com/sheikhhanif/LangGraph_Streaming/tree/main?tab=readme-ov-file

=================================================================
LLAMAINDEX
=================================================================
AGENTS:
- Various ones under here: https://docs.llamaindex.ai/en/stable/use_cases/agents/
-- https://docs.llamaindex.ai/en/stable/understanding/putting_it_all_together/agents/
-- https://docs.llamaindex.ai/en/stable/optimizing/agentic_strategies/agentic_strategies/
-- Multi-agent conceirge: https://github.com/run-llama/multi-agent-concierge/

=================================================================
VOICE
=================================================================
Tutorial - https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9
- Model: https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha
- Code: https://github.com/sebastiengilbert73/chat_service

Models - Whisper:
Whisper - https://openai.com/index/whisper/
Model - Whisper: https://huggingface.co/openai/whisper-large-v3-turbo (MIT)
Model - Whisper: https://huggingface.co/RachidAR/Whisper-v3-large-turbo (MIT)
Model - Whisper Small: https://huggingface.co/openai/whisper-small
Model - Whisper Small English: https://huggingface.co/openai/whisper-small.en

Tutorial using Whisper
- https://medium.com/@fivestarwy/speech-recognition-using-whisper-large-v3-turbo-7f150fa33628
- https://medium.com/@ralfelfving/build-your-own-voice-based-chat-assistant-with-openai-whisper-and-tts-text-to-speech-5c1ed05fa9ea

=================================================================
EVERYTHING
=================================================================
https://developer.nvidia.com/blog/build-an-llm-powered-data-agent-for-data-analysis/
- https://developer.nvidia.com/blog/building-your-first-llm-agent-application/
- Training the model itself with custom data: https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/llama2sft.html

Training the model itself:
- Training the model itself with custom data: https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/llama2sft.html
- https://dzone.com/articles/custom-training-of-large-language-models-a-compreh

Create LLM model from scratch:
- https://www.freecodecamp.org/news/how-to-build-a-large-language-model-from-scratch-using-python/
- Not fully from scratch: https://bdtechtalks.com/2023/05/01/customize-chatgpt-llm-embeddings/
- From scratch - video - https://huggingface.co/learn/nlp-course/chapter7/6 
- How to Create Your Local LLM Model: https://thomascherickal.medium.com/how-to-create-your-own-llm-model-2598615a039a

Gpt - build your own: https://jaketae.github.io/study/gpt/
--> Very from scratch, NOT COMPLETE either

Advanced RAG:
- https://medium.com/llamaindex-blog/a-cheat-sheet-and-some-recipes-for-building-advanced-rag-803a9d94c41b
- https://www.unite.ai/building-llm-agents-for-rag-from-scratch-and-beyond-a-comprehensive-guide/

Langchain 0.3:
- User inputs based prompt generation: https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/#gather-information
- History aware retriever: https://python.langchain.com/docs/how_to/qa_chat_history_how_to/

Langgraph:
- Agents: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- Branching, graph with agent: https://langchain-ai.github.io/langgraph/#example

AGENTS:
Good article: https://lilianweng.github.io/posts/2023-06-23-agent/
- From https://python.langchain.com/docs/how_to/qa_chat_history_how_to/
Langchain: --> NOTE: Now they ask us to use Langgraph: https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/?h=agent#retriever
- https://python.langchain.com/v0.2/docs/tutorials/agents/
- Multihop - https://towardsdatascience.com/using-langchain-react-agents-for-answering-multi-hop-questions-in-rag-systems-893208c1847e
--> SUPER - READ OTHER ARTICLES BY THIS AUTHOR LIKE: TIME SERIES ANALYSIS: https://towardsdatascience.com/time-series-analysis-using-pandas-in-python-f726d87a97d8
--> Her git repo: https://github.com/V-Sher

- With llama3 and qdrant - https://medium.com/@yash9439/using-langchain-react-agents-with-qdrant-and-llama3-for-intelligent-information-retrieval-b181ce7a5962

Llamaindex: 
- https://docs.llamaindex.ai/en/stable/use_cases/agents/


PROJECT IDEAS
- https://www.geeksforgeeks.org/project-ideas-using-large-language-models/?ref=ml_lbp

SPECIAL THINGS
Large Action Models:
- https://www.geeksforgeeks.org/rabbit-ai-large-action-models-lams/?ref=ml_lbp

TICKETING USING LLM
- JIRA TICKETING USING LANGCHAIN: JiraAPIWrapper: https://medium.com/@levi_yehuda/harnessing-langchain-automating-jira-ticket-creation-with-gpt-5429730e8fb0
