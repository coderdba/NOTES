Joyjeet Banerjee book
Certifiied Solution Architect Associate

IAAS - self: app, runtime, security, databases (managed: servers, virtualization, hw, storage, network)
PAAS - self: app
SAAS - self: nothing - just use the app

AZ - availability zone

POP - points of presense - 'edge' locations - for better client experience for content and such 
- Amazon CloudFront, Amazon Route 53, Amazon Video etc use such POPs
Regional edge cache locations - between the main servers and the edge locations

AWS Outposts - AWS in our own datacenters

Security 
- AWS provides security 'of the cloud' - servers, network, firewall etc of the cloud they provide
- Customer have to manage the security of their apps and data - 'in the cloud'

AMAZON ELASTIC COMPUTE CLOUD (EC2) 
- virtual servers
- cpu, memory or gpu bound as per client's needs
- autoscaling
-- always run required number of instances
-- health metric to know hot machines that can be manually shutdown

LAMBDA
- Upload just code
- Set up event triggers when code has to run - like when S3 upload happens, DB uploads, Gateway requests...
- Autoscaling and HA is taken care of automatically
- pay only for the compute used

AMAZON EC2 CONTAINER SERVICE - ECS
- Run containers on pre-built EC2 instances
- Can use ELB load balancer, EBS block storage
- Write your own scheduler or use Amazon's

AMAZON ELASTIC KUBERNETES SERVICE - EKS
- just deploy on Amazon's K8S
- can be multi AZ
- scaling

AWS FARGATE
- serverless compute engine for containers that works with both Amazon ECS and Amazon EKS
- dont have to create and manage servers for ECS/EKS
- scale, load balance, manage scheduling

AWS ELASTIC BEANSTALK
- deploy web apps - no need to worry on where it runs 
- Java, PHP, .NET, node.js, python, go - ON SERVERS LIKE Nginx, Apache
- Deploy code and AWS will take care of underlying resource
- pay only for the compute used

AMAZON LIGHTSAIL
- 

====================================
STORAGE
====================================
EFS - file
EBS - block
EC2 Instance store - block
S3 - object
Glacier - object

object - doc, image etc - with metadata - access via api
block - appears as a disk volume, single digit latency
file - filesystem like, sharable across EC2 instances

----------------------------
S3 - SIMPLE STORAGE SERVICE
----------------------------
- S3 Standard, S3 Standard-Infrequent Access, and S3 Glacier 
- 3 AZ - except - Amazon S3-One Zone Infrequent Access - single AZ

- highly durable
- nice web interface
- unlimited storage space
- fault tolerant -  sustain  concurrent data loss in two facilities

- flat namespace with buckets
- no real 'fileystem' structure

- Simple: to access - cli, sdk, rest api's
- Scalable
- Durable - 99.999999999% (10000 docs - loss of one will take 10,000,000 
- Secure
- High performance
- Available - 99.99%
- versioning

- 3 copies of each file in 3 AZ's in a region
- infrequent access

- use as tape replacement, static web hosting, app hosting, DR
- content distribution
- data lake
- private repo

AMAZON S3 BASIC CONCEPTS
- Data
- Metadata

- Bucket & Key
-- bucket name unique - even across regions
-- identify any stored object in S3 bucket with a unique combination of bucket, key, and version ID
-- bucket: mynotes
-- keys: note1.mp3, oldnotes/note1.mp3 and such
-- http://mynotes.s3.amazonaws.com/note1.mp3
-- http://mynotes.s3.amazonaws.com/oldnotes/note1.mp3

- Object will stay in the region where created, say, US East - unless moved explicitly to another region

- Access - Rest API, SOAP with HTTPS
-- POST, GET, PUT, PATCH, and DELETE

- Access - aws cli
-- aws s3 mb s3://bucket-name
-- aws s3 rb s3://bucket-name

- Insert/update/delete takes some time
-- newly inserted object will not be available to read until propagated to replicas
-- updated/deleted may still show up until propagated

- Partitioning
-- The following places all files into same partition that starts with 'c' - which is the first letter of the key 
-- mybucket/chapter1/page1.pdf
-- mybucket/chapter1/page2.pdf
-- mybucket/chapter2/page1.pdf
...

-- The following places files into separate partitions that start with '1', '2' etc - which is the first letter of the key 
-- mybucket/1chapter/page1.pdf
-- mybucket/1chapter/page2.pdf
-- mybucket/2chapter/page1.pdf
...

-- The following places all files into same partition that starts with '1' - which is the first letter of the key 
-- mybucket/1234/page1.pdf
-- mybucket/1235/page2.pdf
-- mybucket/1236/page1.pdf
...

-- The following places files into separate partitions that start with '4', '3' etc - which is the first letter of the key --> REVERSE KEY
-- mybucket/4321/page1.pdf
-- mybucket/5321/page2.pdf
-- mybucket/6321/page1.pdf
...
...

-- The following places files into separate partitions that start with 's', 'e' etc - which is the first letter of the key --> WHICH IS PREFIXED WITH A HASH
-- mybucket/sdfs1234/page1.pdf
-- mybucket/erws1235/page2.pdf
-- mybucket/lkdf1236/page1.pdf
...

- Encryption
-- server side encryption SSE
--- objects are encrypted with one-time randomly generated content encryption key (CEK) per S3 object. 
--- The CEK is protected by some encryption materials which are stored alongside the object.
--- Encryption client http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3EncryptionClient.html
--- AES 256
--- SSE with Amazon S3 Key Management (SSE-SE) 
      Each object is encrypted with a key
      That key is encrypted with a master key
      Master key is managed by S3 key management
      Master key is rotated every month
--- SSE with customer-provided keys (SSE-C)
      Customer provides encryption key
      Customer uses that same key for retrieval
      Amazon does not store the key - it is just used when customer supplies it for read or write
--- SSE with AWS Key Management Service KMS (SSE-KMS) 
      Customer provides the key
      Customer manages the key in AWS KMS (key management service)
      Separate permissions to manage the master key
      Audit trail
      Additional security controls to meet PCI-DSS, HIPAA/HITECH, and FedRAMP

- Access Control
-- Policy generator: AWS Policy Generator (https://awspolicygen.s3.amazonaws.com/policygen.html).
-- user to bucket, object
-- user groups
-- ACL
-- MFA
-- amazon resource name (ARN)--> arn:partition:service:region:account-id:resource (or resourcetype:resource)
-- arn:aws:s3:::mybucket
-- arn:aws:s3:::mybucket/doc1.doc
-- arn:aws:s3:::mybucket/docs/doc1.doc
-- arn:aws:s3:::mybucket/docs/*
-- Example policy:
{
"Version": "2021-02-02",
"Statement":[
  {
    "Sid":"AddPerm", --> optional
    "Principal":"*", --> to allow anonymous access
    "Effect":"Allow",
    "Action":[
    "s3:PutObject",
    "s3:GetObject"
    ],
    "Resource":"arn:aws:s3:::mybucket/docs/*",
    "Condition": {
      "IpAddress": {"aws:SourceIp": "55:60:70:0/24"},
      "NotIpAddress": {"aws:SourceIp": "55:60:80.0/16"}
    }
  }
]
}
