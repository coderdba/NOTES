Joyjeet Banerjee book
Certifiied Solution Architect Associate

IAAS - self: app, runtime, security, databases (managed: servers, virtualization, hw, storage, network)
PAAS - self: app
SAAS - self: nothing - just use the app

AZ - availability zone

POP - points of presense - 'edge' locations - for better client experience for content and such 
- Amazon CloudFront, Amazon Route 53, Amazon Video etc use such POPs
Regional edge cache locations - between the main servers and the edge locations

AWS Outposts - AWS in our own datacenters

Security 
- AWS provides security 'of the cloud' - servers, network, firewall etc of the cloud they provide
- Customer have to manage the security of their apps and data - 'in the cloud'

AMAZON ELASTIC COMPUTE CLOUD (EC2) 
- virtual servers
- cpu, memory or gpu bound as per client's needs
- autoscaling
-- always run required number of instances
-- health metric to know hot machines that can be manually shutdown

LAMBDA
- Upload just code
- Set up event triggers when code has to run - like when S3 upload happens, DB uploads, Gateway requests...
- Autoscaling and HA is taken care of automatically
- pay only for the compute used

AMAZON EC2 CONTAINER SERVICE - ECS
- Run containers on pre-built EC2 instances
- Can use ELB load balancer, EBS block storage
- Write your own scheduler or use Amazon's

AMAZON ELASTIC KUBERNETES SERVICE - EKS
- just deploy on Amazon's K8S
- can be multi AZ
- scaling

AWS FARGATE
- serverless compute engine for containers that works with both Amazon ECS and Amazon EKS
- dont have to create and manage servers for ECS/EKS
- scale, load balance, manage scheduling

AWS ELASTIC BEANSTALK
- deploy web apps - no need to worry on where it runs 
- Java, PHP, .NET, node.js, python, go - ON SERVERS LIKE Nginx, Apache
- Deploy code and AWS will take care of underlying resource
- pay only for the compute used

AMAZON LIGHTSAIL
- 






