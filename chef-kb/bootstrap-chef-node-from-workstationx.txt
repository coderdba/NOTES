=================================
BOOTSTRAP A NODE FROM WORKSTATION 
=================================

-->-->-->
FOR WINDOWS NODES, SEE 'BOOTSTRAPPING WINDOWS NODE' later in this document
--------------------------------------------------------------------------

Basics - also for forwarded ports with vagrant VMs - some parts not very clear when talking about ssh keys - https://learn.chef.io/manage-a-node/rhel/bootstrap-your-node/
SSH keys correctly explained - and -A option - https://www.digitalocean.com/community/tutorials/how-to-set-up-a-chef-12-configuration-management-system-on-ubuntu-14-04-servers
Another ssh key example - http://deis.readthedocs.org/en/rtfd-versions/installation/static/
Not really good for bootstrapping - however it has a way to convert Chef server's user's public key into RSA public-private key pairs - http://serverfault.com/questions/653543/chef-ssh-without-password

===========================
NOTE ON SSH KEY FOR NODES
===========================

Key-Policy:
Keys need not be generated specifically for each node - it could be a key generated elsewhere and copied over
IDEALLY - make a given set of keys for yourself, and sets of nodes and use them as above

Usage:
In the .ssh folder of nodes/clients we dont need to keep their private or public key files - id_rsa and id_rsa.pub
Just add id_rsa.pub contents into .ssh/authorised_keys file
Use the private key of the node in the workstation for --identity-file directive
--> This applies whether it is root user or your own user that can do sudo to root
--> This applies to other key based authentication also - like for Git, Jenkins etc (read their specific usage elsewhere)


===========================
INITIAL SETUP - Worstation
===========================

------------------------
CHEF CLIENT KEYS
------------------------
- ORG PEM METHOD
Go to the correct organization in the chef-server
Download chef-starter.zip from chef server
Unzip it in some temporary location
Locate .chef folder in it
Copy the .chef folder including its contents to:
  If using Bill's kitchen, then in O: drive (or O:\chef-repo or other folder)
  If using C drive itself, then in C: drive (or C:\chef-repo or other folder)

NOTE: Bootstrap command should be run from this .chef folder

- YOUR OWN USERNAME METHOD
Create your user in chef server
Make it belong to the organizations as needed
Download the user's pem file

------------------------
LAPTOP/WORKSTATION SETUP
------------------------

On the lapop, in ~/.chef, knife.rb file 
- client key pem file (your own username key or org key) 
- chef server to  chef server chef01 or other
- organization - myorg or other organization to which to bootstrap to
- node_name in the knife.rb file can be your own username or I think the org name

-- FILE ~/.chef/knife.rb:

# See https://docs.getchef.com/config_rb_knife.html for more information on knife configuration options

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "myusername"
client_key               "keys/myusername.key.chef01.pem"
chef_server_url          "https://chef01.mycompany.com/organizations/myorg"

=======================
BOOTSTRAP A LINUX NODE
=======================

-------------------------------
INITIAL SETUP - Node (client to be bootstrapped)
-------------------------------

The client node may be member of another organization.
Either delete the client from that organization - OR - do the following:

Go to /etc/chef
Rename client.pem to client.pem.that_organziation_name
Rename client.rb  to client.rb.that_organization_name

-------------------------------------------
BOOTSTRAP WITH PASSWORD --- USING ROOT USER
-------------------------------------------
O:\.chef> knife bootstrap <ip/hostname of node> --ssh-user <my username> --ssh-password '<my password>' --node-name <node name or hostname of the node>

--------------------------------------------------------------------
BOOTSTRAP WITH PASSWORD --- USING USER THAT HAS sudo su - root PRIVILEGE
--------------------------------------------------------------------
O:\.chef> knife bootstrap <ip/hostname of node> --ssh-user <my username> --ssh-password '<my password>' --sudo --use-sudo-password --node-name <node name or hostname of the node>

NOTE: THIS DOES NOT ASK FOR SUDO PASSWORD AS THE USER HAS A PASSWORD GIVEN ALREADY, AND --use-sudo-password USES THE SAME PASSWORD

--------------------------------------------------------------------------------------
BOOTSTRAP WITH PASSWORD (2019 notes) --- USING USER THAT HAS sudo su - root PRIVILEGE
---------------------------------------------------------------------------------------

- BOOTSTRAP NOW
On the laptop - 

Run the knife bootstrap command with the following syntax:
$ knife bootstrap -N <node name> <FQDN or IP> -x <your lan-ID> --sudo
Note: -N <node name> - node name could be FQDN itself or short name or some other identifiable name
Caution: This will overwrite the /etc/chef folder on the VM - so backup /etc/chef of the VM first
Note: This will not set any environment immediately for the node

$ knife bootstrap -N lab001.mycompany.com lab001.mycompany.com -x myusername --sudo
Node lab001.mycompany.com exists, overwrite it? (Y/N) N
You said no, so I'm done here.
a483e7493237:.chef myusername$  knife bootstrap -N lab001.mycompany.com lab001.mycompany.com -x myusername --sudo
Node lab001.mycompany.com exists, overwrite it? (Y/N) Y
Client lab001.mycompany.com exists, overwrite it? (Y/N) Y
Creating new client for lab001.mycompany.com
Creating new node for lab001.mycompany.com
Connecting to lab001.mycompany.com
myusername@lab001.mycompany.com's password:
lab001.mycompany.com Could not chdir to home directory /home_dir/myusername: No such file or directory
lab001.mycompany.com knife sudo password: 
Enter your password: 
lab001.mycompany.com 
lab001.mycompany.com -----> Existing Chef installation detected
lab001.mycompany.com Starting the first Chef Client run...
lab001.mycompany.com Starting Chef Client, version 14.12.9
lab001.mycompany.com resolving cookbooks for run list: [] 
lab001.mycompany.com Synchronizing Cookbooks:
lab001.mycompany.com Installing Cookbook Gems:
lab001.mycompany.com Compiling Cookbooks...
lab001.mycompany.com [2019-12-12T23:40:31-06:00] WARN: Node lab001.mycompany.com has an empty run list. 
lab001.mycompany.com Converging 0 resources
lab001.mycompany.com 
lab001.mycompany.com Running handlers:
lab001.mycompany.com Running handlers complete
lab001.mycompany.com Chef Client finished, 0/0 resources updated in 02 seconds

------------------------------------------------------------------------
BOOTSTRAP WITH SSH KEY --- USING ROOT USER - with SSH KEY of ROOT ITSELF
------------------------------------------------------------------------
Create ssh key of the root user as follows:
Logon/sudo to root on the node/client
Go to /root
Create .ssh folder there
Run ssh-keygen to create id_rsa and id_rsa.pub in /root/.ssh folder
Add contents of id_rsa.pub (public key) into authorized_keys file
Copy contents of id_rsa (private key) and copy it into a file in O drive --> O:/<some folder>/<root private key filename>
After this, on the node/client, you can rename/move/remove those id_rsa and id_rsa.pub (read KEY NOTE section above)

O:\.chef>knife bootstrap <ip/hostname of node> --ssh-user root --identity-file '<root private key filename - full path>' --node-name <node name or hostname of the node>

------------------------------------------------------------------------
BOOTSTRAP WITH SSH KEY --- USING USER THAT HAS sudo su - root PRIVILEGE
------------------------------------------------------------------------
NOTE: This still asked for a sudo password and 'your password' (see further note below)
Example: knife bootstrap ADDRESS --ssh-user USER --sudo --identity-file IDENTITY_FILE --node-name node1 --run-list 'recipe[learn_chef_httpd]'
O:\.chef>knife bootstrap <ip/hostname of the node> --ssh-user <my username> --sudo --identity-file '<my private key file>' --node-name <node name or hostname>

NOTE: To avoid password prompt provide ssh-password and use-sudo-password directives (OR DISABLE PASSWORD AT O/S LEVEL FOR SUDO)
O:\.chef>knife bootstrap <ip/hostname of the node> --ssh-user <my username> --sudo --identity-file '<my private key file>' --node-name <node name or hostname> --ssh-password '<my password>' --use-sudo-password

NOTE: Password still is required -  https://www.digitalocean.com/community/tutorials/how-to-set-up-a-chef-12-configuration-management-system-on-ubuntu-14-04-servers
(this also uses -A directive - which is inconsequential when talking about sudo password)
    If we want to use SSH keys to authenticate to a sudo user, we will still need to provide a password using the -P flag, 
    the --sudo flag, and the --use-sudo-password flag to avoid prompts:
    
    knife bootstrap node_domain_or_IP -x demo -A -P password --sudo --use-sudo-password -N name
    If you are in the above scenario, but do not mind being promted for the sudo password, you can instead just type this:
    
    knife bootstrap node_domain_or_IP -x demo -A --sudo -N name
    
----------------------------
LIST THE NODES BOOTSTRAPPED
----------------------------
O:\.chef> knife node list

-------------------------------------------------
DELETING A NODE FROM THE CHEF-SERVER ORGANIZATION
-------------------------------------------------
O:\.chef> knife node delete <node name given at the time of bootstrapping>

=======================
BOOTSTRAP WINDOWS NODE
=======================

NOTE:  To do this with SSL so that https is used - http://stackoverflow.com/questions/28186060/chef-issue-bootstrapping-windows-vm-using-winrm-over-https-using-self-signed-cer

--------------
SITES FOR HELP
--------------
https://developer.rackspace.com/blog/step-by-step-walkthrough-to-using-chef-to-bootstrap-windows-nodes-on-the-rackspace-cloud/
https://docs.chef.io/plugin_knife_windows.html
https://github.com/chef/knife-windows
https://rubygems.org/gems/knife-windows/versions/1.4.0 --> to download the gem
BUG: http://stackoverflow.com/questions/29131020/ssl-validation-error-coming-while-doing-chef-client-setup

---------------------
PREP: GEM REQUIREMENT
---------------------
Bootstrapping a windows node needs knife-windows gem on the workstation (not the node to bootstrap).

Install the gem:
gem install knife-windows
(for detailed messages see the gem install appendix below)

---------------------------
PREP: WINRM, FIREWALL SETUP
---------------------------
Windows does not use ssh.  
Instead it uses winrm.
Winrm and its ports need to be setup in the client node.

On the Windows node, firewall should be made to allow winrm connections.
For that, logon to the node as administrator and create/modify a firewall rule.
(if using openstack, there is a post-script to run in 'nova boot' step - see openstack kb for that)

Do the following steps on the client node (not workstation) 

Logon to node as administrator
Open a powershell session
Run the following commands: (on the client node - not the workstation)

Run 'winrm quickconfig'
If remote admin is not enabled, it will prompt whether it should be enabled.  Choose yes.

Run the following commands after this:
#ps1_sysnative  (this directive is necessary if the remaining commands are in a powershell script)
winrm quickconfig -q
netsh advfirewall firewall add rule name="Windows remote management http-in" profile=public protocol=TCP dir=in localport=5985 action=allow
netsh advfirewall firewall add rule name="Windows remote management https-in" profile=public protocol=TCP dir=in localport=5986 action=allow
netsh advfirewall firewall add rule name="remote desktop RDP" profile=public protocol=TCP dir=in localport=3389 action=allow
winrm set winrm/config '@{MaxTimeoutms="2000000"}'
winrm set winrm/config/service '@{AllowUnencrypted="true"}'
winrm set winrm/config/service/auth '@{Basic="true"}'
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="2048"}'
winrm set winrm/config/client '@{TrustedHosts="*"}'
net stop winrm
sc.exe config winrm start=auto
net start winrm
Restart-Computer  (this may not be necessary to restart the node)

--------------------------
DO THE BOOTSTRAP
--------------------------
NOTE: Windows bootstrap needs Administrator userid and password of the client node

NOTE on OPENSTACK:
If using openstack nodes/instances, retrieve the password for Administrator - see openstack kb for that.
Also, in knife.rb we need to embed openstack url, project and user credentials - see openstack kb for that.

BOOTSTRAP STEPS:
Go to .chef directory as in the Linux bootstrap steps.
Then use one of the following options to do the bootstrap.

VARIOUS BOOTSTRAP OPTIONS:
knife bootstrap windows winrm <Your node FQDN or IP> -winrm-user <UserName> --winrm-password <Password> --node-name <Your node name> 
knife bootstrap windows winrm 10.65.85.95 -x Administrator --identity-file '<private key file>' --node-name WinSrv1
knife bootstrap windows winrm 10.65.85.95 --winrm-user Administrator --winrm-password xxxyyyzzz --node-name WinSrv1
knife bootstrap windows winrm 10.65.85.95 -x Administrator -P xxxyyyzzz --node-name WinSrv1
(not sure  if this works) knife bootstrap windows winrm 10.65.85.95 -x Administrator --identity-file 'my-id-rsa.private' --node-name WinSrv1
knife bootstrap windows winrm 10.65.85.95 --winrm-user Administrator --winrm-password xxxyyyzzz --node-name WinSrv1 --node-ssl-verify-mode none  (this one worked when SSL came up without --node-ssl-verify directive)

You may get the following SSL error - use the additional directive "--node-ssl-verify-mode none" in the knife bootstrap command)
FATAL: OpenSSL::SSL::SSLError: SSL Error connecting to https://<chef server>/organizations/gorgname/clients - SSL_connect returned=1 errno=0 state=error: certificate verify failed

========================
APPENDICES
========================
INSTALLING THE GEM:
O:\>gem install knife-windows
Fetching: gssapi-1.2.0.gem (100%)
Successfully installed gssapi-1.2.0
Fetching: nori-2.6.0.gem (100%)
Successfully installed nori-2.6.0
Fetching: rubyntlm-0.6.0.gem (100%)
Successfully installed rubyntlm-0.6.0
Fetching: winrm-1.7.3.gem (100%)
Successfully installed winrm-1.7.3
Fetching: knife-windows-1.4.0.gem (100%)
Successfully installed knife-windows-1.4.0
Parsing documentation for gssapi-1.2.0
Installing ri documentation for gssapi-1.2.0
Parsing documentation for nori-2.6.0
Installing ri documentation for nori-2.6.0
Parsing documentation for rubyntlm-0.6.0
Installing ri documentation for rubyntlm-0.6.0
Parsing documentation for winrm-1.7.3
Installing ri documentation for winrm-1.7.3
Parsing documentation for knife-windows-1.4.0
Installing ri documentation for knife-windows-1.4.0
5 gems installed

O:\.chef>knife bootstrap windows winrm 10.65.85.95 -x Administrator --identity-file my-id-rsa.priv --node-name WinSrv1
O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems/specification.rb:2104:in `raise_if_conflicts': Unable to activate knife-windows-1.4.0, because winrm-1.2.0 conflicts with winrm (~> 1.7) (Gem::ConflictError)
        from O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems/specification.rb:1282:in `activate'
        from O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems.rb:198:in `rescue in try_activate'
        from O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems.rb:195:in `try_activate'
        from O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:126:in `rescue in require'
        from O:/tools/chefdk/embedded/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:39:in `require'
        from O:/home/.chefdk/gem/ruby/2.0.0/gems/knife-windows-1.4.0/lib/chef/knife/bootstrap_windows_base.rb:22:in `<top (required)>'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife/core/subcommand_loader.rb:35:in `load'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife/core/subcommand_loader.rb:35:in `block in load_commands'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife/core/subcommand_loader.rb:35:in `each'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife/core/subcommand_loader.rb:35:in `load_commands'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife.rb:126:in `load_commands'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/knife.rb:207:in `run'
        from O:/tools/chefdk/embedded/apps/chef/lib/chef/application/knife.rb:139:in `run'
        from O:/tools/chefdk/embedded/apps/chef/bin/knife:25:in `<top (required)>'
        from O:/tools/chefdk/bin/knife:52:in `load'
        from O:/tools/chefdk/bin/knife:52:in `<main>'

O:\.chef>gem list |grep winrm
winrm (1.7.3, 1.2.0)

O:\.chef>gem uninstall winrm -v 1.2.0
ERROR:  While executing gem ... (Gem::InstallError)
    winrm is not installed in GEM_HOME, try:
        gem uninstall -i O:/tools/chefdk/embedded/lib/ruby/gems/2.0.0 winrm

O:\.chef>gem uninstall -i O:/tools/chefdk/embedded/lib/ruby/gems/2.0.0 winrm -v 1.2.0

You have requested to uninstall the gem:
        winrm-1.2.0

chef-provisioning-0.18 depends on winrm (~> 1.2.0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled winrm-1.2.0

O:\.chef>knife bootstrap windows winrm 10.65.85.95 -x Administrator --identity-file 'my-id-rsa.private' --node-name WinSrv20121
Error: invalid option: --identity-file
USAGE: knife bootstrap windows winrm FQDN (options)
    -a, --attribute ATTR             The attribute to use for opening the connection - default is fqdn
        --auth-timeout MINUTES       The maximum time in minutes to wait to for authentication over the transport to the node to succeed. The default value is 2 minutes.
        --bootstrap-install-command COMMANDS
                                     Custom command to install chef-client
        --bootstrap-no-proxy [NO_PROXY_URL|NO_PROXY_IP]
                                     Do not proxy locations for the node being bootstrapped; this option is used internally by Opscode
        --bootstrap-proxy PROXY_URL  The proxy server for the node being bootstrapped
        --bootstrap-template TEMPLATE
                                     Bootstrap Chef using a built-in or custom template. Set to the full path of an erb template or use one of the built
-in templates.
        --bootstrap-vault-file VAULT_FILE
                                     A JSON file with a list of vault(s) and item(s) to be updated
        --bootstrap-vault-item VAULT_ITEM
                                     A single vault and item to update as "vault:item"
        --bootstrap-vault-json VAULT_JSON
                                     A JSON string with the vault(s) and item(s) to be updated
        --bootstrap-version VERSION  The version of Chef to install
    -f CA_TRUST_FILE,                The Certificate Authority (CA) trust file used for SSL transport
        --ca-trust-file
    -N, --node-name NAME             The Chef node name for your new node
        --server-url URL             Chef Server URL
        --chef-zero-host HOST        Host to start chef-zero on
        --chef-zero-port PORT        Port (or port range) to start chef-zero on.  Port ranges like 1000,1010 or 8889-9999 will try all given ports until one works.
    -k, --key KEY                    API Client Key
        --[no-]color                 Use colored output, defaults to false on Windows, true otherwise
    -c, --config CONFIG              The configuration file to use
        --defaults                   Accept default values for all questions
        --disable-editing            Do not open EDITOR, just accept the data as is
    -d, --distro DISTRO              Bootstrap a distro using a template. [DEPRECATED] Use -t / --bootstrap-template option instead.
    -e, --editor EDITOR              Set the editor to use for interactive commands
    -s, --secret                     The secret key to use to decrypt data bag item values.  Will be rendered on the node at c:/chef/encrypted_data_bag_secret and set in the rendered client config.
        --secret-file SECRET_FILE    A file containing the secret key to use to encrypt data bag item values. Will be rendered on the node at c:/chef/encrypted_data_bag_secret and set in the rendered client config.
    -E, --environment ENVIRONMENT    Set the Chef environment (except for in searches, where this will be flagrantly ignored)
    -j JSON_ATTRIBS,                 A JSON string to be added to the first run of chef-client
        --json-attributes
        --json-attribute-file FILE   A JSON file to be used to the first run of chef-client
    -F, --format FORMAT              Which format to use for output
        --hint HINT_NAME[=HINT_FILE] Specify Ohai Hint to be set on the bootstrap target.  Use multiple --hint options to specify multiple hints.
        --install-as-service         Install chef-client as a Windows service
    -T, --keytab-file KEYTAB_FILE    The Kerberos keytab file used for authentication
    -R KERBEROS_REALM,               The Kerberos realm used for authentication
        --kerberos-realm
    -S KERBEROS_SERVICE,             The Kerberos service used for authentication
        --kerberos-service
    -z, --local-mode                 Point knife commands at local repository instead of server
    -m, --manual-list                QUERY is a space separated list of servers
        --msi-url URL                Location of the Chef Client MSI. The default templates will prefer to download from this location. The MSI will be downloaded from chef.io if not provided.
    -u, --user USER                  API Client Username
        --node-ssl-verify-mode [peer|none]
                                     Whether or not to verify the SSL cert for all HTTPS requests.
        --[no-]node-verify-api-cert  Verify the SSL cert for HTTPS requests to the Chef server API.
        --policy-group POLICY_GROUP  Policy group name to use (--policy-name must also be given)
        --policy-name POLICY_NAME    Policyfile name to use (--policy-group must also be given)
        --prerelease                 Install the pre-release chef gems
        --print-after                Show the data after a destructive operation
    -r, --run-list RUN_LIST          Comma separated list of roles/recipes to apply
        --session-timeout Minutes    The timeout for the client for the maximum length of the WinRM session
        --ssl-peer-fingerprint FINGERPRINT
                                     ssl Cert Fingerprint to bypass normal cert chain checks
        --tags TAGS                  Comma separated list of tags to apply to the node
        --template-file TEMPLATE     Full path to location of template to use. [DEPRECATED] Use -t / --bootstrap-template option instead.
    -V, --verbose                    More verbose output. Use twice for max verbosity
    -v, --version                    Show chef version
        --winrm-authentication-protocol AUTHENTICATION_PROTOCOL
                                     The authentication protocol used during WinRM communication. The supported protocols are basic,negotiate,kerberos. Default is 'negotiate'.
    -P, --winrm-password PASSWORD    The WinRM password
    -p, --winrm-port PORT            The WinRM port, by default this is '5985' for 'plaintext' and '5986' for 'ssl' winrm transport
        --winrm-ssl-verify-mode SSL_VERIFY_MODE
                                     The WinRM peer verification mode. Valid choices are [verify_peer, verify_none]
    -t, --winrm-transport TRANSPORT  The WinRM transport type.  valid choices are [ssl, plaintext]
    -x, --winrm-user USERNAME        The WinRM username
    -y, --yes                        Say yes to all prompts for confirmation
    -h, --help                       Show this message

O:\.chef>knife bootstrap windows winrm 10.65.85.95 -x Administrator --node-name WinSrv1
Enter your password:
Doing old-style registration with the validation key at O:/.chef/org-validator.pem...
Delete your validation key in order to use your user credentials instead

Waiting for remote response before bootstrap...ERROR: No response received from remote node after 2.77 minutes, giving up.
ERROR: Exception: undefined method `split' for nil:NilClass
ERROR: knife encountered an unexpected error
This may be a bug in the 'bootstrap windows winrm' knife command or plugin
Please collect the output of this command with the `-VV` option before filing a bug report.
Exception: NoMethodError: undefined method `split' for nil:NilClass

O:\.chef>
O:\.chef>knife bootstrap windows ssh winrm 10.65.85.95 -x Administrator --identity-file 'my-id-rsa.private' --node-name WinSrv1
Doing old-style registration with the validation key at O:/.chef/org-validator.pem...
Delete your validation key in order to use your user credentials instead

ERROR: knife encountered an unexpected error
This may be a bug in the 'bootstrap windows ssh' knife command or plugin
Please collect the output of this command with the `-VV` option before filing a bug report.
Exception: NoMethodError: undefined method `relay_winrm_command' for #<Chef::Knife::BootstrapWindowsSsh:0x56ae3d0>

BUG???:   http://stackoverflow.com/questions/29131020/ssl-validation-error-coming-while-doing-chef-client-setup
http://stackoverflow.com/questions/24645707/knife-bootstrap-windows-winrm-timeout-issue
https://learn.chef.io/manage-a-node/windows/bootstrap-your-node/
https://technet.microsoft.com/en-us/magazine/ff700227.aspx --> winrm configuration things

ALTERNATIVE COMMANDS
knife bootstrap windows winrm 10.65.85.95 --winrm-user Administrator --winrm-password xxxyyyzzz --node-name WinSrv1
knife bootstrap windows winrm 10.65.85.95 -x Administrator -P xxxyyyzzz --node-name WinSrv1

ALLOW WINRM ON WINDOWS MACHINE (NODE) TO ALLOW ADMIN COMMANDS FROM REMOTE MACHINES:
https://technet.microsoft.com/en-us/magazine/ff700227.aspx
Logon to Windows node as administrator
Open a powershell window
Run 'winrm quickconfig'
If remote admin is not enabled, it will prompt whether it should be enabled.  Choose yes.

