=======================================
CRIO TUTORIAL - with centos7 vbox vm
=======================================
Based on: https://github.com/cri-o/cri-o/blob/main/tutorial.md

==================
INSTALL
==================
https://github.com/cri-o/cri-o/blob/main/install.md#other-yum-based-operating-systems

----------------------------
INSTALL ON CENTOS
----------------------------

STEPS REFERENCE
curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo
yum install cri-o

STEPS FOR CENTOS7 AND CRIO 1.22.1 VERSION
# curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo
# curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:1.22.1.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.22:/1.22.1/CentOS_7/devel:kubic:libcontainers:stable:cri-o:1.22:1.22.1.repo
# yum install cri-o

ENABLE AND START THE SERVICE
# systemctl enable crio
# systemctl restart crio

VERIFY
# ps -ef |grep crio
avahi      598     1  0 19:17 ?        00:00:00 avahi-daemon: running [crio1.local]


#  ps -ef |grep crio
avahi      598     1  0 19:17 ?        00:00:00 avahi-daemon: running [crio1.local]
root      5148     1  0 19:53 ?        00:00:00 /usr/bin/crio

CRIO SERVICE FILES
# cd /usr/lib/systemd/system
# ls -l crio*
-rw-r--r--. 1 root root 699 Nov 12 01:55 crio.service
-rw-r--r--. 1 root root 412 Nov 12 01:55 crio-wipe.service

====================================================================================
INSTALL GOLANG (if installing crictl using golang and compiling locally)
====================================================================================
https://linuxize.com/post/how-to-install-go-on-centos-7/

INSTALL
wget https://go.dev/dl/go1.17.3.linux-amd64.tar.gz
sha256sum go1.17.3.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.17.3.linux-amd64.tar.gz
vi ~/.bash_profile
export PATH=$PATH:/usr/local/go/bin
source ~/.bash_profile

VERIFY
# go version
go version go1.17.3 linux/amd64

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PODS AND CONTAINERS USING CRICTL COMMAND
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==============================
INSTALL CRICTL
==============================
https://kubernetes.io/docs/tasks/debug-application-cluster/crictl/
--> https://github.com/kubernetes-sigs/cri-tools/releases

wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.22.0/crictl-v1.22.0-linux-amd64.tar.gz
tar -C /usr/local/bin -xzf crictl-v1.22.0-linux-amd64.tar.gz
chown root:root /usr/local/bin/crictl
chmod 755 /usr/local/bin/crictl

------------------------------------
INSTALL CRICTL - THIS DID NOT WORK
------------------------------------
https://github.com/cri-o/cri-o/blob/main/tutorials/crictl.md

INSTALL
go get github.com/kubernetes-sigs/cri-tools/cmd/crictl
...
got some get errors ...

------------------------------------
VERIFY
------------------------------------

which crictl
sudo crictl --runtime-endpoint unix:///var/run/crio/crio.sock version

Version:  0.1.0
RuntimeName:  cri-o
RuntimeVersion:  1.22.1
RuntimeApiVersion:  v1alpha2

==================================
CREATE A POD
==================================

------------------------------
CREATE THE POD (to put containers in it in the next steps)
------------------------------
CREATE MANIFEST FOR A POD
Copy a pod-spec from file: https://github.com/cri-o/cri-o/blob/main/test/testdata/sandbox_config.json

Modify the CPU and memory settings per your machine's capacities.
- created a file sandbox_config_my.json as follows:

{
	"metadata": {
		"name": "podsandbox1",
		"uid": "redhat-test-crio",
		"namespace": "redhat.test.crio",
		"attempt": 1
	},
	"hostname": "crictl_host",
	"log_directory": "",
	"dns_config": {
		"searches": [
			"8.8.8.8"
		]
	},
	"port_mappings": [],
	"resources": {
		"cpu": {
			"limits": 3,
			"requests": 1
		},
		"memory": {
			"limits": 50000000,
			"requests": 1000000
		}
	},
	"labels": {
		"group": "test"
	},
	"annotations": {
		"owner": "hmeng",
		"security.alpha.kubernetes.io/seccomp/pod": "unconfined",
		"com.example.test": "sandbox annotation"
	},
	"linux": {
		"cgroup_parent": "pod_123-456.slice",
		"security_context": {
			"namespace_options": {
				"network": 0,
				"pid": 1,
				"ipc": 0
			},
			"selinux_options": {
				"user": "system_u",
				"role": "system_r",
				"type": "svirt_lxc_net_t",
				"level": "s0:c4,c5"
			}
		}
	}
}


CREATE THE POD
# crictl runp ./sandbox_config_my.json
ff6b90c35f7584a5571585912bce962f35608857f5d80deffa82af65c9522d02

EXPORT POD ID FOR CONVENIENCE
export POD_ID=ff6b90c35f7584a5571585912bce962f35608857f5d80deffa82af65c9522d02

GET POD STATUS/DETAILS
# crictl inspectp --output table ff6b90c35f7584a5571585912bce962f35608857f5d80deffa82af65c9522d02

ID: ff6b90c35f7584a5571585912bce962f35608857f5d80deffa82af65c9522d02
Name: podsandbox1
UID: redhat-test-crio
Namespace: redhat.test.crio
Attempt: 1
Status: SANDBOX_READY
Created: 2021-12-02 20:40:51.875970108 +0530 IST
IP Addresses: 10.85.0.2
Additional IP: 1100:200::2
Labels:
        group -> test
        io.kubernetes.container.name -> POD
Annotations:
        com.example.test -> sandbox annotation
        owner -> hmeng
        security.alpha.kubernetes.io/seccomp/pod -> unconfined
...
...
...

---------------------------------
ADD REDIS CONTAINER
---------------------------------

CREATE THE REDIS CONTAINER MANIFEST

Get the manifest file: https://github.com/cri-o/cri-o/blob/main/test/testdata/container_redis.json

{
	"metadata": {
		"name": "podsandbox1-redis"
	},
	"image": {
		"image": "quay.io/crio/redis:alpine"
	},
	"args": [
                "docker-entrypoint.sh",
                "redis-server"
	],
	"working_dir": "/data",
	"envs": [
		{
			"key": "PATH",
			"value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
		},
		{
			"key": "TERM",
			"value": "xterm"
		},
		{
			"key": "REDIS_VERSION",
			"value": "3.2.3"
		},
		{
			"key": "REDIS_DOWNLOAD_URL",
			"value": "http://download.redis.io/releases/redis-3.2.3.tar.gz"
		},
		{
			"key": "REDIS_DOWNLOAD_SHA1",
			"value": "92d6d93ef2efc91e595c8bf578bf72baff397507"
		}
	],
	"labels": {
		"tier": "backend"
	},
	"annotations": {
		"pod": "podsandbox1"
	},
	"log_path": "",
	"stdin": false,
	"stdin_once": false,
	"tty": false,
	"linux": {
		"resources": {
			"memory_limit_in_bytes": 209715200,
			"cpu_period": 10000,
			"cpu_quota": 20000,
			"cpu_shares": 512,
			"oom_score_adj": 30,
			"cpuset_cpus": "0",
			"cpuset_mems": "0"
		},
		"security_context": {
			"namespace_options": {
				"pid": 1
			},
			"readonly_rootfs": false,
			"capabilities": {
				"add_capabilities": [
					"sys_admin"
				]
			}
		}
	}
}

CREATE THE CONTAINER INSIDE THE POD

# export POD_ID=ff6b90c35f7584a5571585912bce962f35608857f5d80deffa82af65c9522d02
# export CONTAINER_ID=$(crictl create $POD_ID ./container_redis.json ./sandbox_config_my.json)
FATA[0000] creating container: rpc error: code = Unknown desc = image not known 

# echo $CONTAINER_ID



