=======================================
DATA AND DATABASE DESIGN
=======================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PART1  - RDBMS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=======================
ENTITY AND RELATIONS
=======================
Entity (table)
- A Thing
- Has properties (columns)
- May be related to other entities (foreign keys)
- Properties may have restrictions (constraints)

Relation
- Relates two entities (foreign key)
- One Entity to One Entity
- One Entity to Many Entities

Constraint
- Restrictions on properties of an entity
- Primary key, unique key, null/not-null, check (values) ...

=======================
CASE 1
=======================

An organization has many companies
A company has many departments
Each department has many employees
Each department has many applications
Employees in a department may access applications of one or more departments

===================================================
CASE 1 - BASIC
===================================================

------------------
TABLE - DEPARTMENT
------------------
ID - int, serial number, primary key
NAME - unique  
DESCRIPTION (what do you think about this?)

---------------------
TABLE - EMPLOYEE
---------------------
ID - int, serial number, primary key
EMPLOYEE_ID - unique
NAME
ADDRESS
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

---------------------
TABLE - APPLICATION
---------------------
ID - int, serial number, primary 
APP_ID - unique
NAME - unique
DESCRIPTION - (what do you think about this?)
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

---------------------
TABLE - APP_ACCESS
---------------------
ID - int, serial number, primary key
APP_ID
EMPLOYEE_ID
ACCESS_TYPE
constarint CHECK ACCESS_TYPE IN ('read', 'write', 'admin', 'none')
<< do we need a unique constraint >>
<< do we need any other constraints or checks >>

QUESTION 1: Tell me what should be the unique constraint here
QUESTION 2: Is this one to many or many to many or one to one relationship?

=========================================================
CASE 1 - EXTENDED - ORGANIZATION ACQUIRES MORE COMPANIES 
=========================================================
----------------------
TABLE - ORGANIZATION
----------------------
ID - int, serial number, primary key
NAME - unique
DESCRIPTION --> how about this?
CITY

------------------
TABLE - COMPANY
------------------
ID - int, serial number, primary key
NAME - unique
DESCRIPTION
CITY
ORGANIZATION_ID - foreign key with ORGANIZATION(ID)

------------------
TABLE - DEPARTMENT
------------------

- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME - unique  --> PROBLEM: What if different companies of the same org have same department name (say, HR, RECEIVING, DESPATCH)
DESCRIPTION
COMAPNY_ID - foreign key with COMPANY(ID)

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME
DESCRIPTION
COMAPNY_ID - foreign key with COMPANY(ID)
add constraint UNIQUE KEY (NAME, COMAPNY_ID) --> added constraint to accomodate duplicate department names

---------------------
TABLE - EMPLOYEE
---------------------
NOTE: 
- Typically emplyee IDs will be different across different companies. So, uniqueness may be already there (version1 below)
- If not, then keys will have to change (version2  below)
      
Version1:
ID - int, serial number, primary key
EMPLOYEE_ID - unique
NAME
ADDRESS
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

Version2:
ID - int, serial number, primary key
EMPLOYEE_ID
COMPANY_ID
NAME
ADDRESS
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (EMPLOYEE_ID, COMPANY_ID) --> added constraint to accomodate duplicate employee id's

--> NOTE: Adding company_id like this amounts to a bit of 'de-normalization' where some foreign-keys are brought 
in though they can be derived from other foreign keys.  For example, here, COMPANY_ID can be derived using DEPARTMENT_ID.  
However, due to the peculiarity of EMPLOYEE_ID duplicate values across companies, COMPANY_ID is brought into this table.
--> Due to adding additional company_id here, programs must check during insert/update that the DEPARTMENT_ID belongs to the same company as the COMPANY_ID

---------------------
TABLE - APPLICATION
---------------------

* ITERATION 1
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME - unique --> PROBLEM: What if different companies/departments of the same org have same app name (say, HR, TRANSPORT)
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME  
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> added constraint to accomodate duplicate app names

~~~~~~~~~~ MORE ITERATIONS ~~~~~~~~~~~~~~~~~~~~~
* ITERATION 2 --> Organization decides that across the org, an app_id will be assigned to each app
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME 
APP_ID --> newly added
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> NOTE: THIS IS ALSO REQUIRED

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME 
APP_ID - unique 
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID)

* ITERATION 3 --> Rationaize the names of applications making them unique across the organization
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME --> must be made unique
APP_ID --> already added
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> NOTE: THIS IS ALSO REQUIRED

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME - unique
APP_ID - unique 
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
<< constraint removed because now NAME is unique across all departments and companies >>

---------------------
TABLE - APP_ACCESS
---------------------
ID - int, serial number, primary key
APP_ID
EMPLOYEE_ID
ACCESS_TYPE
constarint CHECK ACCESS_TYPE IN ('read', 'write', 'admin', 'none')
<< do we need a unique constraint >>
<< do we need any other constraints or checks >>

QUESTION 1: Tell me what should be the unique constraint here
QUESTION 2: Is this one to many or many to many or one to one relationship?


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PART2  - DATA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What needs RDBMS
What is a 'document' (json)
Where to store JSONs - NOSQL or RDBMS

=============================
JSON, CSV, Plain Text
=============================
JSON, CSV, Plain Text - can be 'input data' in files
They can be used as is from files by programs - or - if necessary stored in DB (RDBMS or NOSQL)

!!!! However !!!!
A CSV may contain repeating values, varying data

=============================
CASE 1 - Spare Parts Stores
=============================

A company has many workshops.
Each workshop does many types of machining.
"Similar" or "same" spare-parts are stocked in each workshop's store.

Data: Tools Stock CSV
STORE1, Welding Rods, 10 boxes, 7018 grade
STORE1, Grinding wheels, 20 count, EN12313 Grindwell
STORE1, Grinding wheels, 20 count, A60SST Exovit
STORE1, Coolant - drilling, 11 liters 
STORE1, Coolant - lathe, 40 liters 
STORE1, Welding flux SS, 22 kilograms
STORE1, Welding flux MS, 10 kilograms

STORE2, Welding Rods, 5 boxes, 7018 Bluekin
STORE2, Welding Rods, 7 boxes, 7018 ESAB
STORE2, Grinding wheel, 15 count, Grindwell EN12313
STORE2, Grinding wheel, 12 count, Carborundum 
STORE2, Exovit Grinding wheels, 20 count, A60SST 
STORE2, Coolant - drilling, 8 liters 
STORE2, Coolant - lathe, brass, 4 liters 
STORE2, SS Welding flux SS, 10 kilograms
STORE2, MS flux, 20 kilograms

Application to build:
- Enter and modify stock data
- Show storewise stock of each item
- Show total stock of each item across the company
- Stock reporting must be accurate
- If a store has shortage of an item, it should be able to order it from another store
- Some products are 'similar' that can substitute for the other brand/type if a specific brand/type is not available
  (example: 7018 welding rods are same properties across brands)

Questions:
- Is the data in the CSV good for the purpose of the application to build?
- What type of data store will be suitable - CSV files, RDBMS or NOSQL-Document?

=============================
CASE 2 - Static Data
=============================
Business:
- A painting company gives quotations to paint apartments.
- Prices vary by floor, size and type of walls.
- Customer can choose one ore more whole floors which will then include all apartments of those floors.
- Customer can choose the whole building which will then include all apartments of the building.
- Buidling data must be provided to the painting company 
- Painting company will then update it with pricing for different apartments and upload to their system.

Application to build:
- Provide dropdowns to choose the whole building or specific floor or specific apartment
- Depending upon the chosen bundle, give pricing for painting that many apartments

Question:
- What kind of data structure will be good for this purpose?
- What kind of file/RDBMS/Document-DB will be good?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PART3  - NON-RELATIONAL DATA STORES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=============================
Datatypes to store JSON
=============================
- VARCHAR2 in Oracle which can be treated as JSON
- JSON, JSONB in Postgres
- Collections in Mongo

In Oracle and Postgres
- JSON data will be in a column
- Any key in it cannot be made primary key of the row in the table
- Keys in the JSON can be indexed

Example:  WEBLOGIC_SERVERS
ID - int, serial number, primary key
NAME - unique
DESCRIPTION
CITY
ORGANIZATION_ID - foreign key with ORGANIZATION(ID)

In Mongo
- 



