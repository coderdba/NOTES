=======================================
DATA AND DATABASE DESIGN
=======================================

=======================
ENTITY AND RELATIONS
=======================
Entity (table)
- A Thing
- Has properties (columns)
- May be related to other entities (foreign keys)
- Properties may have restrictions (constraints)

Relation
- Relates two entities (foreign key)
- One Entity to One Entity
- One Entity to Many Entities

Constraint
- Restrictions on properties of an entity
- Primary key, unique key, null/not-null, check (values) ...

=======================
CASE
=======================

An organization has many companies
A company has many departments
Each department has many employees
Each department has many applications
Employees in a department may access applications of one or more departments

----------------------
TABLE - ORGANIZATION
----------------------
ID - int, serial number, primary key
NAME - unique
DESCRIPTION
CITY

------------------
TABLE - COMPANY
------------------
ID - int, serial number, primary key
NAME - unique
DESCRIPTION
CITY
ORGANIZATION_ID - foreign key with ORGANIZATION(ID)

------------------
TABLE - DEPARTMENT
------------------

- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME - unique  --> PROBLEM: What if different companies of the same org have same department name (say, HR, RECEIVING, DESPATCH)
DESCRIPTION
COMAPNY_ID - foreign key with COMPANY(ID)

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME
DESCRIPTION
COMAPNY_ID - foreign key with COMPANY(ID)
add constraint UNIQUE KEY (NAME, COMAPNY_ID) --> added constraint to accomodate duplicate department names

---------------------
TABLE - EMPLOYEE
---------------------
NOTE: 
- Typically emplyee IDs will be different across different companies. So, uniqueness may be already there (version1 below)
- If not, then keys will have to change (version2  below)
      
Version1:
ID - int, serial number, primary key
EMPLOYEE_ID - unique
NAME
ADDRESS
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

Version2:
ID - int, serial number, primary key
EMPLOYEE_ID
COMPANY_ID
NAME
ADDRESS
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (EMPLOYEE_ID, COMPANY_ID) --> added constraint to accomodate duplicate employee id's

--> NOTE: Adding company_id like this amounts to a bit of 'de-normalization' where some foreign-keys are brought 
in though they can be derived from other foreign keys.  For example, here, COMPANY_ID can be derived using DEPARTMENT_ID.  
However, due to the peculiarity of EMPLOYEE_ID duplicate values across companies, COMPANY_ID is brought into this table.
--> Due to adding additional company_id here, programs must check during insert/update that the DEPARTMENT_ID belongs to the same company as the COMPANY_ID

---------------------
TABLE - APPLICATION
---------------------

* ITERATION 1
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME - unique --> PROBLEM: What if different companies/departments of the same org have same app name (say, HR, TRANSPORT)
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME  
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> added constraint to accomodate duplicate app names

~~~~~~~~~~ MORE ITERATIONS ~~~~~~~~~~~~~~~~~~~~~
* ITERATION 2 --> Organization decides that across the org, an app_id will be assigned to each app
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME 
APP_ID --> newly added
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> NOTE: THIS IS ALSO REQUIRED

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME 
APP_ID - unique 
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID)

* ITERATION 3 --> Rationaize the names of applications making them unique across the organization
- PROBLEMATIC DESIGN:
ID - int, serial number, primary key
NAME --> must be made unique
APP_ID --> already added
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
add constraint UNIQUE KEY (NAME, DEPARTMENT_ID) --> NOTE: THIS IS ALSO REQUIRED

- CORRECT DESIGN:
ID - int, serial number, primary key
NAME - unique
APP_ID - unique 
DESCRIPTION
DEPARTMENT_ID - foreign key with DEPARTMENT(ID)
<< constraint removed because now NAME is unique across all departments and companies >>










