================================================
DOCKER PERSISTENCE
================================================

http://thenewstack.io/methods-dealing-container-storage/
http://stackoverflow.com/questions/28574433/do-docker-containers-retain-file-changes
http://stackoverflow.com/questions/30853247/how-to-edit-file-after-i-shell-to-a-docker-container

http://stackoverflow.com/questions/19585028/i-lose-my-data-when-the-container-exits --> read this
http://askubuntu.com/questions/505506/how-to-get-bash-or-ssh-into-a-running-container-in-background-mode

http://stackoverflow.com/questions/36423620/postgres-in-docker-persistent-data --> for postgres

READ THESE:
https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-host-directory-as-a-data-volume --> host volumes
https://monax.io/2015/06/17/docker-persistence/?redirect_from_eris=true --> persistent data container
https://www.andreagrandi.it/2015/02/21/how-to-create-a-docker-image-for-postgresql-and-persist-data/ --> postgres
https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-host-directory-as-a-data-volume

Observation:
$ docker run --rm -t -i --link pg_test:pg eg_postgresql bash
In a postgres container, going into it using 'bash' and doing some file-changes - the changes vanished upon restart of the container.
However, changes done to postgres instance - like new DB's - they persisted.
This has something to do with -rm optin?? But even without rm option the files changes are being undone??

REASON: That is because the 'bash' command is not modifying the linked running container.  
        The 'run' spawns a temporary container and bash modifies it.  
        Once the run exits, the temporary container is exited and if -rm is used it will also be removed.
        Therefore, the running container is not changed, instead, the temporary container is changed - which also vanishes upon exit/rm.
        The look and feel of both containers can be same if using same image.
        (see also note below)
        
        NOTE: In the case of postgres container, if run is used to invoke psql on the image using a temporary container, that psql
              connects to the running container by 'link' (see postgres container notes). 
              Then, any DB changes are done actually to the DB in the linked container and not the temporary container.
              Therefore, the db changes in running container persists.
              
------------------------------
Sort of Fix: If after run...bash changes were done to the temp container, how to see those after exiting - see below
------------------------------
http://stackoverflow.com/questions/19585028/i-lose-my-data-when-the-container-exits
Every time a 'run' is done a container is created temporarily.
The changes done to it will vanish of sorts when we exit out of it.
However, we can find that 'exited' conatiner, start it, attach it and see the changes back in that version of the container.

$ docker run -t -i --link pg_test:pg eg_postgresql bash
postgres@12e1629ff15c:/$ date > /tmp/datefile
postgres@12e1629ff15c:/$ cat /tmp/datefile
Fri Nov 25 12:17:49 UTC 2016
postgres@12e1629ff15c:/$ exit

NOTE: The command below lists the 'exited' containers - suspicious_almeida is the one that we exited just now
[docker@oralx0001 ssh1]$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS                     NAMES
12e1629ff15c        eg_postgresql       "bash"                   25 seconds ago      Exited (0) 8 seconds ago                                   suspicious_almeida
6bc771f8c3dc        eg_postgresql       "/usr/lib/postgresql/"   56 seconds ago      Up 54 seconds                    0.0.0.0:32788->5432/tcp   pg_test
9712a27a0752        eg_postgresql       "bash"                   13 minutes ago      Exited (0) 13 minutes ago                                  boring_montalcini0

- Restart that one, attach and look for the file in /tmp
$ docker start suspicious_almeida
suspicious_almeida
[docker@oralx0001 ssh1]$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                     NAMES
12e1629ff15c        eg_postgresql       "bash"                   47 seconds ago       Up 7 seconds        5432/tcp                  suspicious_almeida
6bc771f8c3dc        eg_postgresql       "/usr/lib/postgresql/"   About a minute ago   Up About a minute   0.0.0.0:32788->5432/tcp   pg_test
997af6789cb8        postgres            "/docker-entrypoint.s"   30 hours ago         Up 30 hours         5432/tcp                  postgres1

$ docker attach 12e1629ff15c
$ cd tmp
$ ls -l
-rw-r--r--. 1 postgres postgres 29 Nov 25 12:17 datefile

------------------------------
Real Fix: If you wanted to actually access the running container and do some filesystem or software changes within it.
------------------------------
NOTE: ideally, if those must be really-really permanent, then that running container must be saved as a new image, 
      and container restarted using that new image that contains all changes to f/s or software.
http://askubuntu.com/questions/505506/how-to-get-bash-or-ssh-into-a-running-container-in-background-mode
Connect with 'exec' or 'attach' to the actual running container insted of 'run'
$ docker exec -i -t pg_test /bin/bash (or sudo docker exec -i -t pg_test /bin/bash)
( - you can use the container id also instead of name pg_test )
postgres@6bc771f8c3dc$ cd /var/lib/postgresql
postgres@6bc771f8c3dc:~$ ls -l
total 4
drwxr-xr-x. 3 postgres postgres 4096 Nov 25 10:23 9.6
postgres@6bc771f8c3dc:~$ touch ddd
postgres@6bc771f8c3dc:~$ ls -l
total 4
drwxr-xr-x. 3 postgres postgres 4096 Nov 25 10:23 9.6
-rw-r--r--. 1 postgres postgres    0 Nov 25 12:55 ddd
postgres@6bc771f8c3dc:~$ echo ddd > ddd
postgres@6bc771f8c3dc:~$ exit

$ docker stop pg_test
pg_test
$ docker start pg_test
pg_test

$  docker exec -i -t pg_test /bin/bash
$ cd /var/lib/postgresql
$ ls -l
total 8
drwxr-xr-x. 3 postgres postgres 4096 Nov 25 10:23 9.6
-rw-r--r--. 1 postgres postgres    4 Nov 25 12:55 ddd
