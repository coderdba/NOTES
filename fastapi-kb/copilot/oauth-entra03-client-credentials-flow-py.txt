If you're building a machine-to-machine or backend-only app (no user interaction), you should use the client credentials flow, not PKCE.

===========================================================================================================================
Can you give a fastapi code with client credentials flow to authenticate another application calling the fastapi api
===========================================================================================================================
NOTE: To verify scopes etc also see section "How to verify scope?"

Here‚Äôs a complete example of a FastAPI app that uses the OAuth2 Client Credentials Flow to authenticate requests from another application using Microsoft Entra ID (Azure AD).

‚úÖ Use Case
This is ideal for machine-to-machine (M2M) communication, where no user interaction is needed.

üìÅ Project Structure
.env ‚Äì stores Azure credentials
main.py ‚Äì FastAPI app with token validation
requirements.txt ‚Äì dependencies

üì¶ Step 1: Install Dependencies
pip install fastapi python-dotenv msal pyjwt uvicorn

.env File
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
API_SCOPE=api://your-api-client-id/.default

main.py
from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
import os
import jwt
import requests

load_dotenv()

TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
API_SCOPE = os.getenv("API_SCOPE")
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
JWKS_URL = f"{AUTHORITY}/discovery/v2.0/keys"

app = FastAPI()
security = HTTPBearer()

# Cache JWKS keys
jwks = requests.get(JWKS_URL).json()

def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            return jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )
    raise HTTPException(status_code=401, detail="Invalid token")

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        return decode_token(credentials.credentials)
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.get("/secure-data")
async def secure_data(user=Depends(verify_token)):
    return {"message": "Access granted", "client_id": user["azp"]}


===================================
How to Run
===================================
Install dependencies:
pip install -r requirements.txt

Set your Azure credentials in .env:
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
API_SCOPE=api://your-api-client-id/.default

Start the FastAPI app:
uvicorn main:app --reload

Call the /secure-data endpoint using a valid bearer token from another app (using MSAL).

===================================
How the Calling App Gets a Token
===================================
from msal import ConfidentialClientApplication

app = ConfidentialClientApplication(
    client_id="your-client-id",
    client_credential="your-client-secret",
    authority="https://login.microsoftonline.com/your-tenant-id"
)

token = app.acquire_token_for_client(scopes=["api://your-api-client-id/.default"])
print(token["access_token"])

================================================================
how do i call the secure endpoint using curl and using python
================================================================
1. Generate a Token Using MSAL (Python Script)
This script uses the Client Credentials Flow to get an access token from Microsoft Entra ID:

from msal import ConfidentialClientApplication

TENANT_ID = "your-tenant-id"
CLIENT_ID = "your-client-id"
CLIENT_SECRET = "your-client-secret"
SCOPE = ["api://your-api-client-id/.default"]

app = ConfidentialClientApplication(
    client_id=CLIENT_ID,
    client_credential=CLIENT_SECRET,
    authority=f"https://login.microsoftonline.com/{TENANT_ID}"
)

token_response = app.acquire_token_for_client(scopes=SCOPE)

if "access_token" in token_response:
    print("Access Token:")
    print(token_response["access_token"])
else:
    print("Error acquiring token:")
    print(token_response.get("error_description"))


2. Call the FastAPI Endpoint

‚úÖ Using curl
Replace <your-access-token> with the token from the MSAL script.

curl -X GET http://localhost:8000/secure-data \
  -H "Authorization: Bearer <your-access-token>"


‚úÖ Using Python (requests)
import requests

token = "your-access-token"
headers = {
    "Authorization": f"Bearer {token}"
}

response = requests.get("http://localhost:8000/secure-data", headers=headers)

print(response.status_code)
print(response.json())

===============================================================================================================
What does decode_token function do? Does it verify anything or just decodes the token?
===============================================================================================================
The decode_token function in your FastAPI app does both decoding and verification of the JWT access token. Here's a breakdown of what it does:

What decode_token Does
def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            return jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )

‚úÖ 1. Decodes the Header (Unverified)
unverified_header = jwt.get_unverified_header(token)

This extracts the header to find the kid (Key ID), which tells us which public key to use for verification.

üîê 2. Finds the Matching Public Key
for key in jwks["keys"]:
    if key["kid"] == unverified_header["kid"]:
        public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)

It loads the correct public key from the JWKS (JSON Web Key Set) provided by Microsoft Entra ID.

üõ°Ô∏è 3. Verifies the Token
jwt.decode(
    token,
    public_key,
    algorithms=["RS256"],
    audience=CLIENT_ID,
    issuer=f"{AUTHORITY}/v2.0"
)

This step verifies:

‚úÖ The signature using the public key
‚úÖ The audience (aud) matches your CLIENT_ID
‚úÖ The issuer (iss) matches your tenant
‚úÖ The token is not expired
If any of these checks fail, it raises an exception.

üß† Summary
Action	Performed by decode_token?
Decode header	‚úÖ Yes
Verify signature	‚úÖ Yes
Check audience	‚úÖ Yes
Check issuer	‚úÖ Yes
Check expiry	‚úÖ Yes
So yes ‚Äî it does full verification, not just decoding.

Would you like to log or inspect specific claims from the token (like roles or scopes)?

=========================================
how can I log specific claims?
=========================================
To log specific claims from the decoded JWT token in your FastAPI app, you can simply extract and print them inside the decode_token function or in the endpoint itself.

‚úÖ Option 1: Log Claims Inside decode_token
Update your function like this:
def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            decoded = jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )
            # Log specific claims
            print("User ID (sub):", decoded.get("sub"))
            print("Client ID (azp):", decoded.get("azp"))
            print("Scopes (scp):", decoded.get("scp"))
            print("Roles:", decoded.get("roles"))
            return decoded


‚úÖ Option 2: Log Claims in the Endpoint
If you want to log or return claims in the endpoint:


@app.get("/secure-data")
async def secure_data(user=Depends(verify_token)):
    print("User claims:", user)
    return {
        "message": "Access granted",
        "client_id": user.get("azp"),
        "scopes": user.get("scp"),
        "roles": user.get("roles")
    }

üß† Common Claims You Might Use
Claim	Description
sub	Subject (user or app ID)
azp	Authorized party (client ID of the calling app)
scp	Scopes granted (e.g., user_impersonation)
roles	Roles assigned to the app/user
aud	Audience (should match your API's client ID)
exp	Expiration time (Unix timestamp)
Would you like me to regenerate the main.py file with these logging enhancements included?

=========================================
How to verify scope?
=========================================
To verify scopes in a JWT access token (like user_impersonation or custom scopes), you can check the scp claim in the decoded token.

‚úÖ Step-by-Step: Verify Scope in FastAPI

Update your verify_token function to include a scope check:
REQUIRED_SCOPE = "user_impersonation"

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        decoded = decode_token(credentials.credentials)
        scopes = decoded.get("scp", "").split()
        if REQUIRED_SCOPE not in scopes:
            raise HTTPException(
                status_code=403,
                detail=f"Missing required scope: {REQUIRED_SCOPE}"
            )
        return decoded
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

üîç Explanation
scp is a space-separated string of scopes (e.g., "user_impersonation read write").
You split it into a list and check if your required scope is present.
If not, return a 403 Forbidden.

üß† Optional: Support Multiple Required Scopes
If you want to allow any of several scopes:

REQUIRED_SCOPES = {"user_impersonation", "read"}

if not any(scope in scopes for scope in REQUIRED_SCOPES):
    raise HTTPException(status_code=403, detail="Insufficient scope")

---------------------------------
Updated main.py
---------------------------------
Make sure your .env file is correctly set:
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
API_SCOPE=api://your-api-client-id/.default


Test the /secure-data endpoint using a valid token with the user_impersonation scope.

MAIN.PY

from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
import os
import jwt
import requests

load_dotenv()

TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
JWKS_URL = f"{AUTHORITY}/discovery/v2.0/keys"

app = FastAPI()
security = HTTPBearer()

# Fetch JWKS keys once at startup
jwks = requests.get(JWKS_URL).json()

REQUIRED_SCOPE = "user_impersonation"

def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            decoded = jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )
            # Log specific claims
            print("User ID (sub):", decoded.get("sub"))
            print("Client ID (azp):", decoded.get("azp"))
            print("Scopes (scp):", decoded.get("scp"))
            print("Roles:", decoded.get("roles"))
            return decoded
    raise HTTPException(status_code=401, detail="Invalid token")

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        decoded = decode_token(credentials.credentials)
        scopes = decoded.get("scp", "").split()
        if REQUIRED_SCOPE not in scopes:
            raise HTTPException(
                status_code=403,
                detail=f"Missing required scope: {REQUIRED_SCOPE}"
            )
        return decoded
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.get("/secure-data")
async def secure_data(user=Depends(verify_token)):
    return {
        "message": "Access granted",
        "client_id": user.get("azp"),
        "scopes": user.get("scp"),
        "roles": user.get("roles")
    }






