If you're building a machine-to-machine or backend-only app (no user interaction), you should use the client credentials flow, not PKCE.

===========================================================================================================================
Can you give a fastapi code with client credentials flow to authenticate another application calling the fastapi api
===========================================================================================================================

Here‚Äôs a complete example of a FastAPI app that uses the OAuth2 Client Credentials Flow to authenticate requests from another application using Microsoft Entra ID (Azure AD).

‚úÖ Use Case
This is ideal for machine-to-machine (M2M) communication, where no user interaction is needed.

üìÅ Project Structure
.env ‚Äì stores Azure credentials
main.py ‚Äì FastAPI app with token validation
requirements.txt ‚Äì dependencies

üì¶ Step 1: Install Dependencies
pip install fastapi python-dotenv msal pyjwt uvicorn

.env File
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
API_SCOPE=api://your-api-client-id/.default

main.py
from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
import os
import jwt
import requests

load_dotenv()

TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
API_SCOPE = os.getenv("API_SCOPE")
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
JWKS_URL = f"{AUTHORITY}/discovery/v2.0/keys"

app = FastAPI()
security = HTTPBearer()

# Cache JWKS keys
jwks = requests.get(JWKS_URL).json()

def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            return jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )
    raise HTTPException(status_code=401, detail="Invalid token")

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        return decode_token(credentials.credentials)
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.get("/secure-data")
async def secure_data(user=Depends(verify_token)):
    return {"message": "Access granted", "client_id": user["azp"]}


===================================
How to Run
===================================
Install dependencies:
pip install -r requirements.txt

Set your Azure credentials in .env:
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
API_SCOPE=api://your-api-client-id/.default

Start the FastAPI app:
uvicorn main:app --reload

Call the /secure-data endpoint using a valid bearer token from another app (using MSAL).

===================================
How the Calling App Gets a Token
===================================
from msal import ConfidentialClientApplication

app = ConfidentialClientApplication(
    client_id="your-client-id",
    client_credential="your-client-secret",
    authority="https://login.microsoftonline.com/your-tenant-id"
)

token = app.acquire_token_for_client(scopes=["api://your-api-client-id/.default"])
print(token["access_token"])

================================================================
how do i call the secure endpoint using curl and using python
================================================================
1. Generate a Token Using MSAL (Python Script)
This script uses the Client Credentials Flow to get an access token from Microsoft Entra ID:

from msal import ConfidentialClientApplication

TENANT_ID = "your-tenant-id"
CLIENT_ID = "your-client-id"
CLIENT_SECRET = "your-client-secret"
SCOPE = ["api://your-api-client-id/.default"]

app = ConfidentialClientApplication(
    client_id=CLIENT_ID,
    client_credential=CLIENT_SECRET,
    authority=f"https://login.microsoftonline.com/{TENANT_ID}"
)

token_response = app.acquire_token_for_client(scopes=SCOPE)

if "access_token" in token_response:
    print("Access Token:")
    print(token_response["access_token"])
else:
    print("Error acquiring token:")
    print(token_response.get("error_description"))


2. Call the FastAPI Endpoint

‚úÖ Using curl
Replace <your-access-token> with the token from the MSAL script.

curl -X GET http://localhost:8000/secure-data \
  -H "Authorization: Bearer <your-access-token>"


‚úÖ Using Python (requests)
import requests

token = "your-access-token"
headers = {
    "Authorization": f"Bearer {token}"
}

response = requests.get("http://localhost:8000/secure-data", headers=headers)

print(response.status_code)
print(response.json())






