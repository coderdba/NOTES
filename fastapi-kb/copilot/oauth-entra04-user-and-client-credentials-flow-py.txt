================================================================================================================
What if I need to validate a machine to machine JWT as well as a human user's token in one call? 
================================================================================================================
See cases below

================================================================================================================
CASE 1
The situation is this:  Job A calls API B.  Job A is invoked by a person C.  
The api needs to validate whether the job A and person C both are authorized to run the job.
================================================================================================================

That's a great and nuanced use case ‚Äî validating both a machine identity (Job A) and a human identity (Person C) in a single API call. 
This is common in delegated authorization or chained identity scenarios.

‚úÖ Your Scenario
Job A: A backend service or scheduled job that authenticates using client credentials flow.
Person C: A human user who triggered Job A and whose identity needs to be propagated and validated by API B.

üîê Recommended Approach
1. Dual Token Strategy
Pass two tokens in the request to API B:

Authorization header: Bearer token for Job A
X-User-Token header (custom): Bearer token for Person C

GET /run-job
Authorization: Bearer <job-a-token>
X-User-Token: Bearer <person-c-token>


2. API B Validates Both Tokens
In FastAPI, you can:

Decode and verify both tokens
Check scopes/roles for both identities
Enforce policies like:
‚ÄúJob A must have run_jobs scope AND Person C must have trigger_jobs scope‚Äù

3. FastAPI Example Snippet

from fastapi import Request, Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

security = HTTPBearer()
REQUIRED_JOB_SCOPE = "run_jobs"
REQUIRED_USER_SCOPE = "trigger_jobs"

async def verify_tokens(
    request: Request,
    job_token: HTTPAuthorizationCredentials = Depends(security)
):
    # Extract user token from custom header
    user_token_raw = request.headers.get("X-User-Token")
    if not user_token_raw or not user_token_raw.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing or invalid user token")

    user_token = user_token_raw.split(" ")[1]

    # Decode both tokens
    job_claims = decode_token(job_token.credentials)
    user_claims = decode_token(user_token)

    # Validate scopes
    job_scopes = job_claims.get("scp", "").split()
    user_scopes = user_claims.get("scp", "").split()

    if REQUIRED_JOB_SCOPE not in job_scopes:
        raise HTTPException(status_code=403, detail="Job A lacks required scope")

    if REQUIRED_USER_SCOPE not in user_scopes:
        raise HTTPException(status_code=403, detail="User lacks required scope")

    return {"job": job_claims, "user": user_claims}

4. Endpoint Example
@app.post("/run-job")
async def run_job(identities=Depends(verify_tokens)):
    job = identities["job"]
    user = identities["user"]
    return {
        "message": "Job executed",
        "job_client_id": job.get("azp"),
        "triggered_by": user.get("preferred_username")
    }

================================================================================================================
CASE 2
You're saying that either:

A machine identity (Job A using a client credentials token), or
A human user (Person C using an interactive login token)
‚Ä¶can call the same API, and the API should validate whichever identity is present, and authorize based on their respective roles or scopes.
================================================================================================================

‚úÖ Solution: Dual-Mode Token Validation
You can design your FastAPI endpoint to:

Accept a single token in the Authorization header.
Detect whether it's a client credentials token (machine) or a user token (human).
Validate the token accordingly.
Apply authorization rules based on the identity type.

üß† How to Distinguish the Token Type
In Microsoft Entra ID:

Client credentials tokens have:
azp (authorized party) = client ID
No upn, preferred_username, or name

User tokens have:
name, preferred_username, oid, etc.

‚úÖ FastAPI Example

def is_machine_token(claims):
    return "azp" in claims and "preferred_username" not in claims

def is_user_token(claims):
    return "preferred_username" in claims

@app.get("/run-job")
async def run_job(identity=Depends(verify_token)):
    if is_machine_token(identity):
        print("Machine identity:", identity["azp"])
        # Check machine scopes or roles
        if "run_jobs" not in identity.get("scp", "").split():
            raise HTTPException(status_code=403, detail="Machine not authorized")
        return {"message": "Job run by machine", "client_id": identity["azp"]}

    elif is_user_token(identity):
        print("User identity:", identity["preferred_username"])
        # Check user scopes or roles
        if "trigger_jobs" not in identity.get("scp", "").split():
            raise HTTPException(status_code=403, detail="User not authorized")
        return {"message": "Job run by user", "user": identity["preferred_username"]}

    else:
        raise HTTPException(status_code=400, detail="Unknown token type")

üîê Summary
Token Type	Claim to Check	Example Use
Machine	azp only	Job A
User	preferred_username, name	Person C

---------------------------
Full main.py
---------------------------
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
import os
import jwt
import requests

load_dotenv()

TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
JWKS_URL = f"{AUTHORITY}/discovery/v2.0/keys"

app = FastAPI()
security = HTTPBearer()

# Fetch JWKS keys once at startup
jwks = requests.get(JWKS_URL).json()

REQUIRED_JOB_SCOPE = "run_jobs"
REQUIRED_USER_SCOPE = "trigger_jobs"

def decode_token(token: str):
    unverified_header = jwt.get_unverified_header(token)
    for key in jwks["keys"]:
        if key["kid"] == unverified_header["kid"]:
            public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
            decoded = jwt.decode(
                token,
                public_key,
                algorithms=["RS256"],
                audience=CLIENT_ID,
                issuer=f"{AUTHORITY}/v2.0"
            )
            # Log specific claims
            print("User ID (sub):", decoded.get("sub"))
            print("Client ID (azp):", decoded.get("azp"))
            print("Scopes (scp):", decoded.get("scp"))
            print("Roles:", decoded.get("roles"))
            return decoded
    raise HTTPException(status_code=401, detail="Invalid token")

def is_machine_token(claims):
    return "azp" in claims and "preferred_username" not in claims

def is_user_token(claims):
    return "preferred_username" in claims

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        decoded = decode_token(credentials.credentials)
        return decoded
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.get("/run-job")
async def run_job(identity=Depends(verify_token)):
    if is_machine_token(identity):
        print("Machine identity:", identity["azp"])
        if REQUIRED_JOB_SCOPE not in identity.get("scp", "").split():
            raise HTTPException(status_code=403, detail="Machine not authorized")
        return {"message": "Job run by machine", "client_id": identity["azp"]}

    elif is_user_token(identity):
        print("User identity:", identity["preferred_username"])
        if REQUIRED_USER_SCOPE not in identity.get("scp", "").split():
            raise HTTPException(status_code=403, detail="User not authorized")
        return {"message": "Job run by user", "user": identity["preferred_username"]}

    else:
        raise HTTPException(status_code=400, detail="Unknown token type")


----------
üìå Notes
Make sure your .env file includes:

TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id

This app will:

Accept a single token in the Authorization header.
Determine if it's from a machine or a user.
Validate the token and required scopes accordingly.
