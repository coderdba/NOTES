==========================
JSON WEB TOKEN
==========================

https://qvault.io/cryptography/jwts-in-golang/

For example, when a user logs in to a website secured via JWTs, the flow should look something like this:

The user sends a username and password to the server
The server verifies username and password are correct
The server creates a JSON object (also known as the “claims”) that looks something like this:
{"username":"wagslane"}
The server encodes and signs the JSON object, creating a JWT:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhZ3NsYW5lIn0.ov6d8XtwQoKUwsYahk9UwH333NICElFSs6ag6pINyPQ
The user’s web client saves the JWT for later use
When the user makes a request to a protected endpoint, it passes the JWT along in an HTTP header
The server checks the signature on the JWT to make sure the JWT was originally created by the same server
The server reads the claims and gives permission to the request to operate as “wagslane”
