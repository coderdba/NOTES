Install and small program test - https://golang.org/doc/install?download=go1.12.1.darwin-amd64.pkg

Official docs/sites:

  https://golang.org/doc
  https://tour.golang.org/flowcontrol/1
  
  How to write go code: https://golang.org/doc/code.html ---- READ THIS -----
  https://golang.org/cmd/go/
  https://golang.org/pkg/os/exec/ --> ssh command on a remote machine
   golang.org/x/crypto/ssh

BASICS
Start a project: https://www.wolfe.id.au/2020/03/10/starting-a-go-project/
Writing go code (with modules also): https://golang.org/doc/code
Importing locally: https://stackoverflow.com/questions/35480623/how-to-import-local-packages-in-go
Variables - scope, global variables etc: https://www.geeksforgeeks.org/scope-of-variables-in-go/
Global variables - https://stackoverflow.com/questions/38655730/how-to-have-a-global-variable-accessible-across-all-packages

WEB STUFF
Basic web with http and router  & JSON: https://thenewstack.io/make-a-restful-json-api-go/ (has serving a json)
https://medium.com/the-andela-way/build-a-restful-json-api-with-golang-85a83420c9da (json and also mux.vars)
Gorilla mux vs http for routes: https://levelup.gitconnected.com/experiment-golang-http-builtin-and-related-popular-packages-1d9a6dcb80d
Marshal, Render - json, xml etc: https://www.alexedwards.net/blog/golang-response-snippets#json
Unmarshall json to map (not to another json): https://medium.com/@irshadhasmat/golang-simple-json-parsing-using-empty-interface-and-without-struct-in-go-language-e56d0e69968
- (also empty struct)

For extended http code: http://networkbit.ch/golang-http-client/
Parse to byte-array/map and struct: https://www.sohamkamani.com/blog/2017/10/18/parsing-json-in-golang/
Printing requests to debug: https://medium.com/doing-things-right/pretty-printing-http-requests-in-golang-a918d5aaa000

- complex example:
https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get - COMPLEX EXAMPLE - decoder vs readall (but decoder method is not working)
(also Web, Json with Struct+slice https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get) 

IOUtil to get response body in json: https://stackoverflow.com/questions/41815909/is-there-a-way-to-extract-json-from-an-http-response-without-having-to-build-str
IOUtil to get response body in json: https://stackoverflow.com/questions/39945968/most-efficient-way-to-convert-io-readcloser-to-byte-array

To place token in header: https://developer.github.com/v3/
Response to byte-array: https://stackoverflow.com/questions/39945968/most-efficient-way-to-convert-io-readcloser-to-byte-array
Response to byte-array: https://stackoverflow.com/questions/41815909/is-there-a-way-to-extract-json-from-an-http-response-without-having-to-build-str

TUTORIALS
https://www.bogotobogo.com/GoLang/GoLang_HelloWorld.php --> very good series
-https://www.bogotobogo.com/GoLang/GoLang_AWS_SDK_for_Go.php --> with s3 aws sdk
-https://www.bogotobogo.com/GoLang/GoLang_Web_Building_Docker_Image_and_Deploy_to_Kubernetes.php
https://golangbot.com/learn-golang-series/ (comp)
https://www.tutorialspoint.com/go/go_arrays.htm
https://tutorialedge.net/golang/go-waitgroup-tutorial/ - all concepts, redis ...

https://notes.shichao.io/gopl/

PLAYGROUND 
- goplayground

Project/Folder Layout
- https://github.com/golang-standards/project-layout
  https://github.com/golang-standards/project-layout/cmd and so on
- good example
  https://eli.thegreenplace.net/2019/simple-go-project-layout-with-modules/

Functions - pointer functions (pointer receivers)
https://www.geeksforgeeks.org/pointers-to-a-function-in-go/
https://tour.golang.org/methods/4

Cobra & Viper
https://github.com/spf13/cobra - command generator
https://github.com/spf13/viper - config file reader, json/consul/yaml reader and such

Modules: go mod:
To import dependencies - "go modules" - https://github.com/golang/go/wiki/Modules#example
https://roberto.selbach.ca/intro-to-go-modules/ --> tutorial
https://github.com/go-modules-by-example
https://ukiahsmith.com/blog/a-gentle-introduction-to-golang-modules/
https://medium.com/@adiach3nko/package-management-with-go-modules-the-pragmatic-guide-c831b4eaaf31 --> vendor folder 
https://go.googlesource.com/proposal/+/master/design/25719-go15vendor.md --> vendor folder
https://www.reddit.com/r/golang/comments/9ai79z/correct_usage_of_go_modules_vendor_still_connects/ --> vendor folder

Directory structure:
https://stackoverflow.com/questions/46646559/golang-project-directory-structure
https://golang.org/doc/code.html
https://golangbot.com/hello-world/

Postgres:
https://golangdocs.com/golang-postgresql-example --> Very good CRUD example
https://www.opsdash.com/blog/postgres-arrays-golang.html
https://medium.com/@beld_pro/postgres-with-golang-3b788d86f2ef
https://levelup.gitconnected.com/building-a-todo-api-in-golang-with-kubernetes-1ec593f85029 --> API with postgres
https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/ --> with GORM
https://www.enterprisedb.com/postgres-tutorials/postgresql-and-golang-tutorial --> more complex postgres with GORM and cors
https://gorm.io/docs/index.html --> GORM documentation
https://stackoverflow.com/questions/43898259/scanning-large-rows-into-structs-in-go --> scanning rows into struct

GORM
https://gorm.io/docs/query.html
https://gorm.io/docs/advanced_query.html
https://gorm.io/docs/models.html
https://gorm.io/docs/update.html
https://gorm.io/docs/delete.html
https://gorm.io/docs/sql_builder.html --> very good

API:
https://www.codementor.io/codehakase/building-a-restful-api-with-golang-a6yivzqdo

GOPATH:
https://stackoverflow.com/questions/36017724/can-i-have-multiple-gopath-directories

Docker:
Build docker image with golang web server - https://levelup.gitconnected.com/complete-guide-to-create-docker-container-for-your-golang-application-80f3fb59a15e
https://medium.com/@petomalina/using-go-mod-download-to-speed-up-golang-docker-builds-707591336888

Cobra:
https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html - tutorial

Compiling to run on tother os/architecture
https://stackoverflow.com/questions/48270988/error-with-go-cross-compilation-unsupported-goos-goarch-pair-linux-amd64

Agent, microservice func (a1 *Agent) kind of thing
https://medium.com/codezillas/building-a-microservice-framework-in-golang-dd3c9530dff9

SSH Commands on remote machine

***https://stackoverflow.com/questions/26434759/golang-execute-shell-commands-on-remote-server
***--> using another community code  https://github.com/hypersleep/easyssh

https://github.com/golang/crypto/blob/master/ssh/agent/example_test.go --> example
https://kukuruku.co/post/ssh-commands-execution-on-hundreds-of-servers-via-go/
https://zaiste.net/executing_commands_via_ssh_using_go/
https://stackoverflow.com/questions/37679939/how-do-i-execute-a-command-on-a-remote-machine-in-a-golang-cli
https://stackoverflow.com/questions/24437809/connect-to-a-server-using-ssh-and-a-pem-key-with-golang

REST API using Go - 
https://www.codementor.io/codehakase/building-a-restful-api-with-golang-a6yivzqdo
https://thenewstack.io/make-a-restful-json-api-go/  (with gorilla mux)

Learn/docs:
https://tour.golang.org/methods/4
https://golangbot.com/learn-golang-series/
https://gobyexample.com/arrays
https://hackernoon.com/basics-of-golang-for-beginners-6bd9b40d79ae

Kubernetes engine using golang:
https://github.com/DITAS-Project/deployment-engine/blob/master/doc/development.md

Printing HTTP:
https://stackoverflow.com/questions/38110875/how-to-display-html-string-as-a-web-page-using-golang-http-responsewriter

Run OS Commands:
https://nathanleclaire.com/blog/2014/12/29/shelled-out-commands-in-golang/

BATCH PROCESSING, PARALLEL PROCESSING - GOROUTINES, CHANNELS
	Batch processing example:
	https://brunoscheufler.com/blog/2019-09-21-parallelized-batch-processing-in-go

	https://notes.shichao.io/gopl/ch8/
	Is go routine alive: https://stackoverflow.com/questions/55273965/how-to-know-if-goroutine-still-exist/55276876

	Goroutines and channels:
	https://www.golang-book.com/books/intro/10 --> has channels also
	https://www.geeksforgeeks.org/goroutines-concurrency-in-golang/
	https://gobyexample.com/goroutines
	https://tour.golang.org/concurrency/1

	http://codesolid.com/post/optimizing-aws-s3-uploads-with-golang-and-goroutines/ --> with AWS s3

INTERFACES:

Three main ones:
  https://www.tutorialspoint.com/go/go_interfaces.htm - same as above, with a twist
  https://www.callicoder.com/golang-interfaces/ - better example, and also interfaces as function arguments etc
  https://www.ardanlabs.com/blog/2015/09/composition-with-go.html --> good blog on embedding

https://golangbyexample.com/interface-in-golang/ --> Looks good

https://www.geeksforgeeks.org/interfaces-in-golang/
https://www.geeksforgeeks.org/embedding-interfaces-in-golang/

Interfaces: Empty interfaces, using in function as argument
https://flaviocopes.com/go-empty-interface/

Interfaces embedding in struct - "type embedding":
https://travix.io/type-embedding-in-go-ba40dd4264df

Receivers: like this --> func(i InputType) funcname()
- Pointer receivers - https://tour.golang.org/methods/4
- Receiver vs function argument - https://grisha.org/blog/2016/09/22/golang-receiver-vs-function/

Empty interface: https://flaviocopes.com/go-empty-interface/ ($$$)

String to Json:
https://stackoverflow.com/questions/56522608/how-to-convert-string-to-json-in-golang
- https://stackoverflow.com/questions/40429296/decode-json-with-unknown-structure/40429627#40429627
https://golangdocs.com/json-with-golang
https://iaziz786.com/blog/golang-arbitrary-json --> arbitrary json using interface
https://golangexample.com/arbitrary-transformations-of-json-in-golang/ --> arbitrary json 

TESTING:
https://ieftimov.com/post/testing-in-go-go-test/

RANDOM STRING GENERATOR:
https://www.calhoun.io/creating-random-strings-in-go/

HTTP RESPONSE WRITER:
- Includes JSON: https://medium.com/@vivek_syngh/http-response-in-golang-4ca1b3688d6

GOOD BLOGS - ARDANLABS
https://www.ardanlabs.com/blog/2020/02/modules-04-mirros-checksums-athens.html - modules
https://www.ardanlabs.com/blog/2015/09/composition-with-go.html - interfaces

FILE HANDLING
Read to string: https://stackoverflow.com/questions/13514184/how-can-i-read-a-whole-file-into-a-string-variable
Read file and print the file: https://stackoverflow.com/questions/36111777/how-to-read-a-text-file
https://golangbot.com/write-files/
https://yourbasic.org/golang/read-file-line-by-line/ - also stdin
https://stackoverflow.com/questions/20895552/how-to-read-from-standard-input-in-the-console - stdin

ARRAYS AND SLICES
Multidimenstional slices
- https://forum.golangbridge.org/t/multidimensional-slice/4863
- https://www.dotnetperls.com/2d-go

Slice with make() function
- https://www.tutorialspoint.com/go/go_slice.htm

Multidimensional Arrays
- https://www.tutorialspoint.com/go/go_multi_dimensional_arrays.htm
- https://www.dotnetperls.com/2d-go

Arrays
- https://www.tutorialspoint.com/go/go_arrays.htm

Slice - size, increase size, PrintSlice function
- https://tour.golang.org/moretypes/11

HTTP AUTHENTICATION/AUTHORIZATION
- Oauth
https://www.sohamkamani.com/golang/2018-06-24-oauth-with-golang/ -- with github api
https://developer.github.com/v3/ --> to send token in header
https://blog.kowalczyk.info/article/f/accessing-github-api-from-go.html -- with github api

- Bearer token, JWT
https://golangcode.com/api-auth-with-jwt/
 - https://github.com/dgrijalva/jwt-go
 - https://jwt.io/introduction/
https://auth0.com/blog/authentication-in-golang/
https://stackoverflow.com/questions/51452148/how-can-i-make-a-request-with-a-bearer-token-in-go

- TLS
https://gist.github.com/denji/12b3a568f092ab951456

HTTP SERVER
With timeout etc: https://golang.org/pkg/net/http/

HTTP REQUEST/RESPONSE HANDLING
For extended http code: http://networkbit.ch/golang-http-client/
For printing http requests to debug: https://medium.com/doing-things-right/pretty-printing-http-requests-in-golang-a918d5aaa000


SLICES
https://stackoverflow.com/questions/18042439/go-append-to-slice-in-struct - append a slice of structs

ERRORS
Create error - 3 ways: https://yourbasic.org/golang/create-error/

PARSING JSON, XML etc
Theory - https://blog.golang.org/json
https://www.sohamkamani.com/blog/2017/10/18/parsing-json-in-golang/
https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get
https://blog.josephmisiti.com/parsing-json-responses-in-golang

Marshal - json, xml etc: https://www.alexedwards.net/blog/golang-response-snippets#json
Unmarshal - https://www.alexedwards.net/blog/how-to-properly-parse-a-json-request-body
Unmarshall json to map (not to another json): https://medium.com/@irshadhasmat/golang-simple-json-parsing-using-empty-interface-and-without-struct-in-go-language-e56d0e69968 
  - without struct, with map and interface like: var results []map[string]interface{}
  - (also empty struct)

https://golang.org/src/encoding/json/example_test.go - decoder

- complex example:
https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get - COMPLEX EXAMPLE - decoder vs readall (but decoder method is not working)
(also Web, Json with Struct+slice https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get) 

https://stackoverflow.com/questions/21197239/decoding-json-using-json-unmarshal-vs-json-newdecoder-decode - unmarshall vs decoder

DATE-TIME IN JSON:
https://hackernoon.com/today-i-learned-dealing-with-json-datetime-when-unmarshal-in-golang-4b281444fb67 --> in postman
https://www.ardanlabs.com/blog/2013/08/using-time-timezones-and-location-in-go.html --> central time etc

PROJETS TO WORK ON
https://www.opsdash.com/blog/fun-weekend-projects-golang.html
- Slack bot - https://www.opsdash.com/blog/slack-bot-in-golang.html

ENDPOINT PARAMETERS, ARGUMENTS, DATA, FORMDATA ETC
Form: Postman Body: x-www-form-urlencoded - https://medium.com/@edwardpie/processing-form-request-data-in-golang-2dff4c2441be
Multipart Form to upload a file: for image upload: https://stackoverflow.com/questions/20205796/post-data-using-the-content-type-multipart-form-data 
Multipart form to upload a file: https://gist.github.com/mattetti/5914158/f4d1393d83ebedc682a3c8e7bdc6b49670083b84

WEB FILE UPLOAD/DOWNLOAD RELATED

Download a file:
https://golangcode.com/download-a-file-from-a-url/

Multipart Form:
Upload a file to a remote location: https://gist.github.com/mattetti/5914158
Upload a file to a remote location: https://stackoverflow.com/questions/20205796/post-data-using-the-content-type-multipart-form-data

FileServer: 
To serve a file: https://medium.com/rungo/beginners-guide-to-serving-files-using-http-servers-in-go-4e542e628eac
To serve a file: https://golang.org/pkg/net/http/#example_FileServer
To receive a file: https://stackoverflow.com/questions/40684307/how-can-i-receive-an-uploaded-file-using-a-golang-net-http-server
                      - https://kenyaappexperts.com/blog/how-to-upload-files-in-go-step-by-step/

=============================
DATABASE/SQL-PACKAGE/ORACLE
=============================
Examples: http://go-database-sql.org/

Package SQL: https://golang.org/pkg/database/sql/
	- Drivers: https://github.com/golang/go/wiki/SQLDrivers
	- https://github.com/golang/go/wiki/SQLInterface
Drivers:
	- From https://github.com/golang/go/wiki/SQLDrivers
	- Oracle (uses cgo): https://github.com/mattn/go-oci8
	- Oracle (uses cgo): https://gopkg.in/rana/ora.v4
	- Oracle (uses cgo): https://github.com/godror/godror
          - https://github.com/godror/godror/blob/master/conn.go	  
Examples:
http://go-database-sql.org/retrieving.html
https://blogs.oracle.com/developers/how-to-connect-a-go-program-to-oracle-database-using-goracle

Issues/Setup:
https://medium.com/@felipedutratine/manage-config-in-golang-to-get-variables-from-file-and-env-variables-33d876887152 (config, environment variables)
https://dba.stackexchange.com/questions/167477/ora-24454-client-host-name-is-not-set-when-connecting-from-ubuntu-instance-on (oracle - need to set hostname in /etc/hosts)
https://stackoverflow.com/questions/52195918/json-object-in-oracle-returns-ora-00907-missing-right-parenthesis (oracle - version for json sql)

Rows scanning:
Scan into struct:  https://stackoverflow.com/questions/43898259/scanning-large-rows-into-structs-in-go
'sql' package: https://pkg.go.dev/database/sql#DB.Query

Scan into map: https://stackoverflow.com/questions/17840963/create-a-map-in-golang-from-database-rows
Scan into map: https://golang.hotexamples.com/examples/database.sql/Rows/Columns/golang-rows-columns-method-examples.html
--> https://github.com/JingxuanWang/Playground/blob/master/go/wjxUtil/DA/DA.go
Scan and construct JSON: https://newbedev.com/how-to-convert-sql-rows-to-typed-json-in-golang

===================
INFLUX 
===================
Resultset:
-- Influx 'Result' documentation: https://pkg.go.dev/github.com/influxdata/influxdb/client/v2#Result
---- https://pkg.go.dev/github.com/influxdata/influxdb@v1.8.4/models#Row
---- https://pkg.go.dev/github.com/influxdata/influxdb@v1.8.4/models
---- Example record (without Tags, only Values): [{"statement_id":0,"Series":[{"name":"oracle_dbstatus","columns":["time","value"],"values":[["2021-04-08T07:19:45.614748604Z",2]]}],"Messages":null}]

Client to 'import' one of the following:
-- client "github.com/influxdata/influxdb/client/v2"
-- client "github.com/influxdata/influxdb1-client/v2"
