=========================================
K6 LOAD TESTING - ADOPTION ARCHITECTURE
=========================================

WORKFLOW AND TOOLING

User creates a git repo and a test.js file
User inputs test.js git path in the loadtester UI
Loadtester API reads the git file and shows parameters from it in the UI
UI allows user to modify it and save locally in the loadtester context or another location
User invokes load test based on the modified test case, geographical location to run the test from
Loadtester API creates a Kubernetes manifest in FluxCD orchestrator git repo to create K6 pods to run this specific test

Invoked test is orchestrated by Temporal

Azure Automation 'watcher' watches for messages/errors from K6 pods and sends messages to Kafka
UI keeps calling another API picks up messages from Kafka to show status

