==============================
ENABLE DATA PUSH TO PROMETHEUS
==============================
https://k6.io/docs/results-visualization/prometheus
https://github.com/grafana/xk6-output-prometheus-remote

https://www.itix.fr/blog/how-to-run-performance-tests-with-k6-prometheus-grafana/ --> tutorial with statsd, prometheus, grafana
https://k6.io/blog/k6-loves-prometheus/#the-mechanics-behind-metrics-crunching


================================================
CAUTIONS, PECULIAR STUFF
================================================
-------------------------------
LOCALHOST IN DOCKER CONTAINERS
-------------------------------
https://www.cloudsavvyit.com/14114/how-to-connect-to-localhost-within-a-docker-container/

- HOST NETWORK
Use "--network=host" when running docker if all containers should be able to map to the host/laptop port of the container.
docker run -d --network=host my-container:latest 
--> However, you cannot use port-mapping when using network=host (cannot use -p hostport:containerport)

- IF NOT USING HOST-NETWORK
K6 docker container cannot access Prometheus as localhost:9090 as the container localhost is not the same as the laptop.
Therefore, use host.docker.internal in the place of localhost

Similarly, Grafana docker container also cannot access prometheus with localhost. Use host.docker.internal instead.

================================================
CREATE A NEW K6 IMAGE WITH PROMETHEUS EXTENSION
================================================
--------------
DOCKERFILE
--------------
Dockerfile - https://github.com/grafana/xk6-output-prometheus-remote/blob/main/Dockerfile
==> This dockerfile has a typo error. Correct it as follows:

# Multi-stage build to generate custom k6 with extension
FROM golang:1.17-alpine as builder
WORKDIR $GOPATH/src/go.k6.io/k6
ADD . .
RUN apk --no-cache add git
RUN CGO_ENABLED=0 go install go.k6.io/xk6/cmd/xk6@latest

# the "with" line below has a typo
#RUN CGO_ENABLED=0 xk6 build \
#    --with github.com/grafana/xk6-output-prometheus-remote=. \
#    --output /tmp/k6

RUN CGO_ENABLED=0 xk6 build \
    --with github.com/grafana/xk6-output-prometheus-remote \
    --output /tmp/k6

# Create image for running k6 with output for Prometheus Remote Write
FROM alpine:3.15
RUN apk add --no-cache ca-certificates \
    && adduser -D -u 12345 -g 12345 k6
COPY --from=builder /tmp/k6 /usr/bin/k6

USER 12345
WORKDIR /home/k6

ENTRYPOINT ["k6"]

------------------------
BUILD IMAGE
------------------------
docker build -t xk6 .

--------------------------------
RUN A TEST - WITH SCREEN OUTPUT
--------------------------------
Running a test with screen output only is same as how we run K6

docker run --rm -i xk6 run - <script1.js

And, it gives the same screen-output as plain k6 - nothing special for Prometheus "on-screen"

==========================
INSTALL PROMETHEUS DOCKER
==========================
-------------------
PULL AND RUN BASIC
-------------------
docker pull prom/prometheus:v2.34.0
docker run -d -p 9090:9090 --name prometheus prom/prometheus:v2.34.0 --enable-feature=remote-write-receiver

Access it in http://localhost:9090
Try a PUT to write endpoint: http://localhost:9090/api/v1/write --> will error if --enable-feature=remote-write-receiver is not applied

----------------
FROM SGR
----------------
docker run -p 9090:9090 --name prometheus \
  -v "/tmp/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml" prom/prometheus:v2.34.0 \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/prometheus \
  --web.console.libraries=/usr/share/prometheus/console_libraries \
  --web.console.templates=/usr/share/prometheus/consoles \
  --enable-feature=remote-write-receiver
  
------------------------------
/tmp/prometheus.yml (from sgr)
------------------------------
global:
scrape_interval: 1s

rule_files:
scrape_configs:
- job_name: "k6"

metrics_path: /v1/metrics
static_configs:
- targets: ["localhost:6565"]

remote_write:
- url: http://localhost:9009/api/v1/push

=======================================
RUN XK6 TO SEND RESULTS TO PROMETHEUS
=======================================
K6_PROMETHEUS_REMOTE_URL=http://host.docker.internal:9090/api/v1/write 
./k6 run script.js -o output-prometheus-remote

K6_PROMETHEUS_REMOTE_URL=https://localhost:9090/api/v1/write \
    K6_PROMETHEUS_INSECURE_SKIP_TLS_VERIFY=false K6_CA_CERT_FILE=tls.crt \
    K6_PROMETHEUS_USER=foo K6_PROMETHEUS_PASSWORD=bar \
    ./k6 run script.js -o output-prometheus-remote
    
===============================================
REFERENCE - DOCKER-COMPOSE.YAML
===============================================
https://github.com/grafana/xk6-output-prometheus-remote/blob/main/docker-compose.yml

version: '3.8'

networks:
  k6:
  grafana:
  prometheus:

services:
  prometheus:
    image: prom/prometheus:v2.33.5
    command: --web.enable-remote-write-receiver --config.file=/etc/prometheus/prometheus.yml
    networks:
      - k6
      - grafana
      - prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.2.6
    networks:
      - grafana
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./example/config-datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./example/config-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./example/dashboards:/var/lib/grafana/dashboards

  k6:
    build: .
    networks:
      - k6
    ports:
      - "6565:6565"
    environment:
      - K6_PROMETHEUS_REMOTE_URL=http://prometheus:9090/api/v1/write
      - K6_OUT=output-prometheus-remote

=============================================
REFERENCE - DEFAULT PROMETHEUS.YML
=============================================

>docker exec -ti prometheus /bin/sh

/prometheus $ cd /etc

/etc $ ls -l
total 64
-rw-rw-r--    1 root     root           306 Mar  8 22:08 group
-rw-r--r--    1 root     root            13 Mar 17 05:32 hostname
-rw-r--r--    1 root     root           174 Mar 17 05:32 hosts
-rw-r--r--    1 root     root           118 Oct 25 17:14 localtime
lrwxrwxrwx    1 root     root            12 Mar 17 05:32 mtab -> /proc/mounts
drwxr-xr-x    6 root     root          4096 Mar 10 23:59 network
-rw-r--r--    1 root     root           494 Feb 10  2019 nsswitch.conf
-rw-r--r--    1 root     root           340 Mar  8 22:08 passwd
drwxr-xr-x    1 nobody   nobody        4096 Mar 15 15:40 prometheus
-rw-r--r--    1 root     root            97 Mar 17 05:32 resolv.conf
-rw-r--r--    1 root     root         18774 Feb 10  2019 services
-rw-------    1 root     root           136 Mar 10 23:59 shadow
drwxr-xr-x    3 root     root          4096 Mar 15 10:54 ssl

/etc $ cd prometheus

/etc/prometheus $ ls -l
total 4
lrwxrwxrwx    1 nobody   nobody          39 Mar 15 15:40 console_libraries -> /usr/share/prometheus/console_libraries
lrwxrwxrwx    1 nobody   nobody          31 Mar 15 15:40 consoles -> /usr/share/prometheus/consoles/
-rw-r--r--    1 nobody   nobody         934 Mar 15 15:30 prometheus.yml

/etc/prometheus $ cat prometheus.yml

# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]
