=================
KUBERNETES NOTES
=================

https://kops.sigs.k8s.io/boot-sequence/

==============
BOOT SEQUENCE
==============
ETCD - from /etc/systemd/system/etcd.service
API Server, Controller Manager, Scheduler - by kubelet service in /usr/lib/systemd/system/kubelet.service and kubelet.service.d

https://kops.sigs.k8s.io/boot-sequence/
On masters:
kube-apiserver
kube-controller-manager (which runs miscellaneous controllers)
kube-scheduler (which assigns pods to nodes)

Also:
etcd --> If it is created as a pod (not in my case where I start etcd by its service)
dns-controller (like coredns) --> this was created afterwards as a pod - so apiserver/etcd know about it already

On nodes:
kube-proxy (which configures iptables so that the k8s-network will work)

==============
ARCHITECTURE
==============
Master Nodes - 'control plane'
- API Server
- Controller Manager
- Scheduler
- ETCD
- Optional - cloud controller manager
- Kubelet (optional) - to start the api server, controller manager and scheduler as pods (if configured so - otherwise, configure those to start as services)

Worker/Node
- Kubelet
- Kube-Proxy

Api-Server
- Kubernetes API
- Can have many instances for HA and load-balancing

ETCD
- KV Pair to keep cluster data

Scheduler
- Assigns nodes to pods based on affinity, resource availability and policies

Controller Manager
- Made of several controllers under the main process
- Node controller: Responsible for noticing and responding when nodes go down.
- Job controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
- Endpoints controller: Populates the Endpoints object (that is, joins Services & Pods).
- Service Account & Token controllers: Create default accounts and API access tokens for new namespaces
