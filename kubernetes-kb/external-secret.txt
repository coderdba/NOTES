====================================
EXTERNAL SECRETS
====================================

Reference (main, brief): https://blog.container-solutions.com/tutorialexternal-secrets-with-hashicorp-vault
Reference (very detailed): https://devopscube.com/vault-in-kubernetes/
Reference (Redhat): https://cloud.redhat.com/blog/external-secrets-with-hashicorp-vault

Vault alone: https://developer.hashicorp.com/vault/tutorials/kubernetes/agent-kubernetes

Vault CLI: https://developer.hashicorp.com/vault/docs/commands


1. Set up Hashicorp Vault

2. Configure Hashicorp Vault Authentication:

a. Create a policy;
b. Configure Kubernetes authentication endpoint;
c. Create a role;
d. Bind the role to kubernetes authentication endpoint;

3. Configure External-Secrets

=====================================
INSTALL HELM
=====================================
https://phoenixnap.com/kb/install-helm
Download from: https://github.com/helm/helm/releases
Unzip to a folder
Add the folder to PATH

=====================================
Set up Hashicorp Vault
=====================================
This is to setup a hashicorp vault locally on the laptop.


- ADD REPO
helm repo add hashicorp https://helm.releases.hashicorp.com

- INSTALL
helm install vault hashicorp/vault -n vault --create-namespace
  NAME: vault
  LAST DEPLOYED: Tue Nov  8 12:52:33 2022
  NAMESPACE: vault
  STATUS: deployed
  REVISION: 1
  NOTES:
  Thank you for installing HashiCorp Vault!

  Now that you have deployed Vault, you should look over the docs on using
  Vault with Kubernetes available here:

  https://www.vaultproject.io/docs/

  Your release is named vault. To learn more about the release, try:

    $ helm status vault
    $ helm get manifest vault

  C:\Users\GSM078>helm status vault
  Error: release: not found

  C:\Users\GSM078>helm get manifest vault
  Error: release: not found

- VERIFY
kubectl get pods --all-namespaces
NAMESPACE     NAME                                     READY   STATUS    RESTARTS       AGE
kube-system   coredns-78fcd69978-w7fkj                 1/1     Running   0              171m
kube-system   coredns-78fcd69978-xsfk4                 1/1     Running   0              171m
kube-system   etcd-docker-desktop                      1/1     Running   0              171m
kube-system   kube-apiserver-docker-desktop            1/1     Running   0              171m
kube-system   kube-controller-manager-docker-desktop   1/1     Running   0              171m
kube-system   kube-proxy-ctttm                         1/1     Running   0              171m
kube-system   kube-scheduler-docker-desktop            1/1     Running   0              171m
kube-system   storage-provisioner                      1/1     Running   0              170m
kube-system   vpnkit-controller                        1/1     Running   13 (15m ago)   170m
vault         vault-0                                  0/1     Running   0              58s
vault         vault-agent-injector-8fdbb58b6-4l54t     1/1     Running   0              59s

- VERIFY
kubectl get services --all-namespaces
NAMESPACE     NAME                       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
default       kubernetes                 ClusterIP   10.96.0.1       <none>        443/TCP                  3h3m
kube-system   kube-dns                   ClusterIP   10.96.0.10      <none>        53/UDP,53/TCP,9153/TCP   3h3m
vault         vault                      ClusterIP   10.101.9.95     <none>        8200/TCP,8201/TCP        12m
vault         vault-agent-injector-svc   ClusterIP   10.105.167.40   <none>        443/TCP                  12m
vault         vault-internal             ClusterIP   None            <none>        8200/TCP,8201/TCP        12m

======================================
EXPOSE VAULT SERVICE
======================================
After vault is deployed, the next step is to expose its service so we can configure it using vault cli. 
Then, we are going to use vault cli to initialize vault and unseal it

- IN LINUX
export VAULT_ADDR=http://127.0.0.1:8200
kubectl port-forward svc/vault -n vault 8200:8200 &
vault operator init

- IN WINDOWS
set VAULT_ADDR=http://127.0.0.1:8200

-- run in background
start /b kubectl port-forward svc/vault -n vault 8200:8200

C:\Users\GSM078\CODE-MAERSK\git-maersk\gowrish\k8s-certs>Forwarding from 127.0.0.1:8200 -> 8200
Forwarding from [::1]:8200 -> 8200

- INITIALIZE THE VAULT
kubectl exec -n vault vault-0 -- vault operator init
(the reference website says just "vault operator init" - but it should be executed within the vault-0 pod)

  Unseal Key 1: cr/cGy9XZJS7Mhre97+sXJdMDWURJ7f4NrjnMaHmPd5q
  Unseal Key 2: AUJgAEJZU9UN7ajAqB8cUsM1Fm15mzC3CrUQxKGRDQJt
  Unseal Key 3: yZTsU9mLSGJMXUjRCXq3RV4Gf33j/BlZ8A7iZcSs3sPQ
  Unseal Key 4: 8TUKW2PEoctCxJy4KImzJFxGx/gi5GFaVO2su8c8QbYs
  Unseal Key 5: qCg1OGJitNBL/v7sAbs+F1D4R3Zn+x1MlYpZxdSq/ikk

  Initial Root Token: hvs.vCiWcDmKMb2z5C7JR2LCruC2

  Vault initialized with 5 key shares and a key threshold of 3. Please securely
  distribute the key shares printed above. When the Vault is re-sealed,
  restarted, or stopped, you must supply at least 3 of these keys to unseal it
  before it can start servicing requests.

  Vault does not store the generated root key. Without at least 3 keys to
  reconstruct the root key, Vault will remain permanently sealed!

  It is possible to generate new unseal keys, provided you have a quorum of
  existing unseal keys shares. See "vault operator rekey" for more information.

- UNSEAL THE VAULT
vault operator unseal <key 1>
vault operator unseal <key 2>
vault operator unseal <key 3>

kubectl exec -n vault vault-0 -- vault operator unseal cr/cGy9XZJS7Mhre97+sXJdMDWURJ7f4NrjnMaHmPd5q
  Key                Value
  ---                -----
  Seal Type          shamir
  Initialized        true
  Sealed             true
  Total Shares       5
  Threshold          3
  Unseal Progress    1/3
  Unseal Nonce       40413a31-59e7-ca4f-a672-0b2a0181d716
  Version            1.12.0
  Build Date         2022-10-10T18:14:33Z
  Storage Type       file
  HA Enabled         false

kubectl exec -n vault vault-0 -- vault operator unseal AUJgAEJZU9UN7ajAqB8cUsM1Fm15mzC3CrUQxKGRDQJt
  Key                Value
  ---                -----
  Seal Type          shamir
  Initialized        true
  Sealed             true
  Total Shares       5
  Threshold          3
  Unseal Progress    2/3
  Unseal Nonce       40413a31-59e7-ca4f-a672-0b2a0181d716
  Version            1.12.0
  Build Date         2022-10-10T18:14:33Z
  Storage Type       file
  HA Enabled         false

kubectl exec -n vault vault-0 -- vault operator unseal yZTsU9mLSGJMXUjRCXq3RV4Gf33j/BlZ8A7iZcSs3sPQ
  Key             Value
  ---             -----
  Seal Type       shamir
  Initialized     true
  Sealed          false
  Total Shares    5
  Threshold       3
  Version         1.12.0
  Build Date      2022-10-10T18:14:33Z
  Storage Type    file
  Cluster Name    vault-cluster-3971059c
  Cluster ID      4fcccdce-d871-ed89-fbc7-49bdcaa92c36
  HA Enabled      false

- LOGIN TO VAULT
kubectl exec -n vault vault-0 -- vault login hvs.vCiWcDmKMb2z5C7JR2LCruC2

  Success! You are now authenticated. The token information displayed below
  is already stored in the token helper. You do NOT need to run "vault login"
  again. Future Vault requests will automatically use this token.

  Key                  Value
  ---                  -----
  token                hvs.vCiWcDmKMb2z5C7JR2LCruC2
  token_accessor       AVZtQJVJXSnxOpRORonV9oH6
  token_duration       âˆž
  token_renewable      false
  token_policies       ["root"]
  identity_policies    []
  policies             ["root"]

==========================================
Configure Hashicorp Vault Authentication
==========================================
Configure secure ways to allow External Secrets to fetch the vault and its contents.

- Create a policy that only allows GET secrets from kv/path/to/my/secret and such.

kubectl exec -n vault vault-0 -- vault policy write demo-policy - <<EOF     
path "*"                                                  
{  capabilities = ["read"]                
}                         
EOF
--> This gave error
So, logon to vault pod into shell prompt:
kubectl exec --stdin=true --tty=true -n vault vault-0 -- /bin/sh
/ $ 
/ $ id
uid=100(vault) gid=1000(vault) groups=1000(vault)
/ $ pwd
/
/ $ vault policy write demo-policy - <<EOF
> path "*"
> {  capabilities = ["read"]
> }
> EOF
Success! Uploaded policy: demo-policy
/ $

=======================================================
ENABLE KUBERNETES AUTHENTICATION
=======================================================
After our policy is created, we then enable Kubernetes authentication and add our Kubernetes cluster information as a source of it.

- ENABLE KUBERNETES
vault auth enable kubernetes

/ $ vault auth enable kubernetes
Success! Enabled kubernetes auth method at: kubernetes/

- GET KUBERNETES CLUSTER DETAILS
k8s_host="$(kubectl exec vault-0 -n vault -- printenv | grep KUBERNETES_PORT_443_TCP_ADDR | cut -f 2- -d "=" | tr -d " ")"
--> KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
--> 10.96.0.1

k8s_port="443" 
--> 443

k8s_cacert="$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 --decode)"
-->
-----BEGIN CERTIFICATE-----
MIIC/jCCAeagAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl
cm5ldGVzMB4XDTIyMTEwODA0MzExNVoXDTMyMTEwNTA0MzExNVowFTETMBEGA1UE
AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJvN
0rM7t8XZxcRc8h4Z2Nni2wprUHOHxuL0AJjcIQnIu/fKFZnOFyM7kVS4AL5NFR65
GdCfq04yBKuByAI8PtcGi1hpX0o2snqc/NbJzseJcpNvqSNH1rliWJvA2U02T8YE
kWi82BFEJk/LI9eFkqaNH9mQZ0XyBKOOrq2+L5v8zDWmDtEU0eg0VUDhraOGng7d
IBBs0M7GBNtmxnog6+mSi1XUiKMOfzl3RshwD4kzQAlrRuA9QOP9vw+9X0fuLhCX
dkL9IbtiEsbFNdzVmyt+xMgFKkS3ivDttGCBcX4wMka3YOR+TKLJMhahb30qNS3W
HLflt5DPbae7GqJGlWUCAwEAAaNZMFcwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB
/wQFMAMBAf8wHQYDVR0OBBYEFJzkOUpPr+uB+jw7gIlYKRWKYcauMBUGA1UdEQQO
MAyCCmt1YmVybmV0ZXMwDQYJKoZIhvcNAQELBQADggEBADvvEnqhp9zHNCHOyIDt
7sSdvpKU7QoExEtKweBqagUrypc3St+FBrTAhueK/I6lMx8T3SzcgkB/Rdqzqheh
+uB+CXj/nPPaFmS9921PEt9NVbpjL2rvkOKXn5g9bOwF5J4MH/eUei+pr0iF8ZJC
DPbMJnSehpNG0rv4KduFULI0vQTvQQ2qHP9yZRBRq+dXr2d3Lh9b8ft8N4VEWT0H
9Jzv/P29xV1DrlekKeV2wohrpM73gqIo/mTB5JbqrGndRwwSNmoz33jKJccvaSVz
lIk2d39DGwtZyuqm3rt/FYhjCgKwTfA2owp3eOq0EPm3VBGRujMdSxNqcpNcdf34
sgI=
-----END CERTIFICATE-----

secret_name="$(kubectl get serviceaccount vault -o go-template='')"
-or-
secret_name="$(kubectl -n vault get serviceaccount vault -o go-template='')"
--> ???
--> That does not work
--> USE -o yaml as below:

kubectl -n vault get serviceaccount vault -o yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: vault
    meta.helm.sh/release-namespace: vault
  creationTimestamp: "2022-11-08T07:22:33Z"
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.22.1
  name: vault
  namespace: vault
  resourceVersion: "13125"
  uid: 9e547332-d1ff-4486-a0bd-a9bc8c91e1e5
secrets:
- name: vault-token-kbbpz


tr_account_token="$(kubectl get secret ${secret_name} -o go-template='' | base64 --decode)"
-or-
tr_account_token="$(kubectl -n vault get secret ${secret_name} -o go-template='' | base64 --decode)"
--> That does not work
--> USE -o yaml as below:

kubectl -n vault get secret vault-token-kbbpz -o yaml
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1URXdPREEwTXpFeE5Wb1hEVE15TVRFd05UQTBNekV4TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSnZOCjByTTd0OFhaeGNSYzhoNFoyTm5pMndwclVIT0h4dUwwQUpqY0lRbkl1L2ZLRlpuT0Z5TTdrVlM0QUw1TkZSNjUKR2RDZnEwNHlCS3VCeUFJOFB0Y0dpMWhwWDBvMnNucWMvTmJKenNlSmNwTnZxU05IMXJsaVdKdkEyVTAyVDhZRQprV2k4MkJGRUprL0xJOWVGa3FhTkg5bVFaMFh5QktPT3JxMitMNXY4ekRXbUR0RVUwZWcwVlVEaHJhT0duZzdkCklCQnMwTTdHQk50bXhub2c2K21TaTFYVWlLTU9memwzUnNod0Q0a3pRQWxyUnVBOVFPUDl2dys5WDBmdUxoQ1gKZGtMOUlidGlFc2JGTmR6Vm15dCt4TWdGS2tTM2l2RHR0R0NCY1g0d01rYTNZT1IrVEtMSk1oYWhiMzBxTlMzVwpITGZsdDVEUGJhZTdHcUpHbFdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKemtPVXBQcit1QitqdzdnSWxZS1JXS1ljYXVNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRHZ2RW5xaHA5ekhOQ0hPeUlEdAo3c1NkdnBLVTdRb0V4RXRLd2VCcWFnVXJ5cGMzU3QrRkJyVEFodWVLL0k2bE14OFQzU3pjZ2tCL1JkcXpxaGVoCit1QitDWGovblBQYUZtUzk5MjFQRXQ5TlZicGpMMnJ2a09LWG41ZzliT3dGNUo0TUgvZVVlaStwcjBpRjhaSkMKRFBiTUpuU2VocE5HMHJ2NEtkdUZVTEkwdlFUdlFRMnFIUDl5WlJCUnErZFhyMmQzTGg5YjhmdDhONFZFV1QwSAo5Snp2L1AyOXhWMURybGVrS2VWMndvaHJwTTczZ3FJby9tVEI1SmJxckduZFJ3d1NObW96MzNqS0pjY3ZhU1Z6CmxJazJkMzlER3d0Wnl1cW0zcnQvRlloakNnS3dUZkEyb3dwM2VPcTBFUG0zVkJHUnVqTWRTeE5xY3BOY2RmMzQKc2dJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  namespace: dmF1bHQ=
  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklsVlFPR1oxTkVGRVpHVlhhVVIyZDFsWVVFcDFZVkZ2UW5OeVUwSmFlak16T1U5eVRuVlVWMlV5Y1ZVaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUoyWVhWc2RDSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWamNtVjBMbTVoYldVaU9pSjJZWFZzZEMxMGIydGxiaTFyWW1Kd2VpSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSjJZWFZzZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExuVnBaQ0k2SWpsbE5UUTNNek15TFdReFptWXRORFE0TmkxaE1HSmtMV0U1WW1NNFl6a3haVEZsTlNJc0luTjFZaUk2SW5ONWMzUmxiVHB6WlhKMmFXTmxZV05qYjNWdWREcDJZWFZzZERwMllYVnNkQ0o5LnRZaldPVlhXWXhvX3VEbkw5WGxWWmJVd1hhYXVIdy13S2NzMFBhY2Z0bl9zZDhKTlZnZWo0Um5LZjVzSXZsdXlZMnVTbVNvYThwSHo0aGg5MnNUMzZxSXE2SGxEcVl5Tk05ajZfMll1WkJpekljeUdaaS1SZ2l1VS05RzkwdEFHc0ZRRDliWTVjTWNCdGdvc2RKOWV5T3laX2hUOW52ZlhRY256RjdjRGdyNlpvM0ZPTk0tUWtuLWVEa2lQMHJkTE5oc2xMNC1tbGJmQkRHNVI3R0xvak1JVmplN0dEQzFfdG9yTm15QVpzMVV6WDllZ2pSSWFJTnVjUkdzRGRlczF5ZDJvQUI4cXdqemVuX1pFNWFQdFp1MFlOZVZpaWo1N1dybXl3UEtWeTZiUGV0UkJZZGF5Z2hVaElGYUk2UDVJeUpxTVJtRDN0RzJ2YnVoZE8tclQzUQ==
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: vault
    kubernetes.io/service-account.uid: 9e547332-d1ff-4486-a0bd-a9bc8c91e1e5
  creationTimestamp: "2022-11-08T07:22:33Z"
  name: vault-token-kbbpz
  namespace: vault
  resourceVersion: "13122"
  uid: efeb5618-8867-4d89-8c55-b0dc52c70ceb
type: kubernetes.io/service-account-token


- SET UP K8S AUTHENTICATION
vault write auth/kubernetes/config token_reviewer_jwt="${tr_account_token}" kubernetes_host="https://${k8s_host}:${k8s_port}" kubernetes_ca_cert="${k8s_cacert}" disable_issuer_verification=true
--> This did not work

--> Try this from https://devopscube.com/vault-in-kubernetes/
vault write auth/kubernetes/config token_reviewer_jwt="$(cat /var/run/secret
s/kubernetes.io/serviceaccount/token)" kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" kubernetes_ca_cert=@/
var/run/secrets/kubernetes.io/serviceaccount/ca.crt disable_issuer_verification=true

Success! Data written to: auth/kubernetes/config

================================
CREATE A VAULT ROLE
================================
- First, create a service account (as in https://devopscube.com/vault-in-kubernetes/ - the other reference is missing this step)
kubectl -n vault create serviceaccount external-secrets
  serviceaccount/external-secrets created
  
Get the secret name:
kubectl get serviceaccount external-secrets -n vault -o yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "2022-11-08T09:54:15Z"
  name: external-secrets
  namespace: vault
  resourceVersion: "24500"
  uid: fd5d6242-7acb-44b1-b8cc-cae09aa608b1
secrets:
- name: external-secrets-token-wcgtp

Get token from the secret:
kubectl -n vault get secret external-secrets-token-wcgtp -o yaml

apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1URXdPREEwTXpFeE5Wb1hEVE15TVRFd05UQTBNekV4TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSnZOCjByTTd0OFhaeGNSYzhoNFoyTm5pMndwclVIT0h4dUwwQUpqY0lRbkl1L2ZLRlpuT0Z5TTdrVlM0QUw1TkZSNjUKR2RDZnEwNHlCS3VCeUFJOFB0Y0dpMWhwWDBvMnNucWMvTmJKenNlSmNwTnZxU05IMXJsaVdKdkEyVTAyVDhZRQprV2k4MkJGRUprL0xJOWVGa3FhTkg5bVFaMFh5QktPT3JxMitMNXY4ekRXbUR0RVUwZWcwVlVEaHJhT0duZzdkCklCQnMwTTdHQk50bXhub2c2K21TaTFYVWlLTU9memwzUnNod0Q0a3pRQWxyUnVBOVFPUDl2dys5WDBmdUxoQ1gKZGtMOUlidGlFc2JGTmR6Vm15dCt4TWdGS2tTM2l2RHR0R0NCY1g0d01rYTNZT1IrVEtMSk1oYWhiMzBxTlMzVwpITGZsdDVEUGJhZTdHcUpHbFdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKemtPVXBQcit1QitqdzdnSWxZS1JXS1ljYXVNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRHZ2RW5xaHA5ekhOQ0hPeUlEdAo3c1NkdnBLVTdRb0V4RXRLd2VCcWFnVXJ5cGMzU3QrRkJyVEFodWVLL0k2bE14OFQzU3pjZ2tCL1JkcXpxaGVoCit1QitDWGovblBQYUZtUzk5MjFQRXQ5TlZicGpMMnJ2a09LWG41ZzliT3dGNUo0TUgvZVVlaStwcjBpRjhaSkMKRFBiTUpuU2VocE5HMHJ2NEtkdUZVTEkwdlFUdlFRMnFIUDl5WlJCUnErZFhyMmQzTGg5YjhmdDhONFZFV1QwSAo5Snp2L1AyOXhWMURybGVrS2VWMndvaHJwTTczZ3FJby9tVEI1SmJxckduZFJ3d1NObW96MzNqS0pjY3ZhU1Z6CmxJazJkMzlER3d0Wnl1cW0zcnQvRlloakNnS3dUZkEyb3dwM2VPcTBFUG0zVkJHUnVqTWRTeE5xY3BOY2RmMzQKc2dJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  namespace: dmF1bHQ=
  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklsVlFPR1oxTkVGRVpHVlhhVVIyZDFsWVVFcDFZVkZ2UW5OeVUwSmFlak16T1U5eVRuVlVWMlV5Y1ZVaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUoyWVhWc2RDSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWamNtVjBMbTVoYldVaU9pSmxlSFJsY201aGJDMXpaV055WlhSekxYUnZhMlZ1TFhkalozUndJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpYSjJhV05sTFdGalkyOTFiblF1Ym1GdFpTSTZJbVY0ZEdWeWJtRnNMWE5sWTNKbGRITWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzUxYVdRaU9pSm1aRFZrTmpJME1pMDNZV05pTFRRMFlqRXRZamhqWXkxallXVXdPV0ZoTmpBNFlqRWlMQ0p6ZFdJaU9pSnplWE4wWlcwNmMyVnlkbWxqWldGalkyOTFiblE2ZG1GMWJIUTZaWGgwWlhKdVlXd3RjMlZqY21WMGN5SjkuNE1OOEVHUzRQOHBxTUFEakt6SDlxbllSZmU1MnZ2bnpaejRSTmRpdkVfQ1QyMW02ckE2WVZpRFd4MWx1bnJiWG5aSnI4M3lqV3ZidzN4MHAzbm5uTlJKbkpPb3VOblljMVNuZVlyTElCM2c2ZXU3OWxhUnM4dTdZaEh4bGM0ZDZ0akZZT3Ryb2FfZVYyVWU4ZUNzUjN6TFZvZXRRanAtQU5PR0lfYmpUbWQ1eGhTUUtoUVZZUEFpRUhsNEJiVE80SGIwVnhacVQ3Vnp2QjBCOUF2b3Q3QURQdmotWEpCYTRjMzEwY1RCS0dxajRaa0RfTEl0ZDM4VEFLVDZTZXZqMjRiQU1GZjRPTUp0R3VVd1YyNzlYWjR1WTFLZjlSQnRKdHdKajl1MXZib0FrT3VoNzNHWUFGV3l3UnRzUFZXR1NkRUNtQ2dqNFhvWUFodzYtaHQ4X21n
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: external-secrets
    kubernetes.io/service-account.uid: fd5d6242-7acb-44b1-b8cc-cae09aa608b1
  creationTimestamp: "2022-11-08T09:54:15Z"
  name: external-secrets-token-wcgtp
  namespace: vault
  resourceVersion: "24499"
  uid: caa47bef-2b14-4f0f-b928-74cfa0a6b68d
type: kubernetes.io/service-account-token

