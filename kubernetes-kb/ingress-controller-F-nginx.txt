==========================================
INGRESS USING NGINX AS INGRESS CONTROLLER
==========================================

==================
REFERENCES
==================
https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/
https://kubernetes.github.io/ingress-nginx/user-guide/basic-usage/
https://kubernetes.github.io/ingress-nginx/deploy/ --> basic deployment
https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/ --> advanced deployment

https://kubernetes.io/docs/concepts/services-networking/ingress/
https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/

==================
BASIC TO KNOW
==================
https://kubernetes.github.io/ingress-nginx/user-guide/basic-usage/
Nginx is configured to automatically discover all ingress with the kubernetes.io/ingress.class: "nginx" annotation --> ingressClassName: nginx (in the Igress manifest)
Please note that the ingress resource should be placed inside the same namespace of the backend resource.

==================
STEPS
==================

------------------------------
INSTALL NGINX CONTROLLER
------------------------------
https://kubernetes.github.io/ingress-nginx/deploy/

NOTE: Needs more CPU - experienced 'insufficient cpu' during deployment

- WARNINGS FROM THE WEBSITE https://kubernetes.github.io/ingress-nginx/deploy/
Attention
The default configuration watches Ingress object from all namespaces.
To change this behavior use the flag --watch-namespace to limit the scope to a particular namespace.

Warning
If multiple Ingresses define paths for the same host, the ingress controller merges the definitions.

Danger
The admission webhook requires connectivity between Kubernetes API server and the ingress controller.
In case Network policies or additional firewalls, please allow access to port 8443.

Attention
The first time the ingress controller starts, two Jobs create the SSL Certificate used by the admission webhook. 
For this reason, there is an initial delay of up to two minutes until it is possible to create and validate Ingress definitions.

- INSTALL
-- CHECK WHAT IS THERE IN THE DEPLOYMENT MANIFEST
# curl -O https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.3/deploy/static/provider/cloud/deploy.yaml
# grep image dep*
          image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
          imagePullPolicy: IfNotPresent
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
          imagePullPolicy: IfNotPresent
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
          imagePullPolicy: IfNotPresent

- CUSTOMIZE MANIFEST
NOTE: Directly running manifest gave error later - that the ingress did not get IP as ingress-controller did not get external-ip
Therefore, download the manifest, modify the following section with external-ip (same as host/vm's external IP), and run the modified manifest

# curl -O https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.3/deploy/static/provider/cloud/deploy.yaml

Modify as follows:

apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-4.0.4
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.0.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/component: controller
  externalIPs:
    - 192.168.56.11

- RUN MANIFEST
# kubectl apply -f deploy.yaml

namespace/ingress-nginx created
serviceaccount/ingress-nginx created
configmap/ingress-nginx-controller created
clusterrole.rbac.authorization.k8s.io/ingress-nginx created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created
role.rbac.authorization.k8s.io/ingress-nginx created
rolebinding.rbac.authorization.k8s.io/ingress-nginx created
service/ingress-nginx-controller-admission created
service/ingress-nginx-controller created
deployment.apps/ingress-nginx-controller created
ingressclass.networking.k8s.io/nginx created
validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created
serviceaccount/ingress-nginx-admission created
clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
role.rbac.authorization.k8s.io/ingress-nginx-admission created
rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
job.batch/ingress-nginx-admission-create created
job.batch/ingress-nginx-admission-patch created


# kubectl get pods -n ingress-nginx
NOTE: The two create and patch pod status 'Completed' is normal
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-w7x7g        0/1     Completed   0          17m
ingress-nginx-admission-patch-xkqgp         0/1     Completed   1          17m
ingress-nginx-controller-5cc57bf6c7-tvt4b   1/1     Running     0          17m

------------------------------
CREATE TWO APPS AS DEPLOYMENTS
------------------------------
https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/
docker pull gcr.io/google-samples/hello-app:1.0
docker pull gcr.io/google-samples/hello-app:2.0

kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0
kubectl create deployment web2 --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment web --type=NodePort --port=8080
kubectl expose deployment web2 --type=NodePort --port=8080

kubectl get service web
kubectl get service web2

------------------------------------------
CREATE INGRESS - without IngressClass
------------------------------------------
NOTE: This does not use annotation ingressClassName: nginx
NOTE: This is from te minikube example
https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/

File: ingress.yaml

Note: Without IngressClass, the nginx-ingress-controller pod logs said:
"I1008 11:35:28.378432       8 store.go:336] "Ignoring ingress because of error while validating ingress class" 
ingress="default/example-ingress" error="ingress does not contain a valid IngressClass"
--> Therefore remove "annotations" and add 

-- Use this manifest with IngressClass to avoid error
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
spec:
  rules:
    - host: hello-world.info
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web
                port:
                  number: 8080
          - path: /v2
            pathType: Prefix
            backend:
              service:
                name: web2
                port:
                  number: 8080
  ingressClassName: nginx


-- DO NOT USE this manifest - it gives error "Ingress does not contain a valid IngressClass"
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: hello-world.info
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web
                port:
                  number: 8080
          - path: /v2
            pathType: Prefix
            backend:
              service:
                name: web2
                port:
                  number: 8080

# kubectl apply -f ingress.yaml

-- With erroneous/old-style manifest without IngressClass:
# kubectl get ingress
NOTE: Ingress has still not got an IP address: https://github.com/nginxinc/kubernetes-ingress/issues/587
      Also see this for a possible fix: https://kubernetes.github.io/ingress-nginx/deploy/baremetal/

NAME              CLASS    HOSTS              ADDRESS   PORTS   AGE
example-ingress   <none>   hello-world.info             80      13m

-- With manifest with IngressClass
AND, modifying nginx-ingress-controller manifest with external-ip for the service:
# kubectl get ingress
NAME              CLASS   HOSTS              ADDRESS         PORTS   AGE
example-ingress   nginx   hello-world.info   192.168.56.11   80      3m54s

-- Without IngressClass
# kubectl describe ingress example-ingress
Name:             example-ingress
Namespace:        default
Address:          
Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
Rules:
  Host              Path  Backends
  ----              ----  --------
  hello-world.info  
                    /     web:8080 (172.17.0.5:8080)
                    /v2   web2:8080 (172.17.0.6:8080)
Annotations:        nginx.ingress.kubernetes.io/rewrite-target: /$1
Events:             <none>

-- With IngressClass
Name:             example-ingress
Namespace:        default
Address:          192.168.56.11
Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
Rules:
  Host              Path  Backends
  ----              ----  --------
  hello-world.info  
                    /     web:8080 (172.17.0.5:8080)
                    /v2   web2:8080 (172.17.0.6:8080)
Annotations:        <none>
Events:
  Type    Reason  Age                From                      Message
  ----    ------  ----               ----                      -------
  Normal  Sync    14m (x2 over 14m)  nginx-ingress-controller  Scheduled for sync


- SERVICES AT THIS POINT (without ingress class)
# kubectl get svc --all-namespaces -o wide
NAMESPACE       NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE     SELECTOR
default         goweb1-1-service                     NodePort       10.106.125.174   <none>        8081:30036/TCP               7d4h    app=goweb1-1
default         goweb1-1-service2                    ClusterIP      10.109.20.193    <none>        8081/TCP                     7d4h    app=goweb1-1
default         kubernetes                           ClusterIP      10.96.0.1        <none>        443/TCP                      7d16h   <none>
default         postgres                             NodePort       10.101.137.69    <none>        5432:32694/TCP               21h     app=postgres
default         web                                  NodePort       10.109.71.255    <none>        8080:31977/TCP               8m15s   app=web
default         web2                                 NodePort       10.97.115.140    <none>        8080:30463/TCP               8m15s   app=web2
ingress-nginx   ingress-nginx-controller             LoadBalancer   10.100.99.133    <pending>     80:30967/TCP,443:31802/TCP   28m     app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
ingress-nginx   ingress-nginx-controller-admission   ClusterIP      10.96.20.18      <none>        443/TCP                      28m     app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     kube-dns                             ClusterIP      10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP       7d5h    k8s-app=kube-dns
[root@ksn1 ingress02]# curl localhost:80/hello-world.info/v2

- SERVICES AT THIS POINT (with ingress class)
NOTE: service ingress-nginx-controller has external-ip now
NAMESPACE       NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE     SELECTOR
default         goweb1-1-service                     NodePort       10.106.125.174   <none>          8081:30036/TCP               7d5h    app=goweb1-1
default         goweb1-1-service2                    ClusterIP      10.109.20.193    <none>          8081/TCP                     7d5h    app=goweb1-1
default         kubernetes                           ClusterIP      10.96.0.1        <none>          443/TCP                      7d17h   <none>
default         postgres                             NodePort       10.101.137.69    <none>          5432:32694/TCP               22h     app=postgres
default         web                                  NodePort       10.109.71.255    <none>          8080:31977/TCP               68m     app=web
default         web2                                 NodePort       10.97.115.140    <none>          8080:30463/TCP               68m     app=web2
ingress-nginx   ingress-nginx-controller             LoadBalancer   10.100.99.133    192.168.56.11   80:30967/TCP,443:31802/TCP   88m     app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
ingress-nginx   ingress-nginx-controller-admission   ClusterIP      10.96.20.18      <none>          443/TCP                      88m     app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     kube-dns                             ClusterIP      10.96.0.10       <none>          53/UDP,53/TCP,9153/TCP       7d6h    k8s-app=kube-dns

- CURL THE INDIVIDUAL APP SERVICES - with their services' nodeport
-- Service/app 'web'
# curl localhost:31977
Hello, world!
Version: 1.0.0
Hostname: web-79d88c97d6-zvrbr

-- Service/app 'web2'
# curl localhost:30463
Hello, world!
Version: 2.0.0
Hostname: web2-5d47994f45-ttcsh

- CURL THE INGRESS CONTROLLER
No idea why it gives 404

<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>

- CURL INGRESS ENDPOINT
# curl hello-world.info
curl: (7) Failed connect to hello-world.info:80; Connection refused

# curl hello-world.info/v2
curl: (7) Failed connect to hello-world.info:80; Connection refused


------------------------------------------
CREATE INGRESS - WITH IngressClass
------------------------------------------
https://kubernetes.github.io/ingress-nginx/user-guide/basic-usage/

First of all follow the instructions to install ingress-nginx. 
Then imagine that you need to expose 2 HTTP services already installed: myServiceA, myServiceB. 
Let's say that you want to expose the first at myServiceA.foo.org and the second at myServiceB.foo.org. 
One possible solution is to create two ingress resources:

FOR CLUSTER VERSIONS BEFORE 1.19
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myservicea
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: myservicea.foo.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myservicea
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myserviceb
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: myserviceb.foo.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myserviceb
            port:
              number: 80

FOR CLUSTER VERSIONS 1.19+

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myservicea
spec:
  rules:
  - host: myservicea.foo.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myservicea
            port: 
              number: 80
  ingressClassName: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myserviceb
spec:
  rules:
  - host: myserviceb.foo.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myserviceb
            port: 
              number: 80
  ingressClassName: nginx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
spec:
  controller: k8s.io/ingress-nginx


==========================================
OLD NOTES (2018) - DONT USE
==========================================

THIS DOC DOES NOT DEAL WITH REAL INGRESS CONTROLLER 
- USED MULTIPLE DOCS OF NGINX COMPANY, AND GOT MIXED UP
- SEE OTHER DOC FOR NGINX BASED INGRESS CONTROLLER

WITH INGRESS: (not detailed, leads to next page below)
https://www.nginx.com/blog/nginx-plus-ingress-controller-kubernetes-load-balancing/
--> needs ingress controller - https://github.com/nginxinc/kubernetes-ingress/blob/master/docs/installation.md

WITHOUT INGRESS: https://www.nginx.com/blog/load-balancing-kubernetes-services-nginx-plus/

CREATE DOCKER IMAGE --> --> https://www.nginx.com/blog/deploying-nginx-nginx-plus-docker/ (building docker image first)

INGRESS: (more docs)
--> OFFICIAL NGINX COMPANY IMPLEMENTATION - https://github.com/nginxinc/kubernetes-ingress/ (both nginx and nginx+ combined into one controller)
--> https://www.nginx.com/products/nginx/kubernetes-ingress-controller/

https://github.com/nginxinc/kubernetes-ingress
--> https://github.com/nginxinc/kubernetes-ingress/tree/master/examples/complete-example (after installation)
-->--> https://github.com/nginxinc/kubernetes-ingress/blob/master/docs/installation.md (installation)

==========================================
PULL OR CREATE NGINX IMAGE
==========================================
https://www.nginx.com/blog/deploying-nginx-nginx-plus-docker/

Note1: nginx:latest image did not stay put as a k8 container - kept failing.
       Therefore, pulled nginx:1.7.9 and using it in k8

Note2: Dont create the share and dont create backend.conf - as that is for Nginx-Plus

- Just pull the image (on node or on host/laptop and transfer to node)
- Use the image put on node in k8 yml

==========================================
SET UP LOAD BALANCING, INGRESS ETC
==========================================

WITHOUT INGRESS: (not detailed, leads to next page below)
https://www.nginx.com/blog/nginx-plus-ingress-controller-kubernetes-load-balancing/

WITH INGRESS: https://www.nginx.com/blog/load-balancing-kubernetes-services-nginx-plus/ 

------------------------------------------
LABEL A NODE TO USE FOR INGRESS POD
------------------------------------------
- LABEL A NODE TO BE USED FOR THIS POD ALWAYS
# This is optional - to label one node to be used for nginx pod for ingress controller
#kubectl label node 192.168.11.101 role=nginxnode
kubectl label node k01 role=nginxnode

---------------------
CREATE INGRESS POD
---------------------
- CREATE POD YML with 1 replica
The single replica will re-create itself if destroyed - so, always up and running

nginx-ingress-pod.yml
---------------------

# https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
#apiVersion: apps/v1beta2 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-ingress-pod
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      nodeSelector:
        role: nginxnode
      containers:
      - name: nginx
        image: nginx
        ports:
          - name: http
            containerPort: 80
            hostPort: 80
          - name: http-alt
            containerPort: 8080
            hostPort: 8080

- CREATE THE POD
kubectl create -f nginx-ingress-pod.yml

- VERIFY POD

-- LIST POD
# kubectl get pods -o wide
NAME                                 READY   STATUS    RESTARTS   AGE     IP             NODE   NOMINATED NODE
nginx-ingress-pod-6967d9f7bd-6kl4j   1/1     Running   0          4d19h   192.168.1.85   k01    <none>

-- ACCESS POD
Do a curl from any machine in the network (from master or own or other nodes)
If it does not work, try doing 'ifconfig docker0 down' as docker0 interface may be interfering

# curl -I http://192.168.11.101:80
HTTP/1.1 200 OK
Server: nginx/1.15.7
Date: Tue, 18 Dec 2018 05:17:55 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 27 Nov 2018 12:31:56 GMT
Connection: keep-alive
ETag: "5bfd393c-264"
Accept-Ranges: bytes

---------------------------------------------------------------
CREATE AN APPLICATION & SERVICE - WITH MULTIPLE REPLICAS
---------------------------------------------------------------
Note: This nginxdemos/hello is an nginx itself

Here we are declaring a special headless service by setting the ClusterIP field to None. 
With this type of service, a cluster IP address is not allocated and the service is not available through the kube proxy. 
A DNS query to the Kubernetes DNS returns multiple A records (the IP addresses of our pods).

We also declare the port that NGINX Plus will use to connect the pods. 
In addition to specifying the port and target port numbers, we specify the name (http) and the protocol (TCP). 
We use those values in the NGINX Plus configuration file, in which we tell NGINX Plus to get the 
port numbers of the pods via DNS using SRV records.

webapp.yml
----------

# The pod
apiVersion: v1
kind: ReplicationController
metadata:
  name: webapp-pod
spec:
  replicas: 2
  selector:
    app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: hello
        image: nginxdemos/hello 
        ports:
        - containerPort: 80
---
# The service
apiVersion: v1
kind: Service
metadata:
  name: webapp-svc
spec:
  clusterIP: None
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: webapp

-- NOW CREATE THE POD AND SERVICE

# kubectl apply -f webapp.yml
replicationcontroller/webapp-pod created
service/webapp-svc created

- VERIFY
# kubectl get pods -o wide
NAME                                 READY   STATUS    RESTARTS   AGE     IP             NODE   NOMINATED NODE
nginx-ingress-pod-6967d9f7bd-6kl4j   1/1     Running   0          4d19h   192.168.1.85   k01    <none>
webapp-pod-859vp                     1/1     Running   0          101s    192.168.2.43   k02    <none>
webapp-pod-w6pkq                     1/1     Running   0          101s    192.168.1.87   k01    <none>

# kubectl get svc  (NOTE: the webapp-svc does not have a cluster-ip - headless)
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   19d
webapp-svc   ClusterIP   None         <none>        80/TCP    4s

# curl -I http://192.168.1.87:80
HTTP/1.1 200 OK
Server: nginx/1.13.8
Date: Tue, 18 Dec 2018 05:32:12 GMT
Content-Type: text/html
Connection: keep-alive
Expires: Tue, 18 Dec 2018 05:32:11 GMT
Cache-Control: no-cache

# curl -I http://192.168.2.43:80
HTTP/1.1 200 OK
Server: nginx/1.13.8
Date: Tue, 18 Dec 2018 05:32:46 GMT
Content-Type: text/html
Connection: keep-alive
Expires: Tue, 18 Dec 2018 05:32:45 GMT
Cache-Control: no-cache

==========================================
CREATE THE INGRESS CONTROLLER
==========================================
https://www.nginx.com/blog/nginx-plus-ingress-controller-kubernetes-load-balancing/
--> Needs this ingress controller - https://github.com/nginxinc/kubernetes-ingress/blob/master/docs/installation.md
Also see - https://kubernetes.io/docs/concepts/services-networking/ingress/
