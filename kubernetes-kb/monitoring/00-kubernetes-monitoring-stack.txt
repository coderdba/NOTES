Influx DB on Docker: 
- https://github.com/coderdba/NOTES/blob/master/influx-db-kb/influx-install-on-docker.txt

Telegraf daemonset - to monitor hosts: 
- https://dzone.com/articles/monitoring-kubernetes-architecture (also for k8s objects like pods, services)

Telegraf sidecar for Kubernetes container: 
- https://dzone.com/articles/monitoring-kubernetes-architecture (also for host/node)
- https://www.influxdata.com/blog/monitoring-kubernetes-architecture/
- https://medium.com/floatingapps/flask-django-and-mysql-stats-collection-via-telegraf-sidecars-wavefront-in-a-kubernetes-9dbb78dc905a
- https://www.influxdata.com/blog/monitoring-kubernetes-nginx-ingress-nginx-influxdb-module/ (for Nginx ingress with Telegraf sidecar)

Kubernetes monitoring:
- https://www.influxdata.com/influxdb-templates/kubernetes/
- https://www.influxdata.com/integration/kubernetes-monitoring/
- https://www.influxdata.com/blog/monitoring-kubernetes-nginx-ingress-nginx-influxdb-module/
- https://gitlab.flux.utah.edu/emulab/telegraf/-/tree/master/plugins/inputs/kubernetes

- https://www.datadoghq.com/blog/how-to-collect-and-graph-kubernetes-metrics/
- https://thenewstack.io/introducing-the-telegraf-operator-kubernetes-sidecars-made-simple/
- https://www.magalix.com/blog/the-sidecar-pattern

Kubernetes monitoring:
- Prometheus, grafana, fluentd, spark
https://towardsdatascience.com/kubernetes-monitoring-and-logging-an-apache-spark-example-62e3c8b1224b
https://towardsdatascience.com/scalable-and-reliable-kubernetes-logging-d47a27b8b04d

Prometheus for Kubernetes:
https://sysdig.com/blog/kubernetes-monitoring-prometheus/
        The Prometheus servers need as much target auto discovery as possible. There are several options to achieve this:
        Prometheus Kubernetes SD (service discovery)
        The Prometheus operator and its Custom Resource Definitions
        Consul SD
        Azure SD for Azure VM
        GCE SD for GCP instances
        EC2 SD for AWS VM
        File SD
        Apart from application metrics, we want Prometheus to collect metrics related to the Kubernetes services, nodes, and orchestration status.
        Node exporter for the classical host-related metrics: cpu, mem, network, etc.
        Kube-state-metrics for orchestration and cluster level metrics: deployments, pod metrics, resource reservation, etc.
        Kubernetes control plane metrics: kubelet, etcd, dns, scheduler, etc.
        Prometheus can configure rules to trigger alerts using PromQL. alertmanager will be in charge of managing alert notification, grouping, inhibition, etc.
        The AlertManager component configures the receivers and gateways to deliver alert notifications.
        Grafana can pull metrics from any number of Prometheus servers and display panels and Dashboards.

Federation: https://prometheus.io/docs/prometheus/latest/federation/

Monitoring etcd:

