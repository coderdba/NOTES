========================================================
POSTGRES ON KUBERNETES - WITH TELEGRAF SIDECAR
========================================================

My Git that uses this: git/coderdba-coding-org/kubernetes/postgres/postgres1
My Influx-Grafana setup: https://github.com/coderdba/NOTES/blob/master/influx-db-kb/influx-grafana-install-on-docker.txt

Basic deployment:
https://www.sumologic.com/blog/kubernetes-deploy-postgres/ --> This creates it as 'deployment' while it has to be statefulset - refer to the bmc page
https://www.bmc.com/blogs/kubernetes-postgresql/ --> Adapt the statefulset yaml from this and the volume-claim stuff from the sumologic page

Advanced deployment:
- https://bitnami.com/stack/postgresql/containers
- https://github.com/zalando/postgres-operator --> With Patroni

Postgres docker images:
- https://hub.docker.com/_/postgres
- docker pull postgres:14.0

Monitoring with Telegraf sidecar
- https://www.influxdata.com/blog/monitoring-kubernetes-nginx-ingress-nginx-influxdb-module/ (this is for nginx - adapt it as needed)
- https://www.influxdata.com/blog/monitoring-your-postgresql-database-with-telegraf-and-influxdb/

More stuff:
- https://help.sumologic.com/07Sumo-Logic-Apps/12Databases/PostgreSQL/Collect_logs_and_metrics_from_PostgreSQL/Collect_PostgreSQL_Logs_and_Metrics_for_Kubernetes_environments.

===================================
PULL DOCKER IMAGE
===================================
# docker pull postgres:14.0

# docker images |grep postgres
postgres                             14.0       6ce504119cc8   6 days ago      374MB

===================================
MOUNT A DISK ON KUBERNETES NODE
===================================
NOTE: As this is a single node cluster - so direct mount is ok - otherwise, it should be nfs, S3 or other mount)

Add a 20GB dynamically allocated virtual disk to the VM/host

----------------------
MOUNT THE DISK
----------------------

- OPTIONAL PARTITIONING
# fdisk /dev/sdb
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x292d7605.

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 
First sector (2048-41943039, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-41943039, default 41943039): 
Using default value 41943039
Partition 1 of type Linux and of size 20 GiB is set

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.

# lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   60G  0 disk 
├─sda1   8:1    0  1.9G  0 part /boot
├─sda2   8:2    0   54G  0 part /
└─sda3   8:3    0    4G  0 part 
sdb      8:16   0   20G  0 disk 
└─sdb1   8:17   0   20G  0 part 
sr0     11:0    1 58.3M  0 rom  /run/media/root/VBox_GAs_6.1.26

- MAKE FILESYSTEM (here, without partition on /dev/sdb)
# mkfs.xfs /dev/sdb
mkfs.xfs: /dev/sdb appears to contain a partition table (dos).
mkfs.xfs: Use the -f option to force overwrite.

[root@ksn1 dev]# mkfs.xfs -f /dev/sdb
meta-data=/dev/sdb               isize=512    agcount=4, agsize=1310720 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=0, sparse=0
data     =                       bsize=4096   blocks=5242880, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal log           bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

- MOUNT
# mount /dev/sdb /data1

# df -k |grep data1
/dev/sdb        20961280     32992  20928288   1% /data1

- MAKE PERMANENT
Enter the following in /etc/fstab
/dev/sdb        /data1        xfs        defaults        0        0

=========================================
CREATE PERSISTENT VOLUME AND VOLUME CLAIM
=========================================
https://www.sumologic.com/blog/kubernetes-deploy-postgres/
https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/

------------------
PERSISTENT VOLUME
------------------
This reserves 5GB of read-write storage at /data1 on the cluster’s node

File pv.yaml:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/data1/postgres"

# kubectl apply -f ./pv.yaml
persistentvolume/postgres-pv-volume created

# kubectl get pv postgres-pv-volume -o wide
NAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE   VOLUMEMODE
postgres-pv-volume   5Gi        RWO            Retain           Available           manual                  3s    Filesystem

# kubectl describe pv postgres-pv-volume
Name:            postgres-pv-volume
Labels:          type=local
Annotations:     <none>
Finalizers:      [kubernetes.io/pv-protection]
StorageClass:    manual
Status:          Available
Claim:           
Reclaim Policy:  Retain
Access Modes:    RWO
VolumeMode:      Filesystem
Capacity:        5Gi
Node Affinity:   <none>
Message:         
Source:
    Type:          HostPath (bare host directory volume)
    Path:          /data1/postgres
    HostPathType:  
Events:            <none>

------------------------
PERSISTENT VOLUME CLAIM
------------------------

File: pv-claim-1.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim-1
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# kubectl apply -f pv-claim-1.yaml
persistentvolumeclaim/postgres-pv-claim-1 created
 
# kubectl get pvc -o wide
NAME                  STATUS   VOLUME               CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODE
postgres-pv-claim-1   Bound    postgres-pv-volume   5Gi        RWO            manual         17s   Filesystem

# kubectl describe pvc postgres-pv-claim-1
Name:          postgres-pv-claim-1
Namespace:     default
StorageClass:  manual
Status:        Bound
Volume:        postgres-pv-volume
Labels:        <none>
Annotations:   pv.kubernetes.io/bind-completed: yes
               pv.kubernetes.io/bound-by-controller: yes
Finalizers:    [kubernetes.io/pvc-protection]
Capacity:      5Gi
Access Modes:  RWO
VolumeMode:    Filesystem
Used By:       <none>
Events:        <none>

# kubectl get pv -o wide
NAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                         STORAGECLASS   REASON   AGE   VOLUMEMODE
postgres-pv-volume   5Gi        RWO            Retain           Bound    default/postgres-pv-claim-1   manual                  54s   Filesystem

~~~~~~~~~~~~
NOTE
~~~~~~~~~~~~
If another claim is created with the same storageClass, it fails - see describe output below.
That is apparently one storageClass 'manual" assigned to a volume cannot be used for more than one claim.
Therefore, deleted the second pvc as it did not get created properly (kubectl delete -f pv-claim-2.yaml).

# kubectl describe pvc postgres-pv-claim-2
Name:          postgres-pv-claim-2
Namespace:     default
StorageClass:  manual
Status:        Pending
Volume:        
Labels:        <none>
Annotations:   <none>
Finalizers:    [kubernetes.io/pvc-protection]
Capacity:      
Access Modes:  
VolumeMode:    Filesystem
Used By:       <none>
Events:
  Type     Reason              Age               From                         Message
  ----     ------              ----              ----                         -------
  Warning  ProvisioningFailed  6s (x4 over 50s)  persistentvolume-controller  storageclass.storage.k8s.io "manual" not found

=========================================
CREATE SECRET FOR PASSWORD
=========================================
Let the password be just "password"

# echo "password" | base64
cGFzc3dvcmQK

Then, create a secrets config file and apply it on the cluster:

File: postgres-secrets.yml

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret-config
type: Opaque
data:
  password: cG9zdGdyZXMK
 
# kubectl apply -f postgres-secrets.yaml

# kubectl describe secret postgres-secret-config
Name:         postgres-secret-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  9 bytes

# kubectl edit secret postgres-secret-config
apiVersion: v1
data:
  password: cG9zdGdyZXMK
kind: Secret
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"password":"cG9zdGdyZXMK"},"kind":"Secret","metadata":{"annotations":{},"name":"postgres-secret-config","namespace":"default"},"type":"Opaque"}
  creationTimestamp: "2021-10-07T11:41:35Z"
  name: postgres-secret-config
  namespace: default
  resourceVersion: "60867"
  uid: f7402261-fbc9-4401-9fb7-8da2578a4c02
type: Opaque

=========================================
CREATE POSTGRES STATEFULSET
=========================================
https://www.sumologic.com/blog/kubernetes-deploy-postgres/ --> This creates it as 'deployment' while it has to be statefulset - refer to the bmc page
https://www.bmc.com/blogs/kubernetes-postgresql/ --> Adapt the statefulset yaml from this and the volume-claim stuff from the sumologic page

File: postgres-sts.yaml

# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres1
spec:
  serviceName: postgres1-service
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
        - name: postgres-db-disk
          persistentVolumeClaim:
            claimName: postgres-pv-claim-1
      containers:
        - name: postgres
          image: postgres:14.0
          volumeMounts:
          - name: postgres-db-disk
            mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret-config
                  key: password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

# kubectl apply postgres-sts.yaml

# kubectl get sts -o wide
NAME        READY   AGE     CONTAINERS   IMAGES
postgres1   1/1     4m42s   postgres     postgres:14.0

# kubectl get pods --all-namespaces
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE
default       postgres1-0                                1/1     Running   0          2m51s

Where does its data sit on host:
# ls -l /data1
drwxr-xr-x 3 root root 20 Oct  7 17:35 postgres

================================
CREATE SERVICE
================================

postgres-service.yaml:

apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
  - port: 5432
  selector:
    app: postgres
    
# kubectl apply -f postgres-service.yaml

# kubectl get svc -o wide
NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE     SELECTOR
kubernetes          ClusterIP   10.96.0.1        <none>        443/TCP          6d19h   <none>
postgres            NodePort    10.101.137.69    <none>        5432:32694/TCP   9s      app=postgres

================================
CONNECT TO DB FROM WITHIN POD
================================

# kubectl get pods -o wide
NAME           READY   STATUS    RESTARTS   AGE    IP           NODE   NOMINATED NODE   READINESS GATES
postgres1-0    1/1     Running   0          68m    172.17.0.4   ksn1   <none>           <none>

# kubectl exec -ti postgres1-0 /bin/sh
   
--> Now, you are inside the pod and there, execute this:
# psql -U postgres
psql (14.0 (Debian 14.0-1.pgdg110+1))
Type "help" for help.

postgres=# \l
                                 List of databases
   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
   
postgres=# 

postgres=# create database test1;
CREATE DATABASE

postgres=# \c test1
You are now connected to database "test1" as user "postgres".
 
test1=# create table x (x integer);
CREATE TABLE
test1=# insert into x values (1);
INSERT 0 1
test1=# insert into x values (1);
INSERT 0 1
test1=# insert into x values (1);
INSERT 0 1
test1=# exit

================================
POSTGRES-CLIENT
================================
# docker pull tmaier/postgresql-client

# docker run --env PGPASSWORD=password --rm tmaier/postgresql-client:latest  -h 192.168.56.11 -p 32694 -U postgres -d test1 -c "select * from x;"
 x 
---
 1
 1
 1
(3 rows)

-------------------
FAILED ATTEMPTS
-------------------

# docker run --rm tmaier/postgresql-client:latest -h 192.168.56.11 -p 32694 -U postgres
Password for user postgres: 
psql: error: fe_sendauth: no password supplied

Supply password --> maybe the "command" is not required
# docker run --env PGPASSWORD=cGFzc3dvcmQK  --rm tmaier/postgresql-client:latest --command -- psql  -h 192.168.56.11 -p 32694 -U root
psql: error: FATAL:  password authentication failed for user "root"
# docker run --env PGPASSWORD=cGFzc3dvcmQK  --rm tmaier/postgresql-client:latest --command -- psql  -h 192.168.56.11 -p 32694 -U postgres
psql: error: FATAL:  password authentication failed for user "postgres"

Another one: docker run -it --rm jbergknoff/postgresql-client postgresql://username:password@10.1.0.173:5432/db
- Adapt that to this image: docker run -it --rm tmaier/postgresql-client postgresql://username:password@10.1.0.173:5432/db

- DONT RUN THIS - THIS WILL ACTUALLY START A POSTGRES POD AS WELL
# kubectl run postgres-client --rm --tty -i --restart='Never' --image postgres:11 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgres -U postgres


===================================
TELEGRAF SIDECAR FOR POSTGRES
===================================
Based on this: https://www.influxdata.com/blog/monitoring-kubernetes-nginx-ingress-nginx-influxdb-module/

------------------
SECRETS
------------------
kubectl create secret -n default generic telegraf \
--from-literal=env=acc \
--from-literal=monitor_retention_policy="threedays" \
--from-literal=monitor_username="admin" \
--from-literal=monitor_password="admin123" \
--from-literal=monitor_host=http://192.168.56.41:8086 \
--from-literal=monitor_database=metrics

-------------------
CONFIGMAP
-------------------
NOTE: Add logfile = "/var/log/telegraf/telegraf.log" if required


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf
  namespace: default
  labels:
    k8s-app: telegraf
data:
  telegraf.conf: |+
    [global_tags]
      env = "$ENV"
    [agent]
      interval = "60s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "10s"
      flush_interval = "30s"
      flush_jitter = "10s"
      debug = false
      quiet = false
      hostname = "$HOSTNAME"
      omit_hostname = false
    [[outputs.influxdb]]
      urls = ["$MONITOR_HOST"]
      database = "$MONITOR_DATABASE"
      retention_policy = "$MONITOR_RETENTION_POLICY"
      write_consistency = "any"
      timeout = "15s"
      username = "$MONITOR_USERNAME"
      password = "$MONITOR_PASSWORD"
     [[inputs.postgresql]]
      address = "host=localhost port=5432 user=postgres password=password dbname=postgres sslmode=disable"
      databases = ["test1", "postgres"]



- THE FOLLOWING INITIAL CONFIGMAP DID NOT WORK
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf
  namespace: default
  labels:
    k8s-app: telegraf
data:
  telegraf.conf: |+
    [global_tags]
      env = "$ENV"
    [agent]
      interval = "60s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      debug = false
      quiet = false
      logfile = ""
      hostname = "$HOSTNAME"
      omit_hostname = false
    [[outputs.influxdb]]
      urls = ["$MONITOR_HOST"]
      database = "$MONITOR_DATABASE"
      retention_policy = "$MONITOR_RETENTION_POLICY"
      write_consistency = "any"
      timeout = "5s"
      username = "$MONITOR_USERNAME"
      password = "$MONITOR_PASSWORD"
     [[inputs.postgresql]]
      address = "host=localhost user=postgres password=password dbname=test1 sslmode=disable"


---------------------------------------
POSTGRES MANIFEST WITH TELEGRAF SIDECAR
---------------------------------------
postgres-sts-with-telegraf-sidecar.yaml

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres1
spec:
  serviceName: postgres1-service
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
        - name: postgres-db-disk
          persistentVolumeClaim:
            claimName: postgres-pv-claim-1
        - name: config
          configMap:
            name: telegraf
      containers:
        - name: postgres
          image: postgres:14.0
          volumeMounts:
          - name: postgres-db-disk
            mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret-config
                  key: password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
        - name: telegraf
          image: docker.io/telegraf:1.5.2
          ports:
          - name: udp
            containerPort: 8094
          env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: ENV
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: env
          - name: MONITOR_RETENTION_POLICY
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: monitor_retention_policy
          - name: MONITOR_USERNAME
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: monitor_username
          - name: MONITOR_PASSWORD
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: monitor_password
          - name: MONITOR_HOST
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: monitor_host
          - name: MONITOR_DATABASE
            valueFrom:
              secretKeyRef:
                name: telegraf
                key: monitor_database
          volumeMounts:
          - name: config
            mountPath: /etc/telegraf

------------------------------
APPLY THE MANIFEST
------------------------------
# kubectl get sts 
NAME        READY   AGE
postgres1   1/1     16h

# kubectl scale sts postgres1 --replicas=0
statefulset.apps/postgres1 scaled

# kubectl get sts 
NAME        READY   AGE
postgres1   0/0     16h

# kubectl apply -f postgres-sts-with-telegraf-sidecar.yaml

# kubectl get sts  -o wide
NAME        READY   AGE   CONTAINERS          IMAGES
postgres1   1/1     16h   postgres,telegraf   postgres:14.0,docker.io/telegraf:1.5.2

# kubectl get pods --all-namespaces
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE
default       postgres1-0                                2/2     Running   2          2m26s

# kubectl describe pod postgres1-0
Name:         postgres1-0
Namespace:    default
Priority:     0
Node:         ksn1/192.168.56.11
Start Time:   Fri, 08 Oct 2021 09:51:25 +0530
Labels:       app=postgres
              controller-revision-hash=postgres1-799bc645d4
              statefulset.kubernetes.io/pod-name=postgres1-0
Annotations:  <none>
Status:       Running
IP:           172.17.0.4
IPs:
  IP:           172.17.0.4
Controlled By:  StatefulSet/postgres1
Containers:
  postgres:
    Container ID:   docker://b5608612d74d37c46ffdf4cfcae9d8ea9c8232ef27a1bc405ded34921cad1da1
    Image:          postgres:14.0
    Image ID:       docker-pullable://postgres@sha256:c731979fd21f34562e32f56fc367d8ba92e43685376cc7203c5c39fc81584807
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 08 Oct 2021 09:51:27 +0530
    Ready:          True
    Restart Count:  0
    Environment:
      POSTGRES_PASSWORD:  <set to the key 'password' in secret 'postgres-secret-config'>  Optional: false
      PGDATA:             /var/lib/postgresql/data/pgdata
    Mounts:
      /var/lib/postgresql/data from postgres-db-disk (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zc92x (ro)
  telegraf:
    Container ID:   docker://487f16793d7babeae52e7fd9e3f996310532977c11df413d264bacc26ba35067
    Image:          docker.io/telegraf:1.5.2
    Image ID:       docker-pullable://telegraf@sha256:4b8b64e8384d0743d35f66bf95d824321e86270e55049555f98922e72533b0bf
    Port:           8094/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    2
      Started:      Fri, 08 Oct 2021 09:53:11 +0530
      Finished:     Fri, 08 Oct 2021 09:54:00 +0530
    Ready:          False
    Restart Count:  2
    Environment:
      HOSTNAME:                   (v1:spec.nodeName)
      ENV:                       <set to the key 'env' in secret 'telegraf'>                       Optional: false
      MONITOR_RETENTION_POLICY:  <set to the key 'monitor_retention_policy' in secret 'telegraf'>  Optional: false
      MONITOR_USERNAME:          <set to the key 'monitor_username' in secret 'telegraf'>          Optional: false
      MONITOR_PASSWORD:          <set to the key 'monitor_password' in secret 'telegraf'>          Optional: false
      MONITOR_HOST:              <set to the key 'monitor_host' in secret 'telegraf'>              Optional: false
      MONITOR_DATABASE:          <set to the key 'monitor_database' in secret 'telegraf'>          Optional: false
    Mounts:
      /etc/telegraf from config (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zc92x (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True 
Volumes:
  postgres-db-disk:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  postgres-pv-claim-1
    ReadOnly:   false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      telegraf
    Optional:  false
  kube-api-access-zc92x:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason     Age                  From               Message
  ----     ------     ----                 ----               -------
  Normal   Scheduled  2m54s                default-scheduler  Successfully assigned default/postgres1-0 to ksn1
  Normal   Pulled     2m52s                kubelet            Container image "postgres:14.0" already present on machine
  Normal   Created    2m52s                kubelet            Created container postgres
  Normal   Started    2m52s                kubelet            Started container postgres
  Normal   Pulled     69s (x3 over 2m52s)  kubelet            Container image "docker.io/telegraf:1.5.2" already present on machine
  Normal   Created    68s (x3 over 2m51s)  kubelet            Created container telegraf
  Normal   Started    68s (x3 over 2m51s)  kubelet            Started container telegraf
  Warning  BackOff    6s (x3 over 79s)     kubelet            Back-off restarting failed container

---------------------------------
VERIFY IN INFLUXDB
---------------------------------

$ influx  -username admin -password admin123

> show databases
metrics
_internal

> use metrics

> show measurements
postgresql

> show tag keys on metrics from postgresql;
name: postgresql
tagKey
------
db
env
host
server

> show field keys on metrics from postgresql;
--> ERROR - THIS IS NOT SHOWING ANYTHING - SO, TELEGRAF IS NOT REALLY SENDING ANY METRICS
--> FIX - prefix measurement-table name with retention period!!!

> show field keys on metrics from threedays.postgresql;
name: postgresql
fieldKey                 fieldType
--------                 ---------
active_time              float
blk_read_time            float
blk_write_time           float
blks_hit                 integer
blks_read                integer
buffers_alloc            integer
buffers_backend          integer
buffers_backend_fsync    integer
buffers_checkpoint       integer
buffers_clean            integer
checkpoint_sync_time     float
checkpoint_write_time    float
checkpoints_req          integer
checkpoints_timed        integer
conflicts                integer
datid                    integer
datname                  string
deadlocks                integer
idle_in_transaction_time float
maxwritten_clean         integer
numbackends              integer
session_time             float
sessions                 integer
sessions_abandoned       integer
sessions_fatal           integer
sessions_killed          integer
temp_bytes               integer
temp_files               integer
tup_deleted              integer
tup_fetched              integer
tup_inserted             integer
tup_returned             integer
tup_updated              integer
xact_commit              integer
xact_rollback            integer

> select * from metrics.threedays.postgresql;












