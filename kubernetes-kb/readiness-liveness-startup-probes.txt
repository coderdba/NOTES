========================================
READINESS AND LIVENESS PROBES
========================================
Good explanation and basic code: https://k21academy.com/docker-kubernetes/kubernetes-readiness-and-livenessprobe/
Official docs: https://v1-20.docs.kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
Official docs: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

Note: Readiness probes runs on the container during its whole lifecycle.
Caution: Liveness probes do not wait for readiness probes to succeed. 
-- If you want to wait before executing a liveness probe you should use initialDelaySeconds or a startupProbe.

The kubelet uses liveness probes to know when to restart a container. --> IMPORTANT - it restarts
For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. 
Restarting a container in such a state can help to make the application more available despite bugs.

The kubelet uses readiness probes to know when a container is ready to start accepting traffic. 
A Pod is considered ready when all of its containers are ready. 
One use of this signal is to control which Pods are used as backends for Services. 
When a Pod is not ready, it is removed from Service load balancers. --> IMPORTANT - removed from LB so that it wont accept connections

The kubelet uses startup probes to know when a container application has started. 
If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. 
This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running

Protocols:
- TCP
-- kubelet will attempt to open a socket to your container on the specified port
-- if fails then restarts

- HTTP
-- Any code greater than or equal to 200 and less than 400 indicates success. Any other code indicates failure

- plain command return code based 
-- like cat a file 
-- non zero is considered failed

Settings
- initialDelaySeconds: Number of seconds after the container has started before liveness or readiness probes are initiated. 
-- Defaults to 0 seconds. 
-- Minimum value is 0.

- periodSeconds: How often (in seconds) to perform the probe. 
-- Default to 10 seconds. 
-- Minimum value is 1.

- timeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. 
-- Minimum value is 1.

- successThreshold: Minimum consecutive successes for the probe to be considered successful after having failed. 
-- Defaults to 1. 
-- Must be 1 for liveness and startup Probes. 
-- Minimum value is 1.

- failureThreshold: When a probe fails, Kubernetes will try failureThreshold times before giving up. 
-- Giving up in case of liveness probe means restarting the container. In case of readiness probe the Pod will be marked Unready. 
-- Defaults to 3. Minimum value is 1.

Liveness Probe:
- if fails kubernetes restarts the container
- probe can say not-live for some reason - like a deadlock, memory pressure ... (up to us to define it)
- usually /healthz endpoint

Readiness Probe:
- container being 'ready'
- all containers in the pod should be ready for the pod to be ready
- example: a container may be doing pre-checks (like db up, initialization, setup...) - before saying it is ready

Startup Probe:
- to allow wait time for container to startup
