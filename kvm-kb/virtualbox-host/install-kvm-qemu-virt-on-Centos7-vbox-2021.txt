===========================================================================
KVM, QEMU, VIRT-MANAGER ON CENTOS7 on Virtualbox - nested virtualization
===========================================================================
Reference docs:
KVM - https://www.linuxtechi.com/install-kvm-hypervisor-on-centos-7-and-rhel-7/
Bridge - https://www.golinuxcloud.com/how-to-configure-network-bridge-nmtui-linux/

Old doc - https://github.com/coderdba/NOTES/blob/master/packer-kb/install-on-centos-and-kvm.txt

For Virtualbox nested virtualization 
- https://github.com/coderdba/NOTES/blob/master/virtualbox-kb/nested-virtualization-kvm-vbox.txt

Additional stuff:
https://www.linuxquestions.org/questions/linux-laptop-and-netbook-25/how-do-you-kvm-on-vmware-virtualbox-4175611275/
--> about vbox not supporting further virtualization on a vm

==========================
KEYWORDS
==========================
Libvirt - this is the library that runs KVM VMs
Network Bridge

==========================
VIRTUALBOX SETUP
==========================

-----------------------------------
Nested virtualization enablement
-----------------------------------
Enable 'nested virtualization' - so that you can create packer VMs and VMs running in VM.
For the VM, 

System --> Processor --> check the box 'Enable Nested VT-x/AMD-v

System --> Acceleration -->
  Paravirtualiztion Interface - KVM
  Enable Netsted Paging (this may have to be done using VBoxManage command)

==========================
HOST SETUP
==========================
--------------------
NETWORK CARDS
--------------------
3 network cards - vmnet0, vmnet3, vmnet4
192.168.99.1/24 --> Wired Connection 2 - vmnet0 - 192.168.99.101
192.168.98.1/24 --> Wired Connection 3 - vmnet3 - 192.168.98.101
192.168.40.1/24 --> Wired Connection 4 - vmnet4 - 192.168.40.101

# hostnamectl set-hostname kvm202101

# nmtui --> and edit the network cards with static IPs
# ifdown enp0s8
# ifup enp0s8
# ifdown enp0s9
# ifup enp0s9
# ifdown enp0s10
# ifup enp0s10

# ip a |grep enp
2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s3
3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.99.101/24 brd 192.168.99.255 scope global noprefixroute enp0s8
4: enp0s9: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.98.101/24 brd 192.168.98.255 scope global noprefixroute enp0s9
5: enp0s10: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.40.101/24 brd 192.168.40.255 scope global noprefixroute enp0s10
    
==========================
INSTALL
==========================
Check if CPU supports virtualization

# grep -E '(vmx|svm)' /proc/cpuinfo
We should get the word either vmx or svm in the output, otherwise CPU doesn’t support virtualization.

--> you can see vmx now!!

flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc eagerfpu pni pclmulqdq monitor vmx ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch tpr_shadow flexpriority fsgsbase avx2 invpcid rdseed clflushopt flush_l1d

Install packages
# yum install -y qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils  libguestfs-tools

Verify modules
# lsmod | grep kvm
Expected output:
kvm_intel             183621  0 
kvm                   586948  1 kvm_intel
irqbypass              13503  1 kvm

--> If desired output does not appear, then run the following and try again:
# modprobe kvm
# modprobe kvm-intel or kvm-amd(depends on your cpu)

Start service
# systemctl enable libvirtd
# systemctl start libvirtd
# systemctl status libvirtd

● libvirtd.service - Virtualization daemon
   Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: enabled)
   Active: active (running) since Sat 2021-06-05 07:09:45 IST; 2min 36s ago
     Docs: man:libvirtd(8)
           https://libvirt.org
 Main PID: 8533 (libvirtd)
    Tasks: 19 (limit: 32768)
   CGroup: /system.slice/libvirtd.service
           ├─3939 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/u...
           ├─3940 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/u...
           └─8533 /usr/sbin/libvirtd

Jun 05 07:09:45 kvm202101 systemd[1]: Starting Virtualization daemon...
Jun 05 07:09:45 kvm202101 systemd[1]: Started Virtualization daemon.
Jun 05 07:09:46 kvm202101 dnsmasq[3939]: read /etc/hosts - 3 addresses
Jun 05 07:09:46 kvm202101 dnsmasq[3939]: read /var/lib/libvirt/dnsmasq/default.addnhosts - 0 addresses
Jun 05 07:09:46 kvm202101 dnsmasq-dhcp[3939]: read /var/lib/libvirt/dnsmasq/default.hostsfile

- GUI RELATED INSTALLS
Install X-Windows system
# yum install "@X Window System" xorg-x11-xauth xorg-x11-fonts-* xorg-x11-utils -y

Start virt-manager - for GUI based VM creation
# virt-manager
--> This will pop up a GUI with various new VM creation options - from ISO, kickstart, image etc

==============================
SETUP BRIDGE NETWORK
==============================

- LIST CURRENT BRIDGES
#  brctl show
bridge name	bridge id		STP enabled	interfaces
virbr0		8000.52540008e8f5	yes		virbr0-nic   

[root@kvm202101 ~]# brctl show
bridge name	bridge id		STP enabled	interfaces
virbr0		8000.52540008e8f5	yes		virbr0-nic

--> this is created by libvirt (I guess I had installed libvirt earlier in regular VMs also, so, centos7model also has it)

# ip  a
6: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000
    link/ether 52:54:00:08:e8:f5 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever
7: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000
    link/ether 52:54:00:08:e8:f5 brd ff:ff:ff:ff:ff:ff

Config files for this are here:
# cd /var/lib/libvirt/dnsmasq

# cat def*f
##WARNING:  THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
##OVERWRITTEN AND LOST.  Changes to this configuration should be made using:
##    virsh net-edit default
## or other application using the libvirt API.
##
## dnsmasq conf file created by libvirt
strict-order
pid-file=/var/run/libvirt/network/default.pid
except-interface=lo
bind-dynamic
interface=virbr0
dhcp-range=192.168.122.2,192.168.122.254
dhcp-no-override
dhcp-authoritative
dhcp-lease-max=253
dhcp-hostsfile=/var/lib/libvirt/dnsmasq/default.hostsfile
addn-hosts=/var/lib/libvirt/dnsmasq/default.addnhosts

- CREATE A NEW BRIDGE
High level - create a bridge, add a slave nic or modify an existing nic to use that bridge
Use IPs in the same range as of bridged/host-only network of Virtualbox host 
--> if the new KVM-nested-VMs must be able to talk to outside of the Virtualbox VM

https://www.golinuxcloud.com/how-to-configure-network-bridge-nmtui-linux/
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/s2-networkscripts-interfaces_network-bridge (bond and bridge both)

# nmtui
Edit a conn
Add
Bridge
   Profile Name - br10
   Device - nm-br10 --> OR, just br10 (this will show in "brctl show")
Slaves
   Add
      Ethernet
         Profile Name - ethbr10 --> Here we are adding a new interface (we mostly can modify an existing interface itself)
         Device - ethbr10
IPV4 Configuration
   Manual (give IPs from virtualbox bridge/host-only network IP range for KVMs be accessible from outside of the KVM host)
   Address - 192.168.99.3 (192.168.99.1 is used by Vbox host)
   Gateway - 192.168.99.2 (192.168.99.1 is used by Vbox host)

# cd /etc/sysconfig/network-scripts

# cat ifcfg-br10
STP=yes
BRIDGING_OPTS=priority=32768
TYPE=Bridge
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
IPADDR=192.168.99.3
PREFIX=24
GATEWAY=192.168.99.2
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=br10
UUID=467c3e71-8f7c-4847-bba4-327a6fbcafb0
DEVICE=nm-br10
ONBOOT=yes

OR, if DEVICE was given as just 'br10':
STP=yes
BRIDGING_OPTS=priority=32768
TYPE=Bridge
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
IPADDR=192.168.99.3
PREFIX=24
GATEWAY=192.168.99.2
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=br10
UUID=7cafbd78-835e-42ae-95a9-69312ce0a608
DEVICE=br10
ONBOOT=yes

# cat ifcfg-ethbr10
TYPE=Ethernet
NAME=ethbr10
UUID=5c32b021-ef34-4bcc-9544-c48d3f29b457
DEVICE=ethbr10
ONBOOT=yes
BRIDGE=nm-br10
BRIDGE_UUID=467c3e71-8f7c-4847-bba4-327a6fbcafb0

- OR, if 'device' for bridge is given as just br10
TYPE=Ethernet
NAME=ethbr10
UUID=44e28bc6-96e8-4cfa-8407-38e360df16b9
DEVICE=ethbr10
ONBOOT=yes
BRIDGE=br10
BRIDGE_UUID=7cafbd78-835e-42ae-95a9-69312ce0a608

- VERIFY
# brctl show
bridge name	bridge id		STP enabled	interfaces
nm-br10		8000.000000000000	yes		
virbr0		8000.52540008e8f5	yes		virbr0-nic

# ip a 
--> NOTE THAT THE NEW BRIDGE nm-br10 SHOWS UP NOW
6: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000
    link/ether 52:54:00:08:e8:f5 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever
7: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000
    link/ether 52:54:00:08:e8:f5 brd ff:ff:ff:ff:ff:ff
8: nm-br10: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000
    link/ether 42:4b:6f:04:19:dc brd ff:ff:ff:ff:ff:ff
    inet 192.168.99.3/24 brd 192.168.99.255 scope global noprefixroute nm-br10
       valid_lft forever preferred_lft forever
       
-- Manual method (incomplete)
# cd /etc/sysconfig/network-scripts
# cp ifcfg-enp0s8 ifcfg-br0 --> to model upon an existing network

ifcfg-br10: (example)
TYPE="Bridge"
NAME="br10"
DEVICE="br10"
USERCTL="no"
ONBOOT="yes"
BOOTPROTO="none"

- TO DELETE A BRIDGE
https://unix.stackexchange.com/questions/31763/bring-down-and-delete-bridge-interface-thats-up
[root@kvm001 ~]# ip link set br10 down
[root@kvm001 ~]# brctl delbr br10
