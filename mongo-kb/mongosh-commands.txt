===========================
MONGOSH
===========================
https://www.w3schools.com/mongodb/mongodb_mongosh_create_collection.php
https://www.mongodb.com/docs/mongodb-shell/run-commands/

C:\Windows\system32>mongosh
Current Mongosh Log ID: 63db5dc658eb2496b30ac780
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.1.9
Using MongoDB:          5.0.6
Using Mongosh:          1.1.9

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting:
   2023-01-30T10:22:13.449+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> 
test> db
test

CREATE DB
test> use osquery1
switched to db osquery1

osquery1> db
osquery1

CREATE COLLECTION (NOW DB ACTUALLY GETS CREATED)
osquery1> db.createCollection("cpuUsage")
{ ok: 1 }

osquery1> show collections;
cpuUsage

osquery1> db.cpuUsage.findOne()
null

INSERT WITH TIMESTAMP FIELD
Example: With Upsert:
db.addCurrentDateTimeDemo.update( { _id: 1 }, { $set: { StudentName: "Robert" }, $setOnInsert: { StudentAdmissiondate: new Date() } }, { upsert: true } );

NOTE: This $setOnInsert is not for "insert" statements - it is more for upsert statements
      So, this will insert a field $setOnInsert rather than setting TimeStamp upon insert
osquery1> db.cpuUsage.insertOne({Server: "server1", $setOnInsert: {TimeStamp: new Date()}, busyPercent: 80});
{
  acknowledged: true,
  insertedId: ObjectId("63db7d0f94e4374b2ba7fbe6")
}

osquery1> db.cpuUsage.findOne();
{
  _id: ObjectId("63db7d0f94e4374b2ba7fbe6"),
  Server: 'server1',
  '$setOnInsert': { TimeStamp: ISODate("2023-02-02T09:06:23.954Z") },
  busyPercent: 80
}

INSERT
Insert without providing ID:
db.cpuUsage.insertOne({Server: "server1", TimeStamp: new Date(), busyPercent: 80});

Insert providing ID:
db.cpuUsage.insertOne({_id: 101, Server: "server1", TimeStamp: new Date(), busyPercent: 80});

UPSERT
- update already inserted record
db.cpuUsage.update( { _id: ObjectId("63db7d0f94e4374b2ba7fbe6") }, { $set: { Server: "Server2" }, $setOnInsert: { TimeStamp: new Date() }, $set: { busyPercent: 90 } }, { upsert: true } );

- upsert / add new record with ID (though ID of existing record was mentioned, it inserted as a new record - because we did not mention ObjectId("63db7d0f94e4374b2ba7fbe6"))
db.cpuUsage.update( { _id: "63db7d0f94e4374b2ba7fbe6" }, { $set: { Server: "Server2" }, $setOnInsert: { TimeStamp: new Date() }, $set: { busyPercent: 90 } }, { upsert: true } );

- add new record without id
db.cpuUsage.update( { $set: { Server: "Server2" }, $setOnInsert: { TimeStamp: new Date() }, $set: { busyPercent: 90 } }, { upsert: true } );
This fails because there is no ID provided
   osquery1> db.cpuUsage.update( { $set: { Server: "Server2" }, $setOnInsert: { TimeStamp: new Date() }, $set: { busyPercent: 90 } }, { upsert: true } );
   MongoInvalidArgumentError: Update document requires atomic operators

- upsert / add new record with ID
db.cpuUsage.update( { _id: "101" }, { $set: { Server: "Server2" }, $setOnInsert: { TimeStamp: new Date() }, $set: { busyPercent: 90 } }, { upsert: true } );
{
  acknowledged: true,
  insertedId: '101',
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}


UPDATE
db.cpuUsage.update( { _id: "101" }, { $set: { Server: "Server2" }, $set: { TimeStamp: new Date() }, $set: { busyPercent: 95 } } );

{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

db.cpuUsage.update( { _id: "101" }, { $set: { Server: "Server2" }, $set: { TimeStamp: new Date() }, $set: { busyPercent: 93 } } );

db.cpuUsage.update( { _id: 101 }, { $set: { Server: "Server2" }, $set: { TimeStamp: new Date() }, $set: { busyPercent: 93 } } );

UPSERT = FALSE
This will not find a record, so fails
db.cpuUsage.update( { _id: "102" }, { $set: { Server: "Server2" }, $set: { TimeStamp: new Date() }, $set: { busyPercent: 95 } }, { upsert: false } );
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}

db.cpuUsage.insertOne( { _id: 92,  Server: "Server2", TimeStamp: new Date(), busyPercent: 95 } );
db.cpuUsage.update( { _id: 92,  Server: "Server3", TimeStamp: new Date(), busyPercent: 94 } );
db.cpuUsage.update( { {_id: 92},  $set: {Server: "Server3"}, $set: {TimeStamp: new Date()}, $set: {busyPercent: 44} } );



QUERY
db.cpuUsage.find().pretty();
[
  {
    _id: ObjectId("63db7d0f94e4374b2ba7fbe6"),
    Server: 'server1',
    '$setOnInsert': { TimeStamp: ISODate("2023-02-02T09:06:23.954Z") },
    busyPercent: 90
  },
  {
    _id: ObjectId("63db7e4d94e4374b2ba7fbe7"),
    Server: 'server1',
    TimeStamp: ISODate("2023-02-02T09:11:41.170Z"),
    busyPercent: 80
  },
  {
    _id: '63db7d0f94e4374b2ba7fbe6',
    TimeStamp: ISODate("2023-02-02T09:19:03.041Z"),
    busyPercent: 90
  },
  {
    _id: 101,
    Server: 'server1',
    TimeStamp: ISODate("2023-02-02T09:23:41.829Z"),
    busyPercent: 80
  }
]
