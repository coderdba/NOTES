==============================
PACKER KVM LAB1
==============================

==================
Install Packer
==================
NOTE: This installs into /usr/bin/packer
There is another /usr/sbin/packer which exists already - and that is a different software altogether
Ensure PATH has the correct packer's folder coming before the other packer's folder
- ALTERNATIVELY, copy /usr/bin/packer to your work directory and use it from there

https://learn.hashicorp.com/tutorials/packer/get-started-install-cli
# yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
# yum -y install packer


========================================
Create a VM on openstack (or baremetal)
========================================
Install necessary packages

Create the following directory structure:
/data with sufficient space - 100GB+
/data/bin
/data/images
/data/packer-work
/data/packer-work/repos
/data/packer-work/repos/centos7-base
/data/packer-work/scripts
/data/packer_cache

Copy packer binary to /data/bin 
- and use /data/bin/packer - because /sbin/packer or /usr/sbin/packer points to some cracklib packer

Create packer json:
/data/packer-work/repos/centos7-base/centos7-base-packer.json
{
  "builders":
  [
    {
      "type": "qemu",
      "accelerator": "kvm",
      "qemu_binary": "/usr/libexec/qemu-kvm",
      "headless": true,
      "qemuargs": [
        [ "-m", "1024M" ],
        [ "-smp", "cpus=1,maxcpus=16,cores=4" ]
      ],
      "disk_interface": "virtio",
      "disk_size": 100000,
      "format": "qcow2",
      "net_device": "virtio-net",

      "iso_url": "file:///data/CentOS-7-x86_64-Minimal-1908.iso",
      "iso_checksum": "9a2c47d97b9975452f7d582264e9fc16d108ed8252ac6816239a3b58cef5c53d",
      "iso_checksum_type": "sha256",

      "vm_name": "centos7-base-gp",
      "output_directory": "centos7-base-img",

      "http_directory": "/data/packer-work/repos/centos7-base",
      "http_port_min": 10082,
      "http_port_max": 10089,

      "ssh_host_port_min": 2222,
      "ssh_host_port_max": 2229,

      "ssh_username": "root",
      "ssh_password": "CHANGEME",
      "ssh_port": 22,
      "ssh_wait_timeout": "1200s",

      "boot_wait": "40s",
      "boot_command": [
        "<up><wait><tab><wait> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos7-base-ks.cfg<enter><wait>"
      ],

      "shutdown_command": "shutdown -P now"
    }
  ],

  "provisioners":
  [
    {
      "type": "shell-local",
      "command": "tar zcf files-to-install.tar.gz files-to-install/"
    },
    {
      "type": "file",
      "source": "files-to-install.tar.gz",
      "destination": "/root/files-to-install.tar.gz"
    },
    {
      "type": "shell",
      "pause_before": "5s",
      "inline": [
        "cd /root/",
        "tar zxf files-to-install.tar.gz",
        "cd files-to-install/",
        "mv /etc/resolv.conf /etc/resolv.conf.orig",
        "cp resolv.conf /etc/resolv.conf",
        "cp *repo /etc/yum.repos.d/.",
        "sed -i 's/GRUB_DEFAULT=.*/GRUB_DEFAULT=0/g' /etc/default/grub",
        "grub2-mkconfig > /boot/grub2/grub.cfg"
      ]
    },
    {
      "type": "shell",
      "pause_before": "5s",
      "inline": [
        "cd /root/",
        "cp /data/packer-work/scripts/sshd_config.sh .",
        "chmod +x sshd_config.sh",
        "./sshd_config.sh"
      ]
    }
  ]
}


Create kickstart file:
/data/packer-work/repos/centos7-base/centos7-base-ks.cfg

# Run the installer
install

# Use CDROM installation media
cdrom

# System language
lang en_US.UTF-8

# Keyboard layouts
keyboard us

# Enable more hardware support
unsupported_hardware

# Network information
network --bootproto=dhcp --hostname=centos7-base-gp

# System authorization information
auth --enableshadow --passalgo=sha512

# Root password
# NOTE: Use crypted password taking from /etc/shadow on a test box or use a encrypter command
#       Without crypted subsequent creation of more images using the base images did not work - got invalid user/pass
#rootpw CHANGEME
rootpw --iscrypted $6$dAEFnlnAiCxVI0pncwEVDnBFQ58CxBHggAnNq0LjKwvd7kABiAyb46k........

# Additional users
user --name=k8suser --password=$6$33gLGi4IqAe4qZ6U$Dpx.jqTk8/PMUW39gSyd9R0ZnvwmFIYAEFnlnAiCxVI0pncwEVDnBFQ58CxBHggAnNq0LjKwvd7kABiAyb46k. --iscrypted --gecos="k8s user"


# Selinux in permissive mode (will be disabled by provisioners)
selinux --permissive

# System timezone
timezone UTC

# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=vda

# Run the text install
text

# Skip X config
skipx

# SELinux configuration
selinux --permissive

# Firewall configuration
firewall --disabled

# Only use /dev/vda
ignoredisk --only-use=vda

# Overwrite the MBR
zerombr

# Partition clearing information
clearpart --none --initlabel

# Disk partitioning information
part /var/log --fstype="xfs" --size=2048 --fsoptions="defaults,relatime,nodev"
part / --fstype="xfs" --size=20480 --fsoptions="defaults,relatime,nodev"
part /var/log/audit --fstype="xfs" --size=512 --fsoptions="defaults,relatime,nodev"
part /tmp --fstype="xfs" --size=2048 --fsoptions="defaults,relatime,nodev,nosuid"

%post

# Make sure temp filesystems are noexec, nosuid, and nodev
echo "/tmp /var/tmp none rw,noexec,nosuid,nodev,bind 0 0" >> /etc/fstab
echo "tmpfs /dev/shm tmpfs defaults,nodev,nosuid,noexec 0 0" >> /etc/fstab
mount -a

%end

bootloader --location=mbr  --append="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0"

# Do not run the Setup Agent on first boot
firstboot --disabled

# Accept the EULA
eula --agreed

# System services
services --disabled="chronyd" --enabled="sshd"

# Reboot the system when the install is complete
reboot

# Packages

%packages --ignoremissing --excludedocs
@^minimal
@core
kexec-tools
# unnecessary firmware
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-ipw2100-firmware
-ipw2200-firmware
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6050-firmware
-libertas-usb8388-firmware
-ql2100-firmware
-ql2200-firmware
-ql23xx-firmware
-ql2400-firmware
-ql2500-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%post

# update all and clean
yum -y upgrade
yum clean all
%end

Create a sshd-fix script (to allow root logon in the centos7 machine that gets created):
/data/packer-work/scripts/sshd_config.sh

#!/bin/sh -eux

SSHD_CONFIG="/etc/ssh/sshd_config"

# ensure that there is a trailing newline before attempting to concatenate
sed -i -e '$a\' "$SSHD_CONFIG"

USEDNS="UseDNS no"
if grep -q -E "^[[:space:]]*UseDNS" "$SSHD_CONFIG"; then
    sed -i "s/^\s*UseDNS.*/${USEDNS}/" "$SSHD_CONFIG"
else
    echo "$USEDNS" >>"$SSHD_CONFIG"
fi

GSSAPI="GSSAPIAuthentication no"
if grep -q -E "^[[:space:]]*GSSAPIAuthentication" "$SSHD_CONFIG"; then
    sed -i "s/^\s*GSSAPIAuthentication.*/${GSSAPI}/" "$SSHD_CONFIG"
else
    echo "$GSSAPI" >>"$SSHD_CONFIG"
fi

Create files to be copied across to the base-image:
/data/packer-work/repos/centos7-base/files-to-install/resolv.conf
/data/packer-work/repos/centos7-base/files-to-install/yum-repo1.repo

Then tar that folder to a zip file: (in the directory /data/packer-work/repos/centos7-base)
tar cvf files-to-install.tar.gz files-to-install

Create a packer-run command file:
/data/packer-work/repos/centos7-base/packer-run.sh

echo Starting `date`
echo Setting environment

export VERSION=0.0.1
export PACKER_LOG_PATH=/dev/stderr 
export PACKER_LOG=1 
export PACKER_CACHE_DIR=/data/packer_cache 

echo Starting packer command

/data/bin/packer build \
-var 'artifactory_url=https://artifactory.company.com/artifactory' \
-var 'builder_type=packer-openstack' \
-var 'provisioner=provisionerless' \
-var 'rpm=true' \
centos7-base-packer.json

echo Packer command completed

echo Moving new image to /data/images
mv centos7-base-img/centos7-base-gp /data/images/centos7-base-gp-${VERSION}.qcow2

echo Removing the temporary folder centos7-base-img
rmdir centos7-base-img

echo Ending `date`

==================================
PASSWORD GENERATOR SCRIPTS
==================================
# method 1
python -c 'import crypt; print(crypt.crypt("CHANGEME", "$6$My Salt"))'

# method 2
echo 'import crypt,getpass; print crypt.crypt(getpass.getpass(), "$5$16_CHARACTER_SALT_HERE")' | python

# method 3 - this will prompt for a pw
grub-crypt --sha-256

# method 4 - this will prompt for a pw
grub-crypt --md5

# method 5 - this will prompt for a pw
openssl passwd -1 "password here"
