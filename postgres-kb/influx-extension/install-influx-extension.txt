=====================================================
INSTALL INFLUX EXTENSION
=====================================================
https://github.com/pgspider/influxdb_fdw

=====================================================
INSTALL GOLANG
=====================================================
https://linuxize.com/post/how-to-install-go-on-centos-7/

NOTE: LOGON AS ROOT AND DO THIS

How to Install Go on CentOS 7

Updated  Sep 22, 2019

3 min read

Contents

    Prerequisites
    How to Install Go
    Test the Installation
    Conclusion

Share:
How to Install Go on CentOS 7

Go, often referred to as golang is a modern open-source programming language created by Google. Many popular applications, including Kubernetes, Docker, Hugo, and Caddy are written in Go.

In this tutorial, we will show you how to download and install Go on a CentOS 7 system.
Prerequisites

Before continuing with this tutorial, make sure you are logged in as a user with sudo privileges .
How to Install Go

At the time of writing this article, the latest stable version of Go is version 1.13. Before downloading the tarball, visit the official Go downloads page and check if there is a new version available.

Follow the steps below to install Go on CentOS 7:

    Download the tarball.

    To download the Go binary use either wget or curl :

    wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz

Verify the tarball.

Once the download is completed verify the tarball checksum with the sha256sum command:

sha256sum go1.13.linux-amd64.tar.gz

68a2297eb099d1a76097905a2ce334e3155004ec08cdea85f24527be3c48e856  go1.13.linux-amd64.tar.gz

Make sure the hash printed from the command above matches the one from the downloads page.

Extract the tarball.

Use the tar command to extract the tarball to the /usr/local directory:

sudo tar -C /usr/local -xzf go1.13.linux-amd64.tar.gz

Adjust the Path Variable.

Now we need to tell our system where to find the Go executable binaries by adjusting the $PATH environment variable.

We can do this by appending the following line to the /etc/profile file (for a system-wide installation) or to the $HOME/.bash_profile file (for a current user installation):
~/.bash_profile

export PATH=$PATH:/usr/local/go/bin

Save the file, and load the new PATH environment variable into the current shell session with the following command:

source ~/.bash_profile

=============================================
INSTALL GIT
=============================================
yum install git

=============================================
INSTALL GCC
=============================================
https://linuxize.com/post/how-to-install-gcc-compiler-on-centos-7/

yum group install "Development Tools"

=============================================
INSTALL POSTGRES DEVELOPER PACKAGES
=============================================
https://computingforgeeks.com/how-to-install-postgresql-13-on-centos-7/

- YUM INSTALL
yum install postgresql13-devel.x86_64

    Got error:
    Error: Package: postgresql13-devel-13.3-1PGDG.rhel7.x86_64 (pgdg13)
               Requires: llvm-toolset-7-clang >= 4.0.1
     You could try using --skip-broken to work around the problem
     You could try running: rpm -Va --nofiles --nodigest

- TRY WITH SKIP BROKEN
yum install postgresql13-devel.x86_64 --skip-broken 
 
    Packages skipped because of dependency problems:
        libedit-devel-3.0-12.20121213cvs.el7.x86_64 from base
        libicu-devel-50.2-4.el7_7.x86_64 from base
        llvm5.0-5.0.1-7.el7.x86_64 from epel
        llvm5.0-devel-5.0.1-7.el7.x86_64 from epel
        llvm5.0-libs-5.0.1-7.el7.x86_64 from epel
        ncurses-devel-5.9-14.20130511.el7_4.x86_64 from base
        postgresql13-devel-13.3-1PGDG.rhel7.x86_64 from pgdg13
--> This did not help when installing the extension

- TRY INSTALL LLVM-CLANG
https://centos.pkgs.org/7/centos-sclo-rh-testing-x86_64/llvm-toolset-7-clang-4.0.1-1.el7.x86_64.rpm.html

Install CentOS SCLo RH Testing repository:
yum install centos-release-scl-rh

Install llvm-toolset-7-clang rpm package:
yum --enablerepo=centos-sclo-rh-testing install llvm-toolset-7-clang
--> actually did yum install llvm-toolset-7-clang

- AGAIN, INSTALL POSTGRES DEVELOPER PACKAGES
yum install postgresql13-devel.x86_64

=============================================
INSTALL THE INFLUX EXTENSION
=============================================
https://github.com/pgspider/influxdb_fdw/

NOTE: INSTALL AS ROOT - AS POSTGRES WAS INSTALLED AS ROOT

----------------------
INSTALL THE SOFTWARE
----------------------
Installation

Install InfluxDB Go client library

go get github.com/influxdata/influxdb1-client/v2
go get github.com/pgspider/influxdb_fdw/

Add a directory of pg_config to PATH and build and install influxdb_fdw.
export PATH=$PATH:/usr/pgsql-13/bin

cd /root/go/src/github.com/pgspider/influxdb_fdw
make USE_PGXS=1 with_llvm=no
make install USE_PGXS=1 with_llvm=no

with_llvm=no is necessary to disable llvm bit code generation when PostgreSQL is configured with --with-llvm 
because influxdb_fdw use go code and cannot be compiled to llvm bit code.

If you want to build influxdb_fdw in a source tree of PostgreSQL instead, use

make with_llvm=no
make install  with_llvm=no

--> Trials
# make USE_PGXS=1 with_llvm=no
Makefile:32: /usr/pgsql-13/lib/pgxs/src/makefiles/pgxs.mk: No such file or directory
Makefile:48: *** PostgreSQL 9.6, 10, 11, 12 or 13 is required to compile this extension.  Stop.
--> Ensure postgres-developer tools were installed properly (go back to steps)

# make USE_PGXS=1 with_llvm=no
go tool cgo query.go
gcc -std=gnu99 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -fPIC -I. -I./ -I/usr/pgsql-13/include/server -I/usr/pgsql-13/include/internal  -D_GNU_SOURCE -I/usr/include/libxml2  -I/usr/include  -c -o option.o option.c
gcc -std=gnu99 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -fPIC -I. -I./ -I/usr/pgsql-13/include/server -I/usr/pgsql-13/include/internal  -D_GNU_SOURCE -I/usr/include/libxml2  -I/usr/include  -c -o deparse.o deparse.c
gcc -std=gnu99 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -fPIC -I. -I./ -I/usr/pgsql-13/include/server -I/usr/pgsql-13/include/internal  -D_GNU_SOURCE -I/usr/include/libxml2  -I/usr/include  -c -o influxdb_query.o influxdb_query.c
gcc -std=gnu99 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -fPIC -I. -I./ -I/usr/pgsql-13/include/server -I/usr/pgsql-13/include/internal  -D_GNU_SOURCE -I/usr/include/libxml2  -I/usr/include  -c -o influxdb_fdw.o influxdb_fdw.c
go build -buildmode=c-archive query.go
gcc -std=gnu99 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -fPIC -shared -o influxdb_fdw.so option.o deparse.o influxdb_query.o influxdb_fdw.o query.a -L/usr/pgsql-13/lib   -L/usr/lib64/llvm5.0/lib  -L/usr/lib64 -Wl,--as-needed -Wl,-rpath,'/usr/pgsql-13/lib',--enable-new-dtags

# make install USE_PGXS=1 with_llvm=no
/bin/mkdir -p '/usr/pgsql-13/lib'
/bin/mkdir -p '/usr/pgsql-13/share/extension'
/bin/mkdir -p '/usr/pgsql-13/share/extension'
/bin/install -c -m 755  influxdb_fdw.so '/usr/pgsql-13/lib/influxdb_fdw.so'
/bin/install -c -m 644 .//influxdb_fdw.control '/usr/pgsql-13/share/extension/'
/bin/install -c -m 644 .//influxdb_fdw--1.0.sql .//influxdb_fdw--1.1.sql .//influxdb_fdw--1.2.sql  '/usr/pgsql-13/share/extension/'

----------------------------
CREATE THE EXTENSION
----------------------------

- CREATE
# su - postgres
Last login: Tue Jul 20 04:31:09 CDT 2021 on pts/0
-bash-4.2$ psql
psql (13.3)
Type "help" for help.

postgres=# CREATE EXTENSION influxdb_fdw;
CREATE EXTENSION

- VERIFY
postgres=# \dx
                    List of installed extensions
     Name     | Version |   Schema   |          Description          
--------------+---------+------------+-------------------------------
 influxdb_fdw | 1.2     | public     | InfluxDB Foreign Data Wrapper
 plpgsql      | 1.0     | pg_catalog | PL/pgSQL procedural language
(2 rows)

- CREATE SERVER TO CONNECT TO INFLUX
# su - postgres
$ psql
postgres-# CREATE SERVER influxdb_server FOREIGN DATA WRAPPER influxdb_fdw OPTIONS (dbname 'mydb', host 'http://localhost', port '8086');
--> response "CREATE SERVER" should show after the command

- CREATE USER MAPPING OF A USER TO THE REMOTE INFLUX DB
postgres-# CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_server OPTIONS(user 'user', password 'pass'); 
--> remove OPTIONS(user .... password ....) if not needed - some influx servers may have been open for access without authentication

postgres-# CREATE USER MAPPING FOR postgres SERVER influxdb_server;
--> response  CREATE USER MAPPING

- CREATE A FOREIGN TABLE
CREATE FOREIGN TABLE influx_exadata_ping(time timestamp with time zone, config_item text, application text, component text, host text, url text, result_code integer ) SERVER influxdb_server OPTIONS (table 'exadata_ping');
--> response CREATE FOREIGN TABLE

-- VERIFY
https://stackoverflow.com/questions/13902548/how-can-i-list-foreign-tables-in-postgresql

postgres=# \dE[S+]
                                         List of relations
 Schema |          Name           |     Type      |  Owner   | Persistence |  Size   | Description 
--------+-------------------------+---------------+----------+-------------+---------+-------------
 public | influx_exadata_ping     | foreign table | postgres | permanent   | 0 bytes | 
 
postgres=# \d
                      List of relations
 Schema |          Name           |     Type      |  Owner   
--------+-------------------------+---------------+----------
 public | influx_sre_exadata_ping | foreign table | postgres

- DESCRIBE THE FOREIGN TABLE
postgres=# SELECT 
postgres-#    table_name, 
postgres-#    column_name, 
postgres-#    data_type 
postgres-# FROM 
postgres-#    information_schema.columns
postgres-# WHERE 
postgres-#    table_name = 'influx_exadata_ping';
       table_name        | column_name |        data_type         
-------------------------+-------------+--------------------------
 influx_exadata_ping | time        | timestamp with time zone
 influx_exadata_ping | config_item | text
 influx_exadata_ping | application | text
 influx_exadata_ping | component   | text
 influx_exadata_ping | host        | text
 influx_exadata_ping | url         | text
 influx_exadata_ping | result_code | integer
(7 rows)

- QUERY THE TABLE
https://stackoverflow.com/questions/31433747/postgres-where-clause-compare-timestamp

NOTE: Dont use count(*) as such non-preaggregated (aka without a column to aggregate on) queries cannot be queried for interval more than 1hr

postgres-#  select count(result_code)
from public.influx_exadata_ping
where the_timestamp_column >= timestamp '2021-07-19 00:00:00'
  and the_timestamp_column < timestamp '2021-07-20 00:00:00';
  
 count 
-------
 24548
(1 row)
 
