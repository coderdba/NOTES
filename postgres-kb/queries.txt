https://www.postgresqltutorial.com/postgresql-administration/
https://www.postgresqltutorial.com/postgresql-create-table/
https://stackoverflow.com/questions/31433747/postgres-where-clause-compare-timestamp

Creating admin/owner user: https://www.bazos.dev/blog/create-an-admin-user-in-postgresql
Granting all privileges on a database to a user: https://www.guru99.com/postgresql-create-alter-add-user.html#3

=============
RUNNING LIST (see more specific sections further down below)
=============

select * from pg_catalog.pg_user;
select * from pg_tables;

GRANT ALL PRIVILEGES ON DATABASE guru99 TO mytest;  (https://www.guru99.com/postgresql-create-alter-add-user.html#3)

\du+ --> to list user's privileges/roles



============
LIST SCHEMAS
============
mydb=> \dn

mydb=> SELECT schema_name FROM information_schema.schemata;
    schema_name     
--------------------
 pg_catalog
 information_schema
 public
 
============
LIST TABLES
============
https://www.postgresqltutorial.com/postgresql-show-tables/

psql> \dt

psql> SELECT
   *
FROM
   pg_catalog.pg_tables
WHERE
   schemaname != 'pg_catalog'
AND schemaname != 'information_schema';

================
DESCRIBE TABLES
================

psql> \d the_table_name

=======================
TABLESPACES
=======================

----------------------------------------
SHORTCUTS
----------------------------------------

Blank location means pg_default tablespace.

mydb=# \db
       List of tablespaces
    Name    |  Owner   | Location 
------------+----------+----------
 pg_default | postgres | 
 pg_global  | postgres | 
(2 rows)

mydb=# \db+
                                  List of tablespaces
    Name    |  Owner   | Location | Access privileges | Options |  Size  | Description 
------------+----------+----------+-------------------+---------+--------+-------------
 pg_default | postgres |          |                   |         | 44 MB  | 
 pg_global  | postgres |          |                   |         | 559 kB | 
(2 rows)

----------------------------------------
LIST TABLESPACES, TABLES IN TABLESPACES
----------------------------------------

- Table list:
select * from pg_tables ;
NOTE: You can see that tablespace name is blank for many.  To get tablespace names, see the next query on 'Tables in a tablespace'
     schemaname     |        tablename        | tableowner | tablespace | hasindexes | hasrules | hastriggers | rowsecurity 
--------------------+-------------------------+------------+------------+------------+----------+-------------+-------------
 public             | sre_oracle_sysmetric    | svsremgr   |            | t          | f        | f           | f
 pg_catalog         | pg_statistic            | postgres   |            | t          | f        | f           | f
 pg_catalog         | pg_type                 | postgres   |            | t          | f        | f           | f

- Tables in a tablespace:
https://stackoverflow.com/questions/4970966/how-can-i-tell-what-is-in-a-postgresql-tablespace

select t.schemaname, t.tablename, 
       coalesce(t.tablespace, ts.default_tablespace) as tablespace
from pg_tables t
  cross join (
     select ts.spcname as default_tablespace
     from pg_database d
       join pg_tablespace ts on ts.oid = d.dattablespace
      where d.datname = current_database()
   ) ts
where tablename = 'test1c'
  and schemaname = 'public';

--> The following two did not give any result
SELECT 
  c.relname, 
  t.spcname 
FROM 
  pg_class c 
    JOIN pg_tablespace t ON c.reltablespace = t.oid 
WHERE 
  t.spcname = 'indexes_old_tablespace';
  
- OR - 
SELECT 
  c.relname, 
  t.spcname 
FROM 
  pg_class c 
    JOIN pg_tablespace t ON c.reltablespace = t.oid 
WHERE 
  c.relname = 'my_table_name';
  
- Tablespace list:
SELECT spcname FROM pg_tablespace;

  spcname   
------------
 pg_default
 pg_global
  
  

=====================
SIZE QUERIES
=====================
https://www.postgresqltutorial.com/postgresql-database-indexes-table-size/

-------------------------------------
TABLE AND INDEX SIZES
-------------------------------------
Table size: 
select pg_relation_size('table_name');

Indexes size (all indexes of a table): 
select pg_indexes_size('table_name');

Table and its indexes together:
select pg_total_relation_size('oracle_1');

Top 5 biggest tables in the dvdrental database:
SELECT
    relname AS "relation",
    pg_size_pretty (
        pg_total_relation_size (C .oid)
    ) AS "total_size"
FROM
    pg_class C
LEFT JOIN pg_namespace N ON (N.oid = C .relnamespace)
WHERE
    nspname NOT IN (
        'pg_catalog',
        'information_schema'
    )
AND C .relkind <> 'i'
AND nspname !~ '^pg_toast'
ORDER BY
    pg_total_relation_size (C .oid) DESC
LIMIT 5;

EXAMPLES:

mydb=# select pg_indexes_size('oracle_1');

 pg_indexes_size 
-----------------
          196608
(1 row)

mydb=# select pg_relation_size('oracle_1');
 pg_relation_size 
------------------
           237568
(1 row)

mydb=# select pg_total_relation_size('oracle_1');
 pg_total_relation_size 
------------------------
                 475136
                 
mydb=# select pg_size_pretty(pg_total_relation_size('oracle_1'));
 pg_size_pretty 
----------------
 464 kB
(1 row)

----------------------------
DATABASE SIZE
----------------------------

- Size of one database 'dvdrental':
SELECT
    pg_size_pretty (
        pg_database_size ('dvdrental')
    );

- Size of each database in the current database server, you use the following statement:

SELECT
    pg_database.datname,
    pg_size_pretty(pg_database_size(pg_database.datname)) AS size
    FROM pg_database;

----------------------------
TABLESPACE SIZE
----------------------------
SELECT
    pg_size_pretty (
        pg_tablespace_size ('pg_default')
    );
    
----------------------------
VALUE SIZE
----------------------------
PostgreSQL value size

To find how much space that needs to store a specific value, you use the pg_column_size() function, for examples:

select pg_column_size(5::smallint);
 pg_column_size
----------------
              2
(1 row)


select pg_column_size(5::int);
 pg_column_size
----------------
              4
(1 row)


select pg_column_size(5::bigint);
 pg_column_size
----------------
              8
(1 row)


================
FETCH DATA
================
psql> select * from metrics FETCH FIRST 5 ROW ONLY;

====================
COMPARE DATES/TIMES
====================

-------------------------------------------------
Datatype: Timestamp with (or without) Timezone
-------------------------------------------------
select *
from the_table
where the_timestamp_column::date = date '2015-07-15';

select *
from the_table
where the_timestamp_column >= timestamp '2015-07-15 00:00:00'
  and the_timestamp_column < timestamp '2015-07-16 00:00:00';

- https://stackoverflow.com/questions/19469154/how-to-compare-dates-in-datetime-fields-in-postgresql
select * from table 
where update_date::date >= '2013-05-03' AND update_date::date <= '2013-05-04' ; (per site, both are same date 2013-05-03??)

select *
from table
where
    update_date
    <@
    tsrange('2013-05-03', '2013-05-03'::date + 1, '[)');
If the user enters timestamps then you don't need the ::date + 1 part

- https://intellipaat.com/community/11582/how-to-compare-dates-in-datetime-fields-in-postgresql

select * from table where update_date >= '2013-05-03' AND update_date <= '2013-05-04' -> results found
select * from table where update_date >= '2013-05-03' -> results found
SELECT *
FROM table
WHERE update_date >= '2013-05-03'::date
AND update_date < ('2013-05-03'::date + '1 day'::interval);


=======================
TO_CHAR ON TIME/DATE
=======================
------------------------------------------------------
'TIME' column datatype is timestamp with time zone
------------------------------------------------------
-- https://www.postgresqltutorial.com/postgresql-to_char/

CREATE TABLE exadata_ping(time timestamp with time zone, config_item text, application text, component text, host text, result_code integer, url text);

select count(*) from exadata_ping;

select time, to_char(time, 'YYYY-MM-DD HH24:MI') date_time from exadata_ping order by time;

select to_char(time, 'YYYY-MM-DD HH24:MI') date_time, count(*) from exadata_ping group by date_time;

=======================
PERFORMANCE QUERIES
=======================

- LIST SESSIONS
https://dataedo.com/kb/query/postgresql/list-database-sessions

select pid as process_id, 
       usename as username, 
       datname as database_name, 
       client_addr as client_address, 
       application_name,
       backend_start,
       state,
       state_change
from pg_stat_activity;

====================
INTERVAL QUERY
====================
https://gis.stackexchange.com/questions/57582/group-by-timestamp-interval-10-minutes-postgresql
with five_min_intervals as (
  select
    (select min(time)::date from sre_oracle_sysmetric) + ( n    || ' minutes')::interval start_time,
    (select min(time)::date from sre_oracle_sysmetric) + ((n+5) || ' minutes')::interval end_time
  from generate_series(0, (24*60), 5) n
)
select m.metric_name, f.start_time, f.end_time, avg(m.metric_value) avg_val
from sr_ora_metric m
right join five_min_intervals f
        on m.time >= f.start_time and m.time < f.end_time
group by metric_name, f.start_time, f.end_time
order by metric_name, f.start_time;

=====================================
FOR GRAFANA - MULTI-COLUMN GROUP BY
=====================================
https://stackoverflow.com/questions/65888943/groupby-issue-on-multiple-join-using-grafanas-timescaledb-sql-plugin

- MULTI COLUMN WITH A MULTI-TABLE JOIN
SELECT
  time_bucket('21600s',"timestamp") AS "time",
  avg(value),
  CONCAT(locations.name, ' ', weather_data_types.name) AS "name"
FROM weather_data
JOIN locations ON weather_data.location_id = locations.id
JOIN weather_data_types ON weather_data.type_id = weather_data_types.id
GROUP BY 1, locations.name, weather_data_types.name
ORDER BY 1

- MULTI COLUMN WITH SINGLE TABLE
SELECT
  $__timeGroupAlias("time",$__interval),
  avg(metric_value),
  CONCAT(db_service, ' ', metric_name) AS "name"
FROM sr_ora_metric
GROUP BY 1, db_service, metric_name
ORDER BY 1,2

=======================================
AGGREGATION WITH SUQUERY
=======================================
NOTE: Decmial cast is required to get fraction - otherwise fraction less than zero gets rounded to zero and such

select cast((m1b.slomet+m2b.slomet) as decimal)/cast((m1a.all+m2a.all) as decimal)
from
           (select 1 as id, count(latency) as all    from ora_wait_event where wait_event = 'log_sync') m1a,
(select 1 as id, count(latency) as slomet from ora_wait_event where wait_event = 'log_sync' and latency <= 2) m1b,
(select 1 as id, count(metric_value) as all    from ora_sysmetric where metric_name = 'Database_CPU_Ratio') m2a,
(select 1 as id, count(metric_value) as slomet from ora_sysmetric where metric_name = 'Database_CPU_Ratio' and metric_value >= 60) m2b
where m1a.id = m1b.id and m1a.id = m2a.id and m1a.id = m2b.id
;
