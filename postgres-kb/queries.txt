https://www.postgresqltutorial.com/postgresql-administration/
https://www.postgresqltutorial.com/postgresql-create-table/
https://stackoverflow.com/questions/31433747/postgres-where-clause-compare-timestamp

============
LIST TABLES
============
https://www.postgresqltutorial.com/postgresql-show-tables/

psql> \dt


psql> SELECT
   *
FROM
   pg_catalog.pg_tables
WHERE
   schemaname != 'pg_catalog'
AND schemaname != 'information_schema';

================
DESCRIBE TABLES
================

psql> \d the_table_name

psql> select * from metrics FETCH FIRST 5 ROW ONLY;

====================
COMPARE DATES/TIMES
====================

-------------------------------------------------
Datatype: Timestamp with (or without) Timezone
-------------------------------------------------
select *
from the_table
where the_timestamp_column::date = date '2015-07-15';

select *
from the_table
where the_timestamp_column >= timestamp '2015-07-15 00:00:00'
  and the_timestamp_column < timestamp '2015-07-16 00:00:00';

- https://stackoverflow.com/questions/19469154/how-to-compare-dates-in-datetime-fields-in-postgresql
select * from table 
where update_date::date >= '2013-05-03' AND update_date::date <= '2013-05-04' ; (per site, both are same date 2013-05-03??)

select *
from table
where
    update_date
    <@
    tsrange('2013-05-03', '2013-05-03'::date + 1, '[)');
If the user enters timestamps then you don't need the ::date + 1 part

- https://intellipaat.com/community/11582/how-to-compare-dates-in-datetime-fields-in-postgresql

select * from table where update_date >= '2013-05-03' AND update_date <= '2013-05-04' -> results found
select * from table where update_date >= '2013-05-03' -> results found
SELECT *
FROM table
WHERE update_date >= '2013-05-03'::date
AND update_date < ('2013-05-03'::date + '1 day'::interval);


=======================
TO_CHAR ON TIME/DATE
=======================
------------------------------------------------------
'TIME' column datatype is timestamp with time zone
------------------------------------------------------
-- https://www.postgresqltutorial.com/postgresql-to_char/

CREATE TABLE exadata_ping(time timestamp with time zone, config_item text, application text, component text, host text, result_code integer, url text);

select count(*) from exadata_ping;

select time, to_char(time, 'YYYY-MM-DD HH24:MI') date_time from exadata_ping order by time;

select to_char(time, 'YYYY-MM-DD HH24:MI') date_time, count(*) from exadata_ping group by date_time;

=======================
PERFORMANCE QUERIES
=======================

- LIST SESSIONS
https://dataedo.com/kb/query/postgresql/list-database-sessions

select pid as process_id, 
       usename as username, 
       datname as database_name, 
       client_addr as client_address, 
       application_name,
       backend_start,
       state,
       state_change
from pg_stat_activity;

====================
INTERVAL QUERY
====================
https://gis.stackexchange.com/questions/57582/group-by-timestamp-interval-10-minutes-postgresql
with five_min_intervals as (
  select
    (select min(time)::date from sre_oracle_sysmetric) + ( n    || ' minutes')::interval start_time,
    (select min(time)::date from sre_oracle_sysmetric) + ((n+5) || ' minutes')::interval end_time
  from generate_series(0, (24*60), 5) n
)
select m.metric_name, f.start_time, f.end_time, avg(m.metric_value) avg_val
from sr_ora_metric m
right join five_min_intervals f
        on m.time >= f.start_time and m.time < f.end_time
group by metric_name, f.start_time, f.end_time
order by metric_name, f.start_time;


