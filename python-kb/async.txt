======================================
ASYNC IN PYTHON
======================================

https://sqlpey.com/python/top-6-ways-to-run-functions-in-parallel-in-python/ (multiple methods)
https://www.geeksforgeeks.org/python-run-same-function-in-parallel-with-different-parameters/ (multiple methods)
https://www.geeksforgeeks.org/how-to-run-same-function-on-multiple-threads-in-python/ (Threads)
https://superfastpython.com/threadpoolexecutor-vs-processpoolexecutor/ (ThreadPoolExecutor, ProcessPoolExecutor)

----------------------------
Various Methods
----------------------------
asyncio, await, gather (gather is key aspect)- for io bound
Thread, ThreadPoolExecutor - for io bound, threads can share memory (state and data)
Process, ProcessPoolExecutor - for processor bound
Pool - for processor bound
joblib.parallel - optimize memory, cpu 

----------------------------
Thread, ThreadPoolExecutor
----------------------------
https://superfastpython.com/threadpoolexecutor-vs-processpoolexecutor/
Each thread belongs to a process and can share memory (state and data) with other threads in the same process

----------------------------
ProcessPoolExecutor
----------------------------
https://superfastpython.com/threadpoolexecutor-vs-processpoolexecutor/
The ProcessPoolExecutor class provides a process pool in Python.

A process is an instance of a computer program. A process has a main thread of execution and may have additional threads. A process may also spawn or fork child processes. In Python, like many modern programming languages, processes are created and managed by the underlying operating system.

You can create a process pool by instantiating the class and specifying the number of processes via the max_workers argument;

--------------------------------------------------------
Process
--------------------------------------------------------
mutliprocessing.Process with a loop
This method manually creates and manages multiple processes, each executing the target function independently. 
Unlike Pool, which manages processes automatically, this approach gives full control over process creation.

However, it has higher overhead and is only recommended when each process operates independently without shared data.

----------------------------
Pool
----------------------------
https://www.geeksforgeeks.org/python-run-same-function-in-parallel-with-different-parameters/
multiprocessing.Pool enables asynchronous function execution across multiple processes, efficiently distributing tasks.

The starmap()function handles multiple parameters, making it ideal for CPU-bound tasks.

----------------------------
joblib.parallel
----------------------------
Using joblib.parallel
joblib.Parallel efficiently parallelizes computations, optimizing CPU and memory usage, especially in machine learning and data processing. 
The delayed() enables easy parallel execution with minimal inter-process communication.







