# main.py
from mcp.server.fastmcp.utilities.logging import configure_logging, get_logger
import logging
import sys
import os
import asyncio

# From MDP standard Python implementation
from prometheus_fastapi_instrumentator import Instrumentator

#-------------------------------------------------------
# Add the root directory to the Python path
#
# This is for setting relative path for imports from the current folder (without full path of the folder)
# That is, if the full path is C:\code\myproject\app then this will set "app" as the root folder
#-------------------------------------------------------
#sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

#-------------------------------------------------------
# Now, all programs will know the root folder set above
# - this main program and also the programs in subfolders will know the root folder
# 
# Do imports from the base folder dot subfolder dot file
#-------------------------------------------------------
# Import mcp instance
from app.config import mcp

# Import registration functions
from app.resources.appinfo import register_appinfo_resources
from app.resources.toollist import register_toollist_resources
from app.tools.apphealth import register_apphealth_tools
from app.tools.weather import register_weather_tools
from app.tools.calculator import register_calculator_tools

# Configure logging
configure_logging(level="DEBUG")
logger = get_logger("mcp01:app")

root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stderr)
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
root_logger.addHandler(handler)

# Register resources
register_appinfo_resources()
register_toollist_resources()

# Register tools
register_apphealth_tools()
register_weather_tools()
register_calculator_tools()

# Print the list of registered tools
async def print_registered_tools():
    tools = await mcp.list_tools()
    logger.info(f"Registered tools: {tools}")

print("\n\nINFO - MCP is: ", mcp, "\n\n")
asyncio.run(print_registered_tools()) # Verify tools registration

if __name__ == "__main__":
    logger.info("Starting MCP server with SSE transport")
    
    print("\n\nINFO - MCP is: ", mcp, "\n\n")
    #print("\n\nINFO - MCP tools: ", mcp.list_tools(), "\n\n")
    asyncio.run(print_registered_tools()) # Verify tools registration
    
    mcp.run(transport="sse")
