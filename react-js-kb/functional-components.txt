========================
FUNCTIONAL COMPONENTS
========================

FYI: 
DOM = Document Object Model

Sites:
Doc: https://reactjs.org/docs/hooks-reference.html

https://www.digitalocean.com/community/tutorials/five-ways-to-convert-react-class-components-to-functional-components-with-react-hooks#step-4-%E2%80%94-adding-hooks-to-a-class-with-state-and-componentdidmount
https://www.robinwieruch.de/react-function-component 
https://www.robinwieruch.de/react-ref

Ref's: https://reactjs.org/docs/refs-and-the-dom.html

==================
useEffect() hook
==================
https://www.robinwieruch.de/react-function-component 
componentDidMount()  replaced by useEffect(() hook
componentDidUpdate() replaced by useEffect(() hook

For componentDidMount() and componentDidUpdate() functions. 
With the useEffect() Hook, you get the functionality of both. 
This is because useEffect() runs both after the initial render and after every subsequent update by default.

==================
useState() hook
==================
https://www.robinwieruch.de/react-function-component 
To use/modify state of a component 

==================
useRef() hook
==================
Doc: https://reactjs.org/docs/hooks-reference.html
useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). 
The returned object will persist for the full lifetime of the component.

https://www.robinwieruch.de/react-ref
React offers us the React useRef Hook which is the status quo API when using refs in React function components. 
The useRef Hook returns us a mutable object which stays intact over the lifetime of a React component. 
Specifically, the returned object has a current property which can hold any modifiable value for us:

(My notes: It is like a variable whose value persists over the lifecycle of a component)

function Counter() {
  const hasClickedButton = React.useRef(false);
 
  const [count, setCount] = React.useState(0);
 
  function onClick() {
    const newCount = count + 1;
 
    setCount(newCount);
 
    hasClickedButton.current = true;
  }
 
  console.log('Has clicked button? ' + hasClickedButton.current);
 
  return (
    <div>
      <p>{count}</p>
 
      <button type="button" onClick={onClick}>
        Increase
      </button>
    </div>
  );
}


