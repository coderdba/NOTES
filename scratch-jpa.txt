-- Table: sp.employees0

-- DROP TABLE IF EXISTS sp.employees0;

CREATE TABLE IF NOT EXISTS sp.employees0
(
    id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    active_status integer NOT NULL,
    created_datetime timestamp with time zone NOT NULL,
    updated_datetime timestamp with time zone,
    created_by character varying(100) COLLATE pg_catalog."default" NOT NULL,
    updated_by character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT employees_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS sp.employees0
    OWNER to myuser;
================

CUSTOM SQL RUNNER

package myco.com.sbpgcrudjpa1.services;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import java.util.Iterator;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import org.springframework.stereotype.Component; // needed to make this class a bean

// Import entities
import myco.com.sbpgcrudjpa1.domains.Employee; 

@Component
public class ExecCustomSQL {
	
	public void execUpdateSQL(String SQL)throws Exception {
	
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("exec-custom-sql");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction;
	
		if (entityManager != null) {
			
			entityTransaction = entityManager.getTransaction();	
			entityTransaction.begin();
			
			Query query = entityManager.createQuery(SQL);
			int updateCount = query.executeUpdate();
			
			if (updateCount > 0) {
				System.out.println("Done...");
			}
				
			entityTransaction.commit();
			
		} else {
			throw new Exception("ERR - In ExecCustomSQL:ExecUpdateSQL(): Error executing update");
		}
	}
}

/*
	
	EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("OpenJPASample");
	EntityManager entityManager = entityManagerFactory.createEntityManager();
			
	if (null != entityManager) {
			
		EntityTransaction updateTransaction = entityManager.getTransaction();
			
		updateTransaction.begin();
			
		Query query = entityManager
			.createQuery("UPDATE Student student SET student.level = 'L' "
			+ "WHERE student.id= :id");
			query.setParameter("id", 1);
			
		int updateCount = query.executeUpdate();
			
		if (updateCount > 0) {
			System.out.println("Done...");
		}
			
		updateTransaction.commit();

}
}
*/

====================
PERSISTENCE.XML

<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
  http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
  version="2.1">
  
    <persistence-unit name="exec-custom-sql">
    	<properties>  
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver"/>  
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost:5432/mydb"/>  
			<property name="javax.persistence.jdbc.user" value="myuser"/>  
			<property name="javax.persistence.jdbc.password" value="postgres"/>  
		</properties>  
    </persistence-unit>
       
</persistence>

====================

RUNNING A CUSTOM SQL FROM CONTROLLER ENDPOINT

	// test updating employee with entity manager update sql
	@PutMapping("/service/employee/testupdatesql")
	public ResponseEntity<String> testUpdate() throws Exception {
		
		try {
			
			 // Mention "Employee empolyees0" where Employee is the JPA Entity defined, and employees 0 is the actual table
			 String SQL = "update Employee employees0 set active_status = 0";
			 execCustomSQL.execUpdateSQL(SQL);
			 return new ResponseEntity<String>("Update done...", HttpStatus.OK);
			 
		} catch(Exception ex) {
			logger.error("ERR - Caught exception in EmployeeController:testUpdate(): "+ ex.getMessage());
			throw ex;
		}
	}


=====================================
Hello Controller

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
     
    @GetMapping("hello")
    String hello(@RequestParam(defaultValue = "world!") String name) {
        return "Hello " + name;
    }
 
}

======================================
Hello Boot Test

package myco.com.sbpgcrudjpa1;

import static org.hamcrest.CoreMatchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
 
@SpringBootTest
@AutoConfigureMockMvc
class HelloBootTest {
 
    @Autowired
    MockMvc mockMvc;
 
    @Test
    void whenNoRequestParam_returnDefault() throws Exception {
        this.mockMvc.perform(get("/hello"))
            .andExpect(status().isOk())
            .andExpect(content().string(containsString("Hello world!")))
            .andDo(print());
    }
 
    @Test
    void whenRequestParam_returnCustom() throws Exception {
        this.mockMvc.perform(
                get("/hello")
                .queryParam("name", "JCG!")
            )
            .andExpect(status().isOk())
            .andExpect(content().string(containsString("Hello JCG!")))
            .andDo(print());
    }
 
}

===================================
Employees Rest Get All Endpoint Test

package myco.com.sbpgcrudjpa1;

import static org.hamcrest.CoreMatchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

@SpringBootTest
@AutoConfigureMockMvc
public class EmployeesRestGetAllEndpointTest {
	
    @Autowired
    MockMvc mockMvc;
 
    @Test
    void callEmployeeGetAll_CheckStatus_andPrint() throws Exception {
        this.mockMvc.perform(get("/api/v1/service/employees"))
            .andExpect(status().isOk())
            .andDo(print());
    }
 }
