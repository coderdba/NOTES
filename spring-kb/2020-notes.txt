=======================================
GENERATE BUILD.GRADLE, POM.XML etc
=======================================
Use this 'initializer'
https://start.spring.io/

=======================================
DO THESE EXAMPLES
=======================================
----------------------------
FIRST ONES
----------------------------
https://spring.io/guides/gs/spring-boot/
- helloWorldClassic01
- helloWorldActuator01 - with actuator

https://spring.io/guides/gs/actuator-service/
https://spring.io/guides/gs/serving-web-content/

=========================
MANAGING ECLIPSE PROJECT
=========================
-------------------------
PROJECT TYPE
-------------------------
Just create a 'gradle' project - no need to create 'java project' or 'java something' or 'maven project'
- it seems easier than maven
- also, gradle seems more convenient to build

-------------------------
GRADLE VERSION
-------------------------
https://stackoverflow.com/questions/48057566/configure-eclipse-to-use-the-latest-version-of-gradle
https://services.gradle.org/distributions/

Spring needs a higher version of gradle 5+

Update gradle/wrapper/gradle-wrapper.properties file with the higher version of gradle:
distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-bin.zip

like:
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-bin.zip

Then, click on the project, then Right Click --> Gradle --> Refresh Gradle Project

-------------------------
BUILD.GRADLE FILE
-------------------------
Update build.gradle under each app directory with the following content:
Note the COMMENTS IN UPPERCASE

After updating this file, have gradle download dependencies:
In Eclipse, click on the file build.gradle
Then right click --> Gradle --> Refresh Gradle Project

Here is the build.gradle file content:

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
//apply plugin: 'java-library'  // COMMENTED OUT, AND ADDED IN 'plugins' section

// ADDED FOR SPRINGBOOT
plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'java-library'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    // ADDED FOR SPRINGBOOT
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // ADDED FOR SPRINGBOOT
    implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

--------------------------------------------
Actuators - application.properties file
--------------------------------------------
For details on actuators, see actuators.txt in this repo-folder.

management.endpoint.shutdown.enabled=true
management.endpoints.web.exposure.include=health,info,shutdown

-------------------------------
application.properties file
------------------------------
Kept under the project-root directory itself - keeping it in src/resources did not work

For other locations refer to: 
	https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm
	https://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/boot-features-external-config.html
	
===========================================================================
Optional run() method in the main application class
===========================================================================

The 'run' method in the main application class is optional and is automatically run after the application starts.
It can be used to print context information or variables/beans etc.

    private void run() {

        logger.info("Application name: {}", applicationName);
        logger.info("Database: {}", database);

    }

=========================
BUILDING JAR FILE
=========================
https://www.tutorialspoint.com/spring_boot/spring_boot_service_components.htm

You can create an executable JAR file, and run the Spring Boot application by using the Maven or Gradle commands given below −

For Maven, use the command as shown below −

mvn clean install
After “BUILD SUCCESS”, you can find the JAR file under the target directory.

For Gradle, you can use the command as shown below −

gradle clean build
After “BUILD SUCCESSFUL”, you can find the JAR file under build/libs directory.

Run the JAR file by using the command given below −

java –jar <JARFILE> 
