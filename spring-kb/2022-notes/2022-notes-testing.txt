=============================================
TESTING SPRINGBOOT WITH MOCKTO, JUNIT ETC
=============================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MAIN THING TO NOTE:
Use @SpringBootTest - NOT - @WebMvcTest - because the latter DOES NOT LOAD many beans, 
and it is very tricky/impossible to load repository and such beans/classes.

More details further below in another section
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=============================================
REFERENCES
=============================================

-------------------------
Used in Own Coding Trials:
-------------------------

-------------------------
THE BEST ONES WITH @SpringBootTest

- ** @SpringBootTest - MockMvc - Best one - with @SpringBootTest (all beans get loaded) which did not get Repository bean not found and such crazy errors.
-    Also, has the other way @WebMvcTest 'web layer only' testing with a specific 'controller class' - which mostly will throw the repository bean not found error
-- https://examples.javacodegeeks.com/spring-boot-mockmvc-tutorial/ (also see for other tutorials https://www.javacodegeeks.com/spring-boot-tutorials)
  -- Code - https://examples.javacodegeeks.com/wp-content/uploads/2020/10/spring-boot-mockmvc.zip
  
- ** Uses @SpringBootTest: 
-- General, using Mockito, @SpringBootTest - https://www.tutorialspoint.com/spring_boot/spring_boot_unit_test_cases.htm
-- REST endpoints, @SpringBootTest - https://www.tutorialspoint.com/spring_boot/spring_boot_rest_controller_unit_test.htm

- This article says use @SpringBootTest when using JPA repos
https://stackoverflow.com/questions/39950614/spring-annotation-webmvctest-does-not-work-in-an-app-that-has-jpa-repositories

------------------------

-------------------------
Other
-------------------------
- * REST endpoints with JUnit and Mockito (also, how to disable security during testing) - https://www.springboottutorial.com/unit-testing-for-spring-boot-rest-services
  - Code: https://github.com/in28minutes/in28minutes.github.io/tree/master/code-zip-files
- * REST endpoints - Spring Boot Unit Testing CRUD REST API with JUnit and Mockito - author: Ramesh Fadatare - https://www.javaguides.net/2022/03/spring-boot-unit-testing-crud-rest-api-with-junit-and-mockito.html
- * REST endpoints - good explanation on component-scan etc - https://medium.com/swlh/https-medium-com-jet-cabral-testing-spring-boot-restful-apis-b84ea031973d

- To fix repository bean not found in JUnit test running - Reference: https://stackoverflow.com/questions/52101936/consider-defining-a-bean-of-type-com-repository-userrepository-in-your-configu

- Spring Data JPA Repository Testing using Spring Boot @DataJpaTest - author: Ramesh Fadatare - https://www.javaguides.net/2018/09/spring-data-jpa-repository-testing-using-spring-boot-datajpatest.html
- JPA repo testing (no rest endpoints) using JUnit from spring-boot-starter-test - https://www.javaguides.net/2018/09/spring-data-jpa-repository-testing-using-spring-boot-datajpatest.htm
- JPA CRUD - https://bushansirgur.in/spring-boot-rest-api-testing-using-junit/

- REST with JUnit (seems a bit different way of calling) - no endpoint testing, only methods: https://www.blazemeter.com/blog/junit-rest-api-testingl

======================================================================================
WHICH ANNOTATION TO USE - @SpringBootTest or @WebMvcTest
======================================================================================
Notes from: https://examples.javacodegeeks.com/spring-boot-mockmvc-tutorial

-------------
OPTIONS
-------------
Bootstrap the entire application context. This option adds all beans that have been configured in your application.
- @SpringBootTest

Bootstrap the web layer. This option adds only MVC components to the application context.
- @WebMvcTest

Bootstrap the minimum infrastructure to run your tests. This option gives the developer more control in configuring the MockMvc object.

----------------------------------------------------------------------------------------------------------------------------------
@SpringBootTest - Bootstrap the entire application context. This option adds all beans that have been configured in your application.
----------------------------------------------------------------------------------------------------------------------------------
Main info:
When you use @SpringBootTest, all beans configured in your application are added to the context.
- Therefore, Repository and other beans also get loaded and not error out (my notes)

More info:
@SpringBootTest annotation uses the SpringBootTestContextBootstrapper class to create the application context. 
The @AutoConfigureMockMvc annotation will automatically configure the MockMvc object when used in combination with @SpringBootTest.

When to use: (my notes)
Test without fear of some beans not loaded and breaking head over such errors

----------------------------------------------------------------------------------------------------------------------------------
@WebMvcTest - Bootstrap the web layer. This option adds only MVC components to the application context.
----------------------------------------------------------------------------------------------------------------------------------
In some cases, you may want to limit your tests to the web layer only. 
The web layer consists of MVC components like @Controller, @ControllerAdvice, and @JsonComponent beans. 
The web layer does not include @Component, @Service, or @Repository beans. You can use the @WebMvcTest annotation for this purpose.
- This means, Repositories do not get loaded
-- BUT, the example seems to have a repository also (in the zipped code) - then, how did that get loaded?

----------------------------------------------------------------------------------------------------------------------------------
Bootstrap the minimum infrastructure to run your tests. 
----------------------------------------------------------------------------------------------------------------------------------
In some cases, you may not even want to test with the entire web layer but only want to use the bare minimum infrastructure required by the TestDispatcherServlet. 
You can use the MockMvcBuilders class for this purpose.

MockMvcBuilders.standaloneSetup(Objectâ€¦ controllers).build();

This creates a StandaloneMockMvcBuilder, which allows for full customization of your web controllers. 
For instance, you can register ControllerAdvice beans, ViewResolver beans, and add interceptors for incoming requests.

With this option, a MockServletContext is used to initialize the TestServletDispatcher.  
The MockServletContext has a smaller footprint than the ApplicationContext
