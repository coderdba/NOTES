===========================================
SPRING BOOT WITH POSTGRES
===========================================

---------------------------
What is new in this trial
---------------------------
May try https://spring.io/guides/gs/accessing-data-rest 
- which seems as per this site: This guide walks you through the process of creating an application 
  that accesses relational JPA data through a hypermedia-based RESTful front end.

References:
- https://zetcode.com/springboot/postgresql/
- With Spring Data JPA, Rest Repositories: https://spring.io/guides/gs/accessing-data-rest/
- Domain (entities) modeling: http://what-when-how.com/enterprise-javabeans-3/domain-modeling-and-the-jpa-ejb-3/

- Spring JDBC API dependency:
-- https://docs.spring.io/spring-framework/docs/3.0.x/spring-framework-reference/html/jdbc.html
-- https://medium.com/tyanthoney-morrell/spring-jdbctemplate-69855fb7edf0

- Rest Repositories dependency:
-- https://spring.io/guides/gs/accessing-data-rest/ (with Spring Data JPA, Rest Repositories)

- javax.persistence or jakarta.persistence
https://genotechies.medium.com/not-found-javax-persistence-in-my-spring-boot-project-b52939614066
https://spring.io/guides/gs/accessing-data-jpa/

My Old Notes:
- https://github.com/coderdba/NOTES/blob/master/spring-kb/2022-notes/2022-notes-postgres-jpa.txt

===============
postgresjpa4
===============
Git: Folder "postgresjpa4" inside git repo: coderdba-coding-org/sb-postgres-jpa1.git

-----------------------------
STARTER PROJECT AND ECLIPSE
-----------------------------
For Eclipse etc setup after starter project is generated, see postgresjpa3 section

- STARTER PROJECT CREATION
https://start.spring.io/
Project: Gradle-Groovy (traditional Gradle build file) (alternative Gradle-Kotlin was also tried, but finally used gradle-groovy)
Language: Java
Spring Boot: 3.1.2
Group: com.example
Artefact: postgresjpa3
Package Name: com.example.postgresjpa3
Packagin: Jar
Java: 17

Dependencies:
- Spring Data JPA
- Spring Web
- Lombok (will also need Lombok to be installed on Eclipse)
- Postgres SQL Driver
- Rest Repositories - https://spring.io/guides/gs/accessing-data-rest
- Spring Boot Actuator
- Spring Data JDBC
- JDBC API

More Dependencies (not available in spring starter):
- javax-persistence-api (not javax.persistence which is from Eclipse)
  Add to build.gradle file:
  implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
-- alternative jakarta-persistence-api (https://genotechies.medium.com/not-found-javax-persistence-in-my-spring-boot-project-b52939614066)

------------------------------------------------
JPA TOOLS, ENTITY GENERATION, PERSISTENCE.YML
------------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ADD JPA TOOLS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Add JPA Tools to Eclipse project, generate entity classes from tables, add persistence.xml
https://stackoverflow.com/questions/50817803/jpa-tools-menu-missing-from-eclipse
https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.jpt.doc.user%2Ftasks024.htm
https://www.enterprisedb.com/postgres-tutorials/how-connect-postgres-database-using-eclipse-and-netbeans

Project --> right click --> properties --> Project Facets --> Enable facets --> Choose JPA 2.2 --> 
--> further configuration required --> double click --> Disable Library Configuration

This much will bring in "JPA Content" item to the project hierarchy.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GENERATE ENTITIES FROM TABLES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- IF GENERATING ENTITIES FROM TABLES
Project --> right click --> JPA Tools --> Generate entities from tables --> then add connection --> choose and remove the default Postgres driver -->
--> add the driver gotten in "Project and External Dependencies" --> press OK --> give URL and credentials (as in the persistence stuff below)
Then you will be able to see the tables and choose and get the entities created (default in 'model' package - change it to 'domain' package if needed)

Example entity it generates:
package com.example.postgresjpa4.domains;

import java.io.Serializable;
import javax.persistence.*;
import java.sql.Timestamp;


/**
 * The persistent class for the employees database table.
 * 
 */
@Entity
@Table(name="employees")
@NamedQuery(name="Employee.findAll", query="SELECT e FROM Employee e")
public class Employee implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(unique=true, nullable=false)
	private Integer id;

	@Column(name="active_status", nullable=false)
	private Integer activeStatus;

	@Column(name="created_by", nullable=false, length=100)
	private String createdBy;

	@Column(name="created_timestamp", nullable=false)
	private Timestamp createdTimestamp;

	@Column(nullable=false, length=100)
	private String name;

	@Column(name="updated_by", length=100)
	private String updatedBy;

	@Column(name="updated_timestamp")
	private Timestamp updatedTimestamp;

	public Employee() {
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getActiveStatus() {
		return this.activeStatus;
	}

	public void setActiveStatus(Integer activeStatus) {
		this.activeStatus = activeStatus;
	}

	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public Timestamp getCreatedTimestamp() {
		return this.createdTimestamp;
	}

	public void setCreatedTimestamp(Timestamp createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	public Timestamp getUpdatedTimestamp() {
		return this.updatedTimestamp;
	}

	public void setUpdatedTimestamp(Timestamp updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GENERATE PERSISTENCE.XML
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- IF USING PERSISTENCE.XML
Then, open persistence.xml of "JPA Content"
- Non JTA data source: Localhost PG13 mydb myuser (gave this arbitrary name)
- Transaction Type: Resource Local (not JTA)
- Driver: org.postgresql.Driver
- URL: jdbc:postgresql://localhost:5432/mydb
- User: myuser
- Password: postgres
- The resulting xml:
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	<persistence-unit name="postgresjpa4" transaction-type="RESOURCE_LOCAL">
		<non-jta-data-source>Localhost PG13 mydb myuser</non-jta-data-source>
		<properties>
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver"/>
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost:5432/mydb"/>
			<property name="javax.persistence.jdbc.user" value="myuser"/>
			<property name="javax.persistence.jdbc.password" value="postgres"/>
		</properties>
	</persistence-unit>
</persistence>

===============
postgresjpa3
===============
NOTE: Abandoned this due to errors related to spring-session, micrometer-influx etc for which we have not configured destinations

Git: Folder "postgresjpa3" inside git repo: coderdba-coding-org/sb-postgres-jpa1.git

--------------------------
STARTER PROJECT
--------------------------

Choose all options and click "Generate" to get the zip file.
Unzip the file into your project folder.
In Eclipse - "Open projects from file system" to import the project from that folder

- STARTER PROJECT CREATION
https://start.spring.io/
Project: Gradle-Groovy (traditional Gradle build file) (alternative Gradle-Kotlin was also tried, but finally used gradle-groovy)
Language: Java
Spring Boot: 3.1.2
Group: com.example
Artefact: postgresjpa3
Package Name: com.example.postgresjpa3
Packagin: Jar
Java: 17

Dependencies:
- Spring Data JPA
- Spring Web
- Lombok (will also need Lombok to be installed on Eclipse)
- Postgres SQL Driver
- Rest Repositories - https://spring.io/guides/gs/accessing-data-rest
- Spring Boot Actuator
- Influx
- Prometheus
- Spring Session
- Spring Data JDBC
- JDBC API 

- Dependencies as obtained in build.gradle:
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-jdbc'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-influx'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


--------------------------
ECLIPSE - FIRST STEPS 
--------------------------
Verify/Set Build Path:
Right click the project --> Build Path --> Configure Build Path
- Should show Module Path as the given Java 17 path
- Double click it and it will show Execution Environment, Alternate JRE, Workspace Default JRE
  -- Verify the one chosen is the right one with the correct path on the disk

Convert to Gradle Project:
Right-click the project --> Configure --> Add Gradle Nature (to make it a gradle project)
- Otherwise we cannot see 'gradle' in project right click to refresh the gradle project

Refresh Gradle Project:
Rigkt-click the project --> Gradle --> Refresh Gradle Project
- This will show a folder 'Project and External Dependencies' in the project hierarchy and all dependencies show up there
- Also, when viewing build path, it will show Classpath - Project and External Dependencies, alongwith the original "Module Path"

====================================
START THE APP - AND TROUBLESHOOT
====================================
Go to "Boot Dashboard" in Eclipse and start the project.

------------------------------
ERROR - Failed to configure a DataSource
------------------------------
***************************
APPLICATION FAILED TO START
***************************

Description:
Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
Reason: Failed to determine a suitable driver class

Action:
Consider the following:
	If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.
	If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).

- REASON
https://www.baeldung.com/spring-boot-failed-to-configure-data-source
Springboot tries to autowire DB connections
At least the applications.properties file entries for DB should be present

------------------------------
ERRORS - Spring Session, Influx etc errors
------------------------------
- spring session
org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [DELETE FROM SPRING_SESSION
WHERE EXPIRY_TIME < ?
Caused by: org.postgresql.util.PSQLException: ERROR: relation "spring_session" does not exist
  Position: 13

- influx
[2m2023-08-06T18:30:16.466+05:30[0;39m [31mERROR[0;39m [35m8840[0;39m [2m---[0;39m [2m[trics-publisher][0;39m [36mi.micrometer.influx.InfluxMeterRegistry [0;39m [2m:[0;39m unable to create database 'mydb'
[2m2023-08-06T18:30:16.529+05:30[0;39m [31mERROR[0;39m [35m8840[0;39m [2m---[0;39m [2m[trics-publisher][0;39m [36mi.micrometer.influx.InfluxMeterRegistry [0;39m [2m:[0;39m failed to send metrics to influx

Action:
Commenting out the following in build.gradle and refreshing gradle did not help

	implementation 'org.springframework.session:spring-session-jdbc'
	runtimeOnly 'io.micrometer:micrometer-registry-influx'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

-----------------------------------------
ERROR: No managed type
-----------------------------------------
This is error with JPA and SB 3.x.
https://stackoverflow.com/questions/73331089/java-lang-illegalargumentexception-not-a-managed-type-class-com-sportyshoe-ent

To fix: Use jakarta.persistence-api and not javax.persistence-api in gradle and in entity definition classes.
- build.gradle entry: implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'


-----------------------------------------
ERROR:  listed in the persistence.xml file, but is not annotated
-----------------------------------------
This shows up in entitiy definition files at the line where the class is defined.
https://stackoverflow.com/questions/73331089/java-lang-illegalargumentexception-not-a-managed-type-class-com-sportyshoe-ent

To fix: Right click persistence.yml in JPA Tools and "synchronize class list"

-----------------------------------------
ERROR:  'employee' table not found with Employee.java having @Table (name="employees")
-----------------------------------------
Though @Table had the correct name employees as the table name, Spring was generating SQL as if it was 'employee' table and not 'employees'

To Fix: Refactored the class to Employees to match with table name, instead of Employee (Employees.java instead of Employee.java)

---------------------------------------------
ERROR: Hibernate not picking up table name and schema name from @Table annotation
---------------------------------------------
https://stackoverflow.com/questions/47296766/spring-boot-jpa-does-not-prepend-schema-name-to-tables-in-query
https://stackoverflow.com/questions/38131924/hibernate-default-schema-and-table-annotation

Hibernate ignores @Table annotation - and goes with Entity class name, and default_schema in application.properties
Wrong @Table annotation is also ignored:
@Table(name = "employeesx", schema = "springbootx") // added schema as jpa tools did not add schema

To Fix: There was by mistake an import of javax.persistence.Table which was taken up by @Table annotation
- Removed that and then @Table started using jakarta.persistence.Table which recognized both schema and table in @Table

---------------------------------------------
ERROR: @NamedQuery inserted by jpa-tools errors during compile
---------------------------------------------

//@NamedQuery(name="Employees.findAll", query="SELECT e FROM springboot.employees e") // This is generated by jpa-tools, but gives error Could not resolve root entity 'springboot.employees'

No idea why. 
Not important now, so left it as is

