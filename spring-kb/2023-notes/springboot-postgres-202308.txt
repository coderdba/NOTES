===========================================
SPRING BOOT WITH POSTGRES
===========================================

---------------------------
What is new in this trial
---------------------------
May try https://spring.io/guides/gs/accessing-data-rest 
- which seems as per this site: This guide walks you through the process of creating an application 
  that accesses relational JPA data through a hypermedia-based RESTful front end.

===============
postgresjpa3
===============
Git: Folder "postgresjpa3" inside git repo: coderdba-coding-org/sb-postgres-jpa1.git

References:
- https://zetcode.com/springboot/postgresql/
- With Spring Data JPA, Rest Repositories: https://spring.io/guides/gs/accessing-data-rest/

- Spring JDBC API dependency:
-- https://docs.spring.io/spring-framework/docs/3.0.x/spring-framework-reference/html/jdbc.html
-- https://medium.com/tyanthoney-morrell/spring-jdbctemplate-69855fb7edf0

- Rest Repositories dependency:
-- https://spring.io/guides/gs/accessing-data-rest/ (with Spring Data JPA, Rest Repositories)

My Old Notes:
- https://github.com/coderdba/NOTES/blob/master/spring-kb/2022-notes/2022-notes-postgres-jpa.txt

--------------------------
STARTER PROJECT
--------------------------

Choose all options and click "Generate" to get the zip file.
Unzip the file into your project folder.
In Eclipse - "Open projects from file system" to import the project from that folder

- STARTER PROJECT CREATION
https://start.spring.io/
Project: Gradle-Groovy (traditional Gradle build file) (alternative Gradle-Kotlin was also tried, but finally used gradle-groovy)
Language: Java
Spring Boot: 3.1.2
Group: com.example
Artefact: postgresjpa3
Package Name: com.example.postgresjpa3
Packagin: Jar
Java: 17

Dependencies:
- Spring Data JPA
- Spring Web
- Lombok (will also need Lombok to be installed on Eclipse)
- Postgres SQL Driver
- Rest Repositories - https://spring.io/guides/gs/accessing-data-rest
- Spring Boot Actuator
- Influx
- Prometheus
- Spring Session
- Spring Data JDBC
- JDBC API 

- Dependencies as obtained in build.gradle:
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-jdbc'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-influx'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


--------------------------
ECLIPSE - FIRST STEPS 
--------------------------
Verify/Set Build Path:
Right click the project --> Build Path --> Configure Build Path
- Should show Module Path as the given Java 17 path
- Double click it and it will show Execution Environment, Alternate JRE, Workspace Default JRE
  -- Verify the one chosen is the right one with the correct path on the disk

Convert to Gradle Project:
Right-click the project --> Configure --> Add Gradle Nature (to make it a gradle project)
- Otherwise we cannot see 'gradle' in project right click to refresh the gradle project

Refresh Gradle Project:
Rigkt-click the project --> Gradle --> Refresh Gradle Project
- This will show a folder 'Project and External Dependencies' in the project hierarchy and all dependencies show up there
- Also, when viewing build path, it will show Classpath - Project and External Dependencies, alongwith the original "Module Path"
