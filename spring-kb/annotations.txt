=========================
REFERENCES
=========================
------------------------------------------------------
https://www.baeldung.com/spring-qualifier-annotation
(article dealing primarily with Qualifier for disambiguation of which bean/component should be used)
------------------------------------------------------
Bean
Qualifier
Primary
Component
Configuration --> @Configuration is also a @Component (but just a @Component cannot act as @Configuration)
Autowired

------------------------------------------------------------------------------------------------------------------------------
http://zetcode.com/springboot/component/#:~:text=%40Component%20is%20the%20most%20generic,used%20for%20more%20specific%20cases.
(deals with Component)
------------------------------------------------------------------------------------------------------------------------------
Component
Autowired

@Component
@Component is the most generic Spring annotation. A Java class decorated with @Component is found during classpath scanning and registered in the context as a Spring bean. @Service, @Repository, and @Controller are specializations of @Component, which are used for more specific cases.

@ComponentScan ensures that the classes decorated with @Component are found and registered as Spring beans. @ComponentScan is automatically included with @SpringBootApplication.

@Bean servers a similar purpose as @Component. It is not autodetected. Methods decorated with @Bean produce a bean to be managed by the Spring container during configuration stage.

@SpringBootApplication annotation enables auto-configuration and component scanning. 
It is a convenience annotation for @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations.


------------------------------------------------------------------------------------------------------------------------------
http://zetcode.com/spring/configuration/
(deals with @Configuration)
------------------------------------------------------------------------------------------------------------------------------
Configuration --> @Configuration is also a @Component (but just a @Component cannot act as @Configuration)
Value
ComponentScan
PropertySource

------------------------------------------------------------
https://www.baeldung.com/spring-component-repository-service
------------------------------------------------------------
Component vs Service and Repository

=========================
ANNOTATIONS
=========================

--------------------
Component
--------------------
http://zetcode.com/springboot/component/#:~:text=%40Component%20is%20the%20most%20generic,used%20for%20more%20specific%20cases.

@Component
@Component is the most generic Spring annotation. 
A Java class decorated with @Component is found during classpath scanning and registered in the context as a Spring bean. 
--> This is important - gets detected and registered in the context

@Service, @Repository, and @Controller are specializations of @Component, which are used for more specific cases.

@ComponentScan ensures that the classes decorated with @Component are found and registered as Spring beans. 
@ComponentScan is automatically included with @SpringBootApplication.
--> Springboot application automatically scans for components

@Bean servers a similar purpose as @Component. 
But, It is not autodetected. 
Methods decorated with @Bean produce a bean to be managed by the Spring container during configuration stage.

Application is the entry point which sets up Spring Boot application. 
The @SpringBootApplication annotation enables auto-configuration and component scanning. 
It is a convenience annotation for @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations.
(also see https://spring.io/guides/gs/spring-boot/)

Also:
- @Configuration is also a @Component (but just a @Component cannot act as @Configuration)

--------------------
Configuration
--------------------

--------------------
Autowired
--------------------
https://octoperf.com/blog/2018/02/08/spring-autowiring/

--------------------
PostConstruct
--------------------
Also, run(), init()
https://www.baeldung.com/running-setup-logic-on-startup-in-spring
