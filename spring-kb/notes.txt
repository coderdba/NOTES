Executor framework of Java - parallel calls to DB
JPQL - not JPA - @Query for complex SQLs
Guava framework for caching

=====================
RestController
=====================
https://spring.io/guides/gs/spring-boot/

package hello;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Greetings from Spring Boot!";
    }

}
The class is flagged as a @RestController, meaning it’s ready for use by Spring MVC to handle web requests. 
@RequestMapping maps / to the index() method. When invoked from a browser or using curl on the command line, 
the method returns pure text. That’s because @RestController combines @Controller and @ResponseBody, 
two annotations that results in web requests returning data rather than a view.

==============================
CONTROLLER AND RESPONSE BODY
==============================
http://projects.spring.io/spring-boot/

package hello;

import org.springframework.boot.*;
import org.springframework.boot.autoconfigure.*;
import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

@Controller
@EnableAutoConfiguration
public class SampleController {

    @RequestMapping("/")
    @ResponseBody
    String home() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(SampleController.class, args);
    }
}
