create table skydeck.notification_config (
  id                int primary key GENERATED BY DEFAULT AS IDENTITY,
  name              varchar(100) not null unique,
  description       varchar(250),
  email_dl          varchar(250) not null,
  teams_handle      varchar(250),
  goalert_handle    varchar(250),
  creator_id        varchar(150) not null,
  creator_id_type   int check(creator_id_type in (0,1,2)),
  created_timestamp timestamp with time zone not null,
  updater_id        varchar(150),
  updater_id_type   int check(updater_id_type in (0,1,2)),
  updated_timestamp timestamp with time zone
);

--------
Testing
--------
Partial jsons should be allowed in the body
Make up the full json before insert/update
It is ok to have description, teams-handle etc nullable fields to be NOT provided in the json (for both insert and update)

-----------------------
validateHeaders() --> this applies to all requests (not just notification config)
-----------------------
NOTE: Wrapper should be made to send additional header "sso-token" when calling the backend API

validateHeaders() {

Note: while testing wrapper locally, also send sso-token, consumer-key in header
Note: while testing backend api locally also, send forgerock-token and consumer-key in header

if consumer-key is not present throw error;

}

-----------------------
validateBeforeCreateNotifConfig() *reviewed with nikki on 29 Dec 2022
-----------------------
validateBeforeCreateNotifConfig() {

dont validate ID as it is autogenerated in our case

The following "may be coded" to avoid DB exception later on: (or may be NOT coded so that DB only will address them)
(better if coded as it will avoid going to database which is good)
name should not be null (or should have length > 0)
email_dl should not be null (or should have length > 0)

The following checks are NOT required as we ignore them and instead set them with 'set before insert' actions.
- creator_id should NOT be present 
- creator_id_type should NOT be present
- created_timestamp should NOT be present

The following checks are NOT required as we ignore them and instead set them as NULLs with 'set before insert' actions.
- updater_id should NOT be present
- updater_id_type should NOT be present
- updated_timestamp should NOT be present

}

-----------------------
validateBeforeUpdateNotifConfig()
-----------------------

NOTE: This should be done BEFORE doing findById or findByName
      THIS IS DONE ON THE REQUEST BODY CONTENT - NOT ON THE OBJECT WE FETCH USING findById or findByName

validateBeforeUpdateNotifConfig() {

if id is in the URL itself, then:
	it should be integer and > 0 
	it should not be present in the body json

if name is present in the URL itself, then id should not be present in the body json

if id or name is not in the URL itself, then:
	- in the body json, id OR name must be provided - if both of them are missing then it is bad request 
	- in the body json, if id is provided then it should be integer and > 0 

At least one of the following should be present 
	name (if id is also present)
	description       
	email_dl          
	teams_handle      
	goalert_handle 

name if present should not be null (or should have length > 0)   
email_dl if present should not be null (or should have length > 0)   

The following checks are NOT required as we ignore them - and they are set during inserts only
- creator_id should NOT be present
- creator_id_type should NOT be present
- created_timestamp should NOT be present

The following checks are NOT required as we ignore them and instead set them with 'set before update' actions.
- updater_id should NOT be present
- updater_id_type should NOT be present
- updated_timestamp should NOT be present

}

-----------------------
setBeforeCreateNotifConfig()
-----------------------
setBeforeCreateNotifConfig() {

Set the fields as null for those that are not present in the json-body
- except updater_id, updater_id_type, updated_timestamp

if sso-token is present in header {

	maersk_id = decode the token value and get the MaerskID of the person from it 

	creator_id = maersk_id
	creator_id_type = AD (make enum setting 1 for AD, 2 for API)
	

} else {

	creator_id = consumer-key
	creator_id_type = API (make enum setting 1 for AD, 2 for API)

}

created_timestamp = current timestamp


}

-----------------------
setBeforeUpdateNotifConfig()
-----------------------

setBeforeUpdateNotifConfig() {

creator_id - assign the consumer-key of jwt (note: while testing locally, test with this header provided)

// updates requested in request body

if id is given, then update the following DEPENDING ON whichever are sent in the request body:
NOTE: "object" is the object we fetch from DB by doing findById 
  object.name          = requestBody.name
  object.description   = requestBody.description
  object.email_dl          = requestBody.email_dl
  object.teams_handle      = requestBody.teams_handle
  object.goalert_handle    = requestBody.goalert_handle

if id is not given, name is given
NOTE: "object" is the object we fetch from DB by doing findByName
  object.description   = requestBody.description
  object.email_dl          = requestBody.email_dl
  object.teams_handle      = requestBody.teams_handle
  object.goalert_handle    = requestBody.goalert_handle

// other settings
if sso-token is present in the header {

	object.maersk_id = decode the sso token value and get the MaerskID of the person from it 

	object.updater_id = maersk_id
	object.updater_id_type = AD (make enum setting 1 for AD, 2 for API)
	

} else {

	object.updater_id = consumer-key
	object.updater_id_type = API (make enum setting 1 for AD, 2 for API)

}

object.updated_timestamp = current timestamp

}

-------------------------
createOneRowNotifConfig()
-------------------------

validateHeaders()
validateBeforeCreateNotifConfig() --> on the requestBody json

setBeforeCreateNotifConfig() --> on the fetched database-object
save() --> on the fetched database-object

-------------------------
updateOneRowNotifConfig()
-------------------------

validateHeaders()
validateBeforeUpdateNotifConfig() --> on the requestBody json

findById or findByName --> this fetches database-object
--> throw error if no records found

setBeforeUpdateNotifConfig() --> on the fetched database-object
save() --> on the fetched database-object


-------------------------
deleteOneRowNotifConfig()
-------------------------
Let us discuss later
