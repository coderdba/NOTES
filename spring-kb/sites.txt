=================================
SPRINGBOOT SITES
=================================

=================================
Baeldung
=================================
BAELDUNG GIT REPO: https://github.com/eugenp/tutorials/tree/master/spring-web-modules

=================================
Bushan Sirgur
=================================
https://bushansirgur.in/spring-boot-rest-api-testing-using-junit/

=================================
Ramesh Fadatare
=================================
Many java stuff - with spring, kafka, jpa, testing, 
https://www.javaguides.net/

=================================
SPRING DOCS
=================================
Docs:
https://docs.spring.io/spring-boot/docs/ --> look up your version here
https://docs.spring.io/spring-boot/docs/2.7.x/reference/html/
Testing: https://docs.spring.io/spring-boot/docs/2.7.x/reference/html/features.html#features.testing
(Testing: https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/html/boot-features-testing.html)

Projects:
https://spring.io/projects/spring-boot
https://spring.io/projects/spring-framework

https://spring.io/projects/spring-data
https://spring.io/projects/spring-data-jdbc
https://spring.io/projects/spring-data-jpa
https://spring.io/projects/spring-data-ldap
https://spring.io/projects/spring-data-rest
https://spring.io/projects/spring-data-jdbc-ext
(also for many databases in this spring-data site)

===============================
Some specific things:
Dependency injection - Java: https://www.journaldev.com/2394/java-dependency-injection-design-pattern-example-tutorial
Dependency injection - Spring a simple example: https://medium.com/edureka/what-is-dependency-injection-5006b53af782
Dependency injection - Spring a bit complex example: https://www.journaldev.com/2410/spring-dependency-injection
Service annotation: https://www.journaldev.com/21435/spring-service-annotation
Bean: https://www.journaldev.com/2461/spring-ioc-bean-example-tutorial

Controllers, multi-action controllers: https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch16s03.html
HTTP Response header setting: https://www.baeldung.com/spring-response-header, https://www.baeldung.com/spring-resttemplate-post-json
Test Cases: https://www.baeldung.com/spring-resttemplate-post-json

===============================

REFERENCE (good)
(also see TUTORIALS - OFFICIAL)
https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/

https://spring.io/guides
--> https://github.com/spring-guides

https://spring.io/guides/gs/rest-service/ --> rest 'greeting' tutorial (START YOUR SPRING BOOT HERE)
https://spring.io/guides/gs/spring-boot/ --> this has test case runners
https://spring.io/guides/gs/serving-web-content/

https://spring.io/guides/gs/accessing-data-jpa/ --> database using jpa

https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html - application.properties

Actuators:
  Production ready actuators: https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#production-ready-enabling
  Exposing endppoints: https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints

Metrics: https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#production-ready-metrics
Loggers: https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#production-ready-loggers

BOOKS
Introducing Spring Framework
-Felipe Gutierrez

COMPARISON
Spring vs Jersey http://stackoverflow.com/questions/26305363/spring-4-vs-jersey-for-rest-web-services

GRADLE
Dependency configuration: https://nexocode.com/blog/posts/spring-dependencies-in-gradle/
Testing: https://docs.gradle.org/current/userguide/java_testing.html
Gradle with springboot: https://spring.io/guides/gs/gradle/

================================
GENERAL KNOWLEDGE
@Bean vs @Component: https://stackoverflow.com/questions/10604298/spring-component-versus-bean#:~:text=%40Component%20is%20a%20class%20level,which%20is%20annotated%20with%20%40Configuration.

================================
TUTORIALS - VERY GOOD ONES
MANY PROJECTS: https://www.vogella.com/tutorials/SpringBoot/article.html (2020 VERY GOOD - many chapters under it)
Tutorialspoint: https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm

TUTORIALS
https://www.baeldung.com/learn-spring-course (2020)
http://websystique.com/springmvc/spring-mvc-requestbody-responsebody-example/ (Many examples)

TUTORIALS OFFICIAL
https://github.com/spring-guides -> official git examples
https://spring.io/guides/tutorials/bookmarks/
https://spring.io/guides/gs/spring-boot/
https://spring.io/guides/gs/actuator-service/
https://spring.io/guides/gs/serving-web-content/
https://spring.io/guides/gs/rest-service/
https://start.spring.io/ -> gradle/maven initialization tool
https://spring.io/guides/gs/scheduling-tasks/ --> background jobs - @Scheduler

MORE TUTORIALS
2018 finds:
https://springframework.guru/spring-boot-web-application-part-4-spring-mvc/
https://springframework.guru/configuring-spring-boot-for-oracle/

Seems very nice:
http://www.codejava.net/frameworks/spring/14-tips-for-writing-spring-mvc-controller

Many tutorials:
Set1:
  http://websystique.com/spring-boot/spring-boot-rest-api-example/
  http://websystique.com/springmvc/spring-mvc-4-restful-web-services-crud-example-resttemplate/
  https://github.com/dlee0113/spring-mvc-4-angularjs-example/tree/master/Spring4MVCAngularJSExample/src/main/java/com/websystique/springmvc
  
  See this for 'hibernate' - https://github.com/rahulparekh/CSE545-SecureBankingSoftware/tree/master/SunDevilBanking

https://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/ -- uses spring example

REST RESPONSES
ResponseEntity
- https://www.baeldung.com/spring-response-entity

EXCEPTION HANDLING
ResponseStatus annotation, ExceptionHandler
- https://www.baeldung.com/spring-response-status
- https://zetcode.com/springboot/responsestatus/
- https://zetcode.com/springboot/exceptionhandler/
- https://bushansirgur.in/spring-responsestatus-annotation-with-example/

TEST CASES
- REST endpoints Baeldung with RestTemplate - https://www.baeldung.com/spring-resttemplate-post-json
- REST endpoints with JUnit and Mockito (also, how to disable security during testing) - https://www.springboottutorial.com/unit-testing-for-spring-boot-rest-services
- REST endpoints - Spring Boot Unit Testing CRUD REST API with JUnit and Mockito - author: Ramesh Fadatare - https://www.javaguides.net/2022/03/spring-boot-unit-testing-crud-rest-api-with-junit-and-mockito.html
- Spring Data JPA Repository Testing using Spring Boot @DataJpaTest - author: Ramesh Fadatare - https://www.javaguides.net/2018/09/spring-data-jpa-repository-testing-using-spring-boot-datajpatest.html
- JPA repo testing (no rest endpoints) using JUnit from spring-boot-starter-test - https://www.javaguides.net/2018/09/spring-data-jpa-repository-testing-using-spring-boot-datajpatest.htm
- JPA CRUD - https://bushansirgur.in/spring-boot-rest-api-testing-using-junit/

- REST with Jmeter - no endpoint testing, only methods: https://www.blazemeter.com/blog/junit-rest-api-testingl
- General, using Mockito - https://www.tutorialspoint.com/spring_boot/spring_boot_unit_test_cases.htm




===============================
GUIDES/DOCS
https://stackoverflow.com/questions/29313687/trying-to-use-spring-boot-rest-to-read-json-string-from-post#29330280 - json request
https://stackoverflow.com/questions/37934850/getting-json-post-to-work-in-spring-boot - json request

https://spring.io/guides/gs/actuator-service/ --> rest with 'actuator' (also port change of in-built tomcat etc)
http://projects.spring.io/spring-boot/ --> add spring boot to project, and very simple example
https://spring.io/guides/gs/spring-boot/ --> spring-boot rest tutorial
https://spring.io/guides/gs/consuming-rest/
https://spring.io/guides/tutorials/bookmarks/ --> rest tutorial, get, post
--> https://spring.io/guides/gs/accessing-data-jpa/  --> accessing data
https://spring.io/blog/2014/03/07/deploying-spring-boot-applications --> to external tomcat

gradle - https://spring.io/guides/gs/gradle/

https://spring.io/guides/gs/batch-processing/ --> tutorial of a batch job - not rest
http://www.mkyong.com/tutorials/spring-batch-tutorial/ --> tutorial of a batch job - not rest

https://spring.io/blog/2014/03/07/deploying-spring-boot-applications

TOMCAT embedded server
https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html
http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging
(embedded http/tomcat/jetty, ssl/tls with certificate)

TOMCAT external server
https://spring.io/blog/2014/03/07/deploying-spring-boot-applications
http://stackoverflow.com/questions/34506712/how-to-deploy-spring-boot-web-application-on-tomcat-server
Also see section "- Use these three docs"
  https://www.mkyong.com/spring-boot/spring-boot-deploy-war-file-to-tomcat/
  (dependencies in http://www.mkyong.com/spring-boot/spring-boot-hello-world-example-thymeleaf/)
  http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file
  http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging
  
ANNOTATIONS
Many: https://springframework.guru/spring-framework-annotations/
GetMapping etc: http://www.appsdeveloperblog.com/spring-mvc-postmapping-getmapping-putmapping-deletemapping/
PostConstruct and PostDestroy annotations: https://www.baeldung.com/spring-postconstruct-predestroy
Service annotation in Spring: https://www.journaldev.com/21435/spring-service-annotation

How to make it a WAR: 
- Use these three docs
  https://www.mkyong.com/spring-boot/spring-boot-deploy-war-file-to-tomcat/
  (dependencies in http://www.mkyong.com/spring-boot/spring-boot-hello-world-example-thymeleaf/)
  http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file
  http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging

https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html
Maven plugin: http://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html
https://spring.io/guides/gs/convert-jar-to-war/
http://stackoverflow.com/questions/34506712/how-to-deploy-spring-boot-web-application-on-tomcat-server

http://stackoverflow.com/questions/35709341/how-do-you-deploy-the-building-rest-services-with-spring-tutorial
http://stackoverflow.com/questions/41087652/lifecycle-exception-when-deploying-example-spring-boot-app

Mulitiple controllers - http://tutorialspointexamples.com/spring-mvc-multiple-controller-program-code-eclipse-download-pdf/

Spring - http://www.tutorialspoint.com/spring/
  Download: https://github.com/spring-projects/spring-framework/releases

Spring-boot - http://projects.spring.io/spring-boot/
  Download: http://mvnrepository.com/artifact/org.springframework.boot/spring-boot/1.3.5.RELEASE
  (ALL spring-boot downloads: http://mvnrepository.com/artifact/org.springframework.boot)
Spring-boot installation - http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html

Spring-boot-autoconfigure download: http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure/1.3.5.RELEASE

MVC - https://docs.spring.io/docs/Spring-MVC-step-by-step/
MVC - http://www.tutorialspoint.com/spring/spring_mvc_hello_world_example.htm
MVC - http://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm
MVC - without web.xml - http://kielczewski.eu/2013/11/spring-mvc-without-web-xml-using-webapplicationinitializer/

JDBC - http://www.tutorialspoint.com/spring/spring_jdbc_example.htm
JDBC - Stored Procedure calling- http://www.tutorialspoint.com/spring/calling_stored_procedure.htm

JDBC - http://www.javatpoint.com/spring-JdbcTemplate-tutorial
JDBC - http://www.dineshonjava.com/2012/12/implementing-rowmapper-chapter-34.html#.VzSofNSXeK0

Rest API - non JSON - https://spring.io/guides/gs/rest-service/ 
  Making it tomcat-war: http://stackoverflow.com/questions/19820029/spring-restful-service-as-a-war-instead-of-jar-in-tomcat
Rest API - JSON - http://www.java2blog.com/2015/09/spring-restful-web-services-json-example.html
Rest API - non JSON - http://www.java2blog.com/2015/09/spring-restful-web-services-example.html
Rest API - CRUD - http://www.java2blog.com/2016/04/spring-restful-web-services-crud-example.html
REST API - JSON, Tomcat - http://www.concretepage.com/spring-4/spring-4-rest-web-service-json-example-tomcat

*** Hello-World servlet with Eclipse, Maven - http://crunchify.com/simplest-spring-mvc-hello-world-example-tutorial-spring-model-view-controller-tips/
Servlet-spring tutorial (not good) - https://developer.ibm.com/wasdev/docs/creating-a-simple-helloworld-spring-servlet/

Convert spring jar to war for Tomcat: http://stackoverflow.com/questions/19820029/spring-restful-service-as-a-war-instead-of-jar-in-tomcat
Maven create war: http://crunchify.com/how-to-create-a-war-file-from-eclipse-using-maven-plugin-apache-maven-war-plugin-usage/

Spring WAR 404 troubleshooting: http://stackoverflow.com/questions/19820029/spring-restful-service-as-a-war-instead-of-jar-in-tomcat


WITH GROOVY
https://objectpartners.com/2016/01/12/using-groovy-based-spring-configuration/
https://dzone.com/articles/spring-4-groovy

Form submission - https://spring.io/guides/gs/handling-form-submission/  (with thymeleaf)
Form submission - http://www.baeldung.com/spring-mvc-form-tutorial

FILE UPLOAD API:
https://spring.io/guides/gs/uploading-files/

METRICS Micrometer:
- @Timed https://micrometer.io/docs/concepts#_the_code_timed_code_annotation
- @Timed issue: https://github.com/micrometer-metrics/micrometer/issues/351

METRICS Dropwizard (codahale):
https://www.baeldung.com/java-dropwizard
Dropwizard is an open-source Java framework used for the fast development of high-performance RESTful web services. It gathers some popular libraries to create the light-weight package. The main libraries that it uses are Jetty, Jersey, Jackson, JUnit, and Guava. Furthermore, it uses its own library called Metrics.

- Main docs: https://www.dropwizard.io/en/latest/getting-started.html (and examples using Jersey - does not mention springboot)
- Timer, Meter, Counter etc: https://metrics.dropwizard.io/3.1.0/getting-started/ (also has how to view using JMX)
- Timed and other annotations, examples: https://dropwizardio.readthedocs.io/en/v0.7.0/getting-started.html

- Meter, timer, counter, ConsoleReporter and such: https://www.baeldung.com/dropwizard-metrics
- @Timed with AspectJ: https://www.baeldung.com/timed-metrics-aspectj
- @Timed: https://instil.co/blog/spring-boot-with-dropwizard-metrics/
          --> https://github.com/instil/spring-boot-dropwizard-blog
- Expose /metrics with actuator: https://reflectoring.io/transparency-with-spring-boot/

LOMBOK on Eclipse - it does not work without installing the plugin in Eclipse
https://www.baeldung.com/lombok-ide
--> sudo java -jar lombok.jar and then choose Eclipse and then it will work

OBJECTMAPPER (Jackson) - to map various string, json etc inputs to objects
https://www.baeldung.com/jackson-object-mapper-tutorial

TEST CASE WRITING
https://www.baeldung.com/spring-resttemplate-post-json

=================================
JPA, BULK INSERT - BATCH INSERT
=================================

JPA Specifications: https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html

JPA - Custom Query (like findByName)
- https://www.tutorialspoint.com/spring_boot_jpa/spring_boot_jpa_custom_queries.htm
  - also, good test case examples
- Adding findByName very simply
  - https://bushansirgur.in/spring-data-jpa-finder-methods-by-field-name-with-examples

JPA - Database Connection
https://spring.io/projects/spring-data-jpa

JPA: https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa

Batch Inserts with CrudRepository: https://www.baeldung.com/spring-data-jpa-batch-inserts
- https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-crud

Batch Inserts with JPARepository: https://www.baeldung.com/jpa-hibernate-batch-insert-update
- https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-crud

JPA Metrics
- https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/production-ready-metrics.html
- Example: https://thorben-janssen.com/how-to-activate-hibernate-statistics-to-analyze-performance-issues/#Demo_application
-- activated by setting the system property hibernate.generate_statistics to true and the log level for org.hibernate.stat to DEBUG.
----  Caution on overhead: https://www.overops.com/blog/hibernate-logging-tips-and-solutions-to-common-problems/ (by the same author)
    jpa:
        properties:
            hibernate:
                dialect: org.hibernate.dialect.Oracle12cDialect
                generate_statistics: false
                jdbc:
                    batch_size: 20
                    batch_versioned_data: true
                order_inserts: true
                order_updates: true
        show-sql: false
        
- https://vladmihalcea.com/hibernate-statistics/
- https://github.com/micrometer-metrics/micrometer/blob/main/micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java

Oracle JPA Tutorial
- https://www.oracle.com/application-development/technologies/eclipse/jpatutorial-p1.html
- https://www.oracle.com/application-development/technologies/eclipse/jpatutorial-p2.html

Hibernate performance
- https://thorben-janssen.com/tips-to-boost-your-hibernate-performance/

JPA - build query, dsl, Partial Updates
https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/
https://www.baeldung.com/rest-api-search-language-spring-data-specifications

Partial update - https://www.baeldung.com/spring-data-partial-update

**Persistene.xml** - https://thorben-janssen.com/jpa-persistence-xml (needed for EntityManager stuff)
- keep persistence.xml in src/resources/META-INF
Persistence.xml - To avoid error - https://stackoverflow.com/questions/57395334/unrecognized-jpa-persistence-xml-xsd-version-hibernate-java-ee-and-postg
    {
        "timestamp": "2022-12-30T06:52:07.108+00:00",
        "message": "java.lang.IllegalArgumentException: Unrecognized JPA persistence.xml XSD version : ``: class javax.persistence.PersistenceException: Unable to locate persistence units"
    }
    <persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
      http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
      version="2.1">
  
Entitymanager - createQuery, query bind variable/parameter: http://www.coderpanda.com/jpa-update-query-example/
Entitymanager - createQuery: http://www.coderpanda.com/jpa-update-query-example/
Entitymanager - add new row - "persist"/save: https://www.javaguides.net/2018/12/jpa-entitytransaction-interface-with-example.html 
Entitymanager - find and update (not a good way): https://www.javatpoint.com/jpa-updating-an-entity

JPA - query partial entity
https://stackoverflow.com/questions/1359801/query-partial-entities-with-jpa

===========================
DOCKER, KUBERNETES
- Create springboot docker image: https://spring.io/guides/topicals/spring-boot-docker/
- On Kubernetes: https://spring.io/guides/topicals/spring-on-kubernetes/

METRICS
https://spring.io/guides/tutorials/metrics-and-tracing/

VARIOUS
https://spring.io/guides#topical-guides


