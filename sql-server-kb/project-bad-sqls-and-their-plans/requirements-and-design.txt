==================================================
BAD AND TOP SQLS AND THEIR PLANS, RECOMMENDATIONS
==================================================

==================================================
REQUIREMENT
==================================================
Find top sqls - using sql statistics
Find bad sqls - from any dynamic plan table if such a view exist
- dynamic views
- query store 

For each of those top & bad sqls, run explain plan
Flag the ones with bad plans

Print the sql
Print the sql statistics (like executions, IO, time taken etc)
Print the plan
If query store is enabled, query recommendations also from it

Parse the sql for common problems if possible and print deficiencies
- find if there is any open source or tutorial on how to detect bad syntax in sqls

==================================================
DOCKER IMAGE
==================================================
Docker image sor sqlcmd on linux: https://hub.docker.com/_/microsoft-mssql-tools
- to run one time: docker run --rm -it mcr.microsoft.com/mssql-tools
- to run as a daemon, if you want to place a periodical metric collector looping shell - put a shell with while loop and make that the entrypoint

FROM DOCKER SITE

How to Use this Image
Pull the Docker image: docker pull mcr.microsoft.com/mssql-tools

Run a container in interactive mode: docker run -it mcr.microsoft.com/mssql-tools

Try out sqlcmd/bcp: root@1396d2e50672:/# sqlcmd

Microsoft (R) SQL Server Command Line Tool Version 13.1.0007.0 Linux Copyright (c) 2012 Microsoft. All rights reserved.

usage: sqlcmd [-U login id] [-P password] [-S server or Dsn if -D is provided] [-H hostname] [-E trusted connection] [-N Encrypt Connection][-C Trust Server Certificate] [-d use database name] [-l login timeout] [-t query timeout] [-h headers] [-s colseparator] [-w screen width] [-a packetsize] [-e echo input] [-I Enable Quoted Identifiers] [-c cmdend] [-q "cmdline query"] [-Q "cmdline query" and exit] [-m errorlevel] [-V severitylevel] [-W remove trailing spaces] [-u unicode output] [-r[0|1] msgs to stderr] [-i inputfile] [-o outputfile] [-k[1|2] remove[replace] control characters] [-y variable length type display width] [-Y fixed length type display width] [-p[1] print statistics[colon format]] [-R use client regional setting] [-K application intent] [-M multisubnet failover] [-b On error batch abort] [-D Dsn flag, indicate -S is Dsn] [-X[1] disable commands, startup script, environment variables [and exit]] [-x disable variable substitution] [-? show syntax summary]

Example: # sqlcmd -S 127.0.0.1 -U sa -P MyPassword100 > select @@version > go
- Note: these ">" are not redirection symbols of shell programming - they are more of sqlcmd syntax

#Related Microsoft SQL Server docker images SQL Server for Linux Containers: microsoft/mssql-server-linux SQL Server Developer Edition for Windows Containers: microsoft/mssql-server-windows-developer SQL Server Express Edition for Windows Containers: microsoft/mssql-server-windows-express

#Dockerfile Check out the Dockerfile on GitHub: https://github.com/Microsoft/mssql-docker/blob/master/linux/mssql-tools/Dockerfile

==================================================
CONTAINER DESIGN
==================================================
Environment variables for user/pass/host/port/db
Shell script that will use the environment variables and run the steps to satisfy the requirement
