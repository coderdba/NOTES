Good ones
https://victorops.com/site-reliability-engineering/guide-to-sre-and-the-four-golden-signals-of-monitoring/
https://thenewstack.io/a-site-reliability-engineers-advice-on-what-breaks-our-systems/


================
Observability
================
Down
Hot
Slow
Errors
Supplementary metrics

Host - cpu, mem, disk space, cpu-steals, ping hostname, ping ip addr, connectivity to specific ports(ssh, 80, 443 etc)

================
BREAKING POINTS
================
https://thenewstack.io/a-site-reliability-engineers-advice-on-what-breaks-our-systems/

The “taxonomy” breaks catastrophic events into six categories.
Hitting limits
Spreading Slowness
Thundering Herds
Automation Interactions
Cyberattacks
Dependency Problems

Circuit breakers / Break-offs 
- dont keep on retrying forever hitting authentication system or dns and pose too much load on them
- instead, try a few times, put up a sorry page, send an alert
- Another solution: implement a circuit-breaker pattern. “Instead of dealing with retries on a per-request basis, you put a little widget of software in front that sees all the requests going out from a particular client, which might be serving many many user requests, to a backend service. And if it sees across all these requests that the back end service is not healthy, it’ll fail those requests fast, before they even go to the unhealthy service.”

One system can break other
- slow response from a called system ended up in too many connections piling up in load balancer - in ideal scenario, those would have come, worked and gone...

