When to use rabbit and kafka: https://www.cloudamqp.com/blog/when-to-use-rabbitmq-or-apache-kafka.html

Kafka vs RabbitMQ - performance: (Rabbit seems faster)
https://www.confluent.io/blog/kafka-fastest-messaging-system/

Kafka vs RabbitMQ - key differences and use-cases: very good architecture overview also
https://www.instaclustr.com/blog/rabbitmq-vs-kafka/
- Kafka stream processing - https://www.instaclustr.com/blog/kafka-streams-guide/
- Rabbit MQ use cases - https://www.rabbitmq.com/features.html

Kafka vs RabbitMQ - arhitecture, comparison - https://www.projectpro.io/article/kafka-vs-rabbitmq/451 - very good

Rabbit MQ streams - for offset - https://blog.rabbitmq.com/posts/2021/09/rabbitmq-streams-offset-tracking/

Examples, tutorials:
- https://www.rabbitmq.com/tutorials/tutorial-one-python.html
- https://www.cloudamqp.com/blog/part2-3-rabbitmq-for-beginners_example-and-sample-code-python.html

=========================================
KEY DIFFERENCES AND SIMILARITIES
=========================================

Kafka vs RabbitMQ - arhitecture, comparison - https://www.projectpro.io/article/kafka-vs-rabbitmq/451 - very good
- Kafka - consumer pulls data - consumer is smart
- Rabbit - rabbit pushes data to consumer - consumer is dumb 

- Kafka - offset for records in server-side
- Rabbit - no offset - however, with Rabbit Streams offset can be set

- Kafka - persistence can be set for keeping records for some time before deletion
- Rabbit - persistence only until consumer consumes the record - then it gets deleted

========================================
ARCHITECTURE NOTES
========================================

Kafka vs RabbitMQ - arhitecture, comparison - https://www.projectpro.io/article/kafka-vs-rabbitmq/451 - very good

    What is RabbitMQ?
    With over 10K+ users, RabbitMQ is one of the most widely deployed message brokers that help applications and services exchange information with each other without maintaining homogeneous exchange protocols. Like in most protocol methods, messages sent do not guarantee that they've been delivered and processed, so RabbitMQ adopts message delivery acknowledgment and implements smart broker design in its architecture. A smart broker is one that provides messages to consumers by handling the processing at its side. The consumer needn't worry about asking for data. Consumers fundamentally act as dummy recipients of the information. Data is promptly deleted from RabbitMQ as soon as consumers have finished processing it. 

    What is Kafka?
    Kafka is a commit-log/message-processing implementation that stresses data storage and retrieval more, with scalability and data redundancy. It implements an intelligent client/subscriber policy where the consumer is solely responsible for requesting and retrieving data from the broker. Messages can be processed in batches or individually from the broker and can be re-requested multiple times for processing after that.
    
  Kafka vs. RabbitMQ - Architectural Differences
  Kafka employs a publisher/subscriber model where events are stored inside partitions as topics. These partitions reside within the broker. And multiple brokers come together to form a cluster of brokers. A consumer can read the data and process it using the offset number. The offset number itself is written inside the partitions. The data stays in the partition for a specific time, referred to as the retention period. After which, it is deleted. Consumers can also form their clusters, and those are identified by consumer group ID. Consumers know exactly which partition to pool data from. That's the idea behind Kafka's architecture. Recurrent retrieval of data. Copies of the same topics are replicated in multiple brokers to avoid failure. The flow of events in Kafka is as follows.

  Consumer -> broker -> partition -> Consumer 

  RabbitMQ's architecture, unlike Kafka, has a routing mechanism/design in place. A major difference between Kafka and RabbitMQ architecture is that messages in RabbitMQ aren't supposed to persist for long, though they may be. Finally, queues are an implementation choice for the sequential ordering of messages inside the broker. These three features mainly distinguish RabbitMQ from Kafka's architecture. As will be evident eventually in our discussion, these design choices give RabbitMQ different use cases even though Kafka and RabbitMQ are both â€“ to say it loosely - message brokers. The message flow in RabbitMQ happens as follows.

  Consumer-> Exchange -> binding rules -> queue -> producer  
