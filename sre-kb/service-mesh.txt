=====================================
SERVICE MESH
=====================================

REFERENCES:
https://www.baeldung.com/ops/istio-service-mesh
- Fallacies of distributed systems: https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing

=====================================
NOTES
=====================================
https://www.baeldung.com/ops/istio-service-mesh
Since distributed services have to communicate with each other, we have to think about:
- discovery
- routing
- retries
- fail-over

There are several other concerns like: 
- security
- observability

Now, building these communication capabilities within each service can be quite tedious — even more so when the service landscape grows and communication becomes complex. 
This is precisely where a service mesh can help us.
Basically, a service mesh takes away the responsibility of managing all service-to-service communication within a distributed software system.

The way service mesh is able to do that is through an array of network proxies. 
Essentially, requests between services are routed through proxies that run alongside the services but sit outside in the infrastructure layer.

These proxies basically create a mesh network for the services — hence the name, service mesh

Also read: https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing

FEATURES OF SERVICE MESH
- traffic management
- security
- observability

TRAFFIC MANAGEMENT
- Dynamic discovery & Routing
- Enables: traffic shadowing and traffic splitting
- Also enables some reliability features: retries, timeouts, rate-limiting, and circuit breakers

SECURITY
- service to service communication
- TLS
- Encryption
- Network-segmentation
- Historical information for auditing

OBSERVABILITY
- as service mesh handles all communication - it can provide much observability
- individual services & whole system
- information about distributed tracing
- latency, traffic, errors, and saturation (four golden signals of SRE)
- access logs




