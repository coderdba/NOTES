==============================================
ALLOWING 'BECOME' ROOT IN ANSIBLE
==============================================
Cmnd_Alias      ANSIBLEROOT = /bin/sh --> this is for ansible like users to remotely become any user and run any command

====================================================
For Sudoers for Ansible to “become” a Specific User
====================================================

====================================================
Preferred Sudoers Entries
====================================================
------------------------------------------
SUMMARY OF ALL SUDO SETTINGS
------------------------------------------
# For remote actions by 'becoming' the other user
myuserid ALL=(otherUser) NOPASSWD: /bin/sh  
%myGroup ALL=(otherUser) NOPASSWD: /bin/sh 

# To logon on a terminal with traditional "sudo su - otheruser"
myuserid ALL = (root) NOPASSWD: /bin/su - otheruser
%mygroup ALL = (root) NOPASSWD: /bin/su - otheruser

# To enable otheruser to run root commands, say for example start/stop osquery related services
otheruser ALL = (root) NOPASSWD: /usr/bin/systemctl start osquery*
otheruser ALL = (root) NOPASSWD: /usr/bin/systemctl stop osquery*

------------------------------------------
DETAILS OF ALL SUDO SETTINGS
------------------------------------------
See the sections below.
----------------------------------------------------
With everything allowed (as a specific other user)
----------------------------------------------------
→ for Ansible to “become” a specific user

myuserid ALL=(otherUser) NOPASSWD: /bin/sh  
%myGroup ALL=(otherUser) NOPASSWD: /bin/sh 

----------------------------------------------------------------------------------------------
Further, to allow sudo to another user on a terminal with traditional "sudo su - otheruser"
----------------------------------------------------------------------------------------------
myuserid ALL = (root) NOPASSWD: /bin/su - otheruser
%mygroup ALL = (root) NOPASSWD: /bin/su - otheruser

----------------------------------------------------------------------------------------------
Sudoers entries to run root commands as the other user
----------------------------------------------------------------------------------------------
That is, myuser will sudo to otheruser and the otheruser has privilege to run, say, root-only commands
otheruser ALL = (root) NOPASSWD: /usr/bin/systemctl start osquery*
otheruser ALL = (root) NOPASSWD: /usr/bin/systemctl stop osquery*

------------------------------------------
HOW TO USE THESE SETTINGS
------------------------------------------

-----------------------------------------------------
Execute a Remote Command
-----------------------------------------------------
ssh myuserid@remote_hostname "sudo -u otheruser /bin/sh -c 'ls -lrt /home/temp1/ && whoami'"

-----------------------------------------------------
Manual operations on terminal - With just /bin/sh 
-----------------------------------------------------
With just /bin/sh you cannot do "sudo su - otheruser" to logon to otheruser on a terminal.
Instead, follow steps like the following.

- To logon as otherUser on terminal:  Do “sudo -u otherUser /bin/sh” to logon to otherUser on a terminal
-- This does not work: “sudo su - otherUser” with this on a terminal and logon to otherUser

To run a command as otherUser, while being your user in a terminal:
- sudo -u otherUser /bin/sh -c "whoami"

To execute a sudo command which is enabled for otherUser - so, the first sudo is for my user to execute a command as otherUser, and the second sudo is for otherUser user to execute its permitted elevated command
- sudo -u otherUser /bin/sh -c "sudo cat /etc/sudoers"

Another sudo command from otherUser’s sudo privilege
- sudo -u otherUser /bin/sh -c "sudo /usr/bin/systemctl start aService"

-----------------------------------------------
Possible Sudoers File Entries (for reference)
-----------------------------------------------
With everything allowed (for a specific user) - PREFERRED
myuserid ALL=(otherUser) NOPASSWD: /bin/sh  → for Ansible to “become”  a specific user

To logon as otherUser on terminal:  Do “sudo -u otherUser /bin/sh” to logon to otherUser on a terminal
- This does not work: “sudo su - otherUser” with this on a terminal and logon to otherUser

With specific command allowed (for a specific user) - NOT PREFERRED
myuserid ALL=(otherUser) NOPASSWD: /bin/sh -c *  → for Ansible to “become”  a specific user
- Does not allow to logon to otherUser on a terminal

These entries to allow logon (with sudo su - otherUser) to otherUser on a terminal will be required if using “/bin/sh -c *” option:
- Cmnd_Alias      SUDOWITHSHELL = /bin/su - otherUser →  to be able to logon to otherUser user with a shell

============================================================================================
Sudoers with Commands Run as a Specific User Only (not “become”)
============================================================================================
With everything allowed (for a specific user) - PREFERRED
myuserid ALL=(otherUser) NOPASSWD: /bin/sh  → for Ansible to “become”  a specific user

To logon as otherUser on terminal:  Do “sudo -u otherUser /bin/sh” to logon to otherUser on a terminal

This does not work: “sudo su - otherUser” with this on a terminal and logon to otherUser

With specific command allowed (for a specific user) - NOT PREFERRED
myuserid ALL=(otherUser) NOPASSWD: /bin/sh -c *  → for Ansible to “become”  a specific user

Does not allow to logon to otherUser on a terminal

These entries to allow logon (with sudo su - otherUser) to otherUser on a terminal will be required if using “/bin/sh -c *” option:

Cmnd_Alias      SUDOWITHSHELL = /bin/su - otherUser →  to be able to logon to otherUser user with a shell
myuserid ALL = SUDOWITHSHELL → for a user to logon as the other user

======================================================================
Sudoers with Commands Run as a Specific User Only (not “become”)
======================================================================

----------------------------
Preferred Sudoers Entries
----------------------------
myuserid ALL = NOPASSWD: /bin/su - otherUser -c * → to execute commands as a specific user

Use (otherUser) NOPASSWD instead of just NOPASSWD if you face errors like “cannot run as root” → confirm from Kyndril/Jegan if required

Cmnd_Alias      SUDOWITHSHELL = /bin/su - otherUser →  to be able to logon to otherUser user with a shell (with sudo su - otherUser) 
myuserid ALL = SUDOWITHSHELL → for a user to logon as the other user

 
--------------------------------------------------------
Manual operations on terminal
--------------------------------------------------------

To logon as otherUser on terminal:  “sudo su - otherUser” 

To run a command as otherUser, while being your user in a terminal:
- sudo su - otherUser -c "whoami"

To execute a sudo command which is enabled for otherUser - so, the first sudo is for my user to execute a command as otherUser, and the second sudo is for otherUser user to execute its permitted elevated command
- sudo su - otherUser -c "sudo cat /etc/sudoers"  --> when the other user has more specific sudo privilege on some commands

Another sudo command from otherUser’s sudo privilege 
- sudo su - otherUser  -c "sudo /usr/bin/systemctl start aService"

--------------------------------------------------------
Possible Sudoers File Entries (for reference)
--------------------------------------------------------
Cmnd_Alias      ANSIBLEROOT = /bin/sh --> this is for ansible like users to remotely become any user and run any command

Cmnd_Alias      SUDOWITHSHELL = /bin/su - gsmora --> to be able to logon to gsmora
gsm1 ALL=SUDOWITHSHELL --> for a user to logon as the other user
gsm1 ALL= NOPASSWD: SUDOWITHSHELL --> This is to do the same logon without password also

gsm1 ALL = (root) NOPASSWD: /bin/sh - gsmora *
  --> to be able to execute any command under gsmora (does not need the other line of "to be able to logon to gsmora")
  --> Also this allows login to that user as well because there is no -c before *

gsm2 ALL = (root) NOPASSWD: /bin/sh - gsmora -c *
  --> to be able to execute any command under gsmora (does not need the other line of "to be able to logon to gsmora")
  --> Also this DOES NOT ALLOW TO login to that user because there is -c before *


=======================================
ANSIBLE TEST CASES
=======================================
Assume that the user to be is ‘grafana’

Single command
- Local grafana commands (whoami, mkdir $HOME/ansibletest)
- Systemctl restart commands which are indirectly given to ‘grafana’ via sudoers

Multi command
- Local grafana commands  (whoami, mkdir $HOME/ansibletest)
- Systemctl restart commands which are indirectly given to ‘grafana’ via sudoers

File-copy from local to target machine - using ansible module

Negative testing
- Should not be able to run commands as ‘root’
-- Whoami
-- cat /etc/secure or /etc/sudoers (a file that has permission 600, owned by root)

Should not be able to run commands as other users (non root, non-grafana)
- Whoami
- cat a 600 permission file owned by that other user


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OLD NOTES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
==============================================
ALLOWING 'BECOME' SPECIFIC USER IN ANSIBLE
==============================================
gsm1 ALL=(gsmora) NOPASSWD: /bin/sh -c *

============================
ALLOWING SPECIFIC COMMANDS
============================
Cmnd_Alias      ANSIBLEORACLE = /bin/su - gsmora --> to be able to logon to gsmora
gsm1 ALL=ANSIBLEORACLE --> for a user to logon as the other user
gsm1 ALL= NOPASSWD: ANSIBLEORACLE --> This is to do the same logon without password also

gsm1 ALL = (root) NOPASSWD: /bin/sh - gsmora * 
  --> to be able to execute any command under gsmora (does not need the other line of "to be able to logon to gsmora")
  --> Also this allows login to that user as well because there is no -c before *

gsm2 ALL = (root) NOPASSWD: /bin/sh - gsmora -c * 
  --> to be able to execute any command under gsmora (does not need the other line of "to be able to logon to gsmora")
  --> Also this DOES NOT ALLOW TO login to that user because there is -c before *
